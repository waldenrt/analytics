/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TimePeriodData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6581360510469890175L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TimePeriodData\",\"namespace\":\"com.brierley.avro.schemas\",\"fields\":[{\"name\":\"timePeriod\",\"type\":\"int\",\"doc\":\"The Balor time period, calculated ascending\"},{\"name\":\"newCustCount\",\"type\":\"long\",\"doc\":\"The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods\"},{\"name\":\"newTxnCount\",\"type\":\"long\",\"doc\":\"The number of transactions made by NEW customers in the given Balor time period.\"},{\"name\":\"newTxnAmt\",\"type\":\"double\",\"doc\":\"The total spend of transactions made by NEW customers in the given Balor time period.\"},{\"name\":\"newDiscAmt\",\"type\":\"double\",\"doc\":\"The total discount amount of transactions made by NEW customers in the given Balor time period.\"},{\"name\":\"newItemQty\",\"type\":\"long\",\"doc\":\"The total number of items purchased by all NEW customers in the given Balor time period.\"},{\"name\":\"reactCustCount\",\"type\":\"long\",\"doc\":\"The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period\"},{\"name\":\"reactTxnCount\",\"type\":\"long\",\"doc\":\"The number of transactions made by REACTIVATED customers in the given Balor time period.\"},{\"name\":\"reactTxnAmt\",\"type\":\"double\",\"doc\":\"The total spend of transactions made by REACTIVATED customers in the given Balor time period.\"},{\"name\":\"reactDiscAmt\",\"type\":\"double\",\"doc\":\"The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.\"},{\"name\":\"reactItemQty\",\"type\":\"long\",\"doc\":\"The total number of items purchased by all REACTIVATED customers in the given Balor time period.\"},{\"name\":\"returnCustCount\",\"type\":\"long\",\"doc\":\"The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3\"},{\"name\":\"returnTxnCount\",\"type\":\"long\",\"doc\":\"The number of transactions made by RETURNING customers in the given Balor time period.\"},{\"name\":\"returnTxnAmt\",\"type\":\"double\",\"doc\":\"The total spend of transactions made by RETURNING customers in the given Balor time period.\"},{\"name\":\"returnDiscAmt\",\"type\":\"double\",\"doc\":\"The total discount amount of transactions made by RETURNING customers in the given Balor time period.\"},{\"name\":\"returnItemQty\",\"type\":\"long\",\"doc\":\"The total number of items purchased by all RETURNING customers in the given Balor time period.\"},{\"name\":\"lapsedCustCount\",\"type\":\"long\",\"doc\":\"The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period\"},{\"name\":\"lapsedTxnCount\",\"type\":\"long\",\"doc\":\"The number of transactions made by LAPSED customers in the given Balor time period.\"},{\"name\":\"lapsedTxnAmt\",\"type\":\"double\",\"doc\":\"The total spend of transactions made by LAPSED customers in the given Balor time period.\"},{\"name\":\"lapsedDiscAmt\",\"type\":\"double\",\"doc\":\"The total discount amount of transactions made by LAPSED customers in the given Balor time period.\"},{\"name\":\"lapsedItemQty\",\"type\":\"long\",\"doc\":\"The total number of items purchased by all LAPSED customers in the given Balor time period.\"},{\"name\":\"custBalor\",\"type\":\"double\",\"doc\":\"The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed\"},{\"name\":\"txnBalor\",\"type\":\"double\",\"doc\":\"The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed\"},{\"name\":\"spendBalor\",\"type\":\"double\",\"doc\":\"The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The Balor time period, calculated ascending */
  @Deprecated public int timePeriod;
  /** The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods */
  @Deprecated public long newCustCount;
  /** The number of transactions made by NEW customers in the given Balor time period. */
  @Deprecated public long newTxnCount;
  /** The total spend of transactions made by NEW customers in the given Balor time period. */
  @Deprecated public double newTxnAmt;
  /** The total discount amount of transactions made by NEW customers in the given Balor time period. */
  @Deprecated public double newDiscAmt;
  /** The total number of items purchased by all NEW customers in the given Balor time period. */
  @Deprecated public long newItemQty;
  /** The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period */
  @Deprecated public long reactCustCount;
  /** The number of transactions made by REACTIVATED customers in the given Balor time period. */
  @Deprecated public long reactTxnCount;
  /** The total spend of transactions made by REACTIVATED customers in the given Balor time period. */
  @Deprecated public double reactTxnAmt;
  /** The total discount amount of transactions made by REACTIVATED customers in the given Balor time period. */
  @Deprecated public double reactDiscAmt;
  /** The total number of items purchased by all REACTIVATED customers in the given Balor time period. */
  @Deprecated public long reactItemQty;
  /** The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3 */
  @Deprecated public long returnCustCount;
  /** The number of transactions made by RETURNING customers in the given Balor time period. */
  @Deprecated public long returnTxnCount;
  /** The total spend of transactions made by RETURNING customers in the given Balor time period. */
  @Deprecated public double returnTxnAmt;
  /** The total discount amount of transactions made by RETURNING customers in the given Balor time period. */
  @Deprecated public double returnDiscAmt;
  /** The total number of items purchased by all RETURNING customers in the given Balor time period. */
  @Deprecated public long returnItemQty;
  /** The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period */
  @Deprecated public long lapsedCustCount;
  /** The number of transactions made by LAPSED customers in the given Balor time period. */
  @Deprecated public long lapsedTxnCount;
  /** The total spend of transactions made by LAPSED customers in the given Balor time period. */
  @Deprecated public double lapsedTxnAmt;
  /** The total discount amount of transactions made by LAPSED customers in the given Balor time period. */
  @Deprecated public double lapsedDiscAmt;
  /** The total number of items purchased by all LAPSED customers in the given Balor time period. */
  @Deprecated public long lapsedItemQty;
  /** The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed */
  @Deprecated public double custBalor;
  /** The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed */
  @Deprecated public double txnBalor;
  /** The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed */
  @Deprecated public double spendBalor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TimePeriodData() {}

  /**
   * All-args constructor.
   * @param timePeriod The Balor time period, calculated ascending
   * @param newCustCount The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
   * @param newTxnCount The number of transactions made by NEW customers in the given Balor time period.
   * @param newTxnAmt The total spend of transactions made by NEW customers in the given Balor time period.
   * @param newDiscAmt The total discount amount of transactions made by NEW customers in the given Balor time period.
   * @param newItemQty The total number of items purchased by all NEW customers in the given Balor time period.
   * @param reactCustCount The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
   * @param reactTxnCount The number of transactions made by REACTIVATED customers in the given Balor time period.
   * @param reactTxnAmt The total spend of transactions made by REACTIVATED customers in the given Balor time period.
   * @param reactDiscAmt The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
   * @param reactItemQty The total number of items purchased by all REACTIVATED customers in the given Balor time period.
   * @param returnCustCount The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
   * @param returnTxnCount The number of transactions made by RETURNING customers in the given Balor time period.
   * @param returnTxnAmt The total spend of transactions made by RETURNING customers in the given Balor time period.
   * @param returnDiscAmt The total discount amount of transactions made by RETURNING customers in the given Balor time period.
   * @param returnItemQty The total number of items purchased by all RETURNING customers in the given Balor time period.
   * @param lapsedCustCount The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
   * @param lapsedTxnCount The number of transactions made by LAPSED customers in the given Balor time period.
   * @param lapsedTxnAmt The total spend of transactions made by LAPSED customers in the given Balor time period.
   * @param lapsedDiscAmt The total discount amount of transactions made by LAPSED customers in the given Balor time period.
   * @param lapsedItemQty The total number of items purchased by all LAPSED customers in the given Balor time period.
   * @param custBalor The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
   * @param txnBalor The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
   * @param spendBalor The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
   */
  public TimePeriodData(java.lang.Integer timePeriod, java.lang.Long newCustCount, java.lang.Long newTxnCount, java.lang.Double newTxnAmt, java.lang.Double newDiscAmt, java.lang.Long newItemQty, java.lang.Long reactCustCount, java.lang.Long reactTxnCount, java.lang.Double reactTxnAmt, java.lang.Double reactDiscAmt, java.lang.Long reactItemQty, java.lang.Long returnCustCount, java.lang.Long returnTxnCount, java.lang.Double returnTxnAmt, java.lang.Double returnDiscAmt, java.lang.Long returnItemQty, java.lang.Long lapsedCustCount, java.lang.Long lapsedTxnCount, java.lang.Double lapsedTxnAmt, java.lang.Double lapsedDiscAmt, java.lang.Long lapsedItemQty, java.lang.Double custBalor, java.lang.Double txnBalor, java.lang.Double spendBalor) {
    this.timePeriod = timePeriod;
    this.newCustCount = newCustCount;
    this.newTxnCount = newTxnCount;
    this.newTxnAmt = newTxnAmt;
    this.newDiscAmt = newDiscAmt;
    this.newItemQty = newItemQty;
    this.reactCustCount = reactCustCount;
    this.reactTxnCount = reactTxnCount;
    this.reactTxnAmt = reactTxnAmt;
    this.reactDiscAmt = reactDiscAmt;
    this.reactItemQty = reactItemQty;
    this.returnCustCount = returnCustCount;
    this.returnTxnCount = returnTxnCount;
    this.returnTxnAmt = returnTxnAmt;
    this.returnDiscAmt = returnDiscAmt;
    this.returnItemQty = returnItemQty;
    this.lapsedCustCount = lapsedCustCount;
    this.lapsedTxnCount = lapsedTxnCount;
    this.lapsedTxnAmt = lapsedTxnAmt;
    this.lapsedDiscAmt = lapsedDiscAmt;
    this.lapsedItemQty = lapsedItemQty;
    this.custBalor = custBalor;
    this.txnBalor = txnBalor;
    this.spendBalor = spendBalor;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timePeriod;
    case 1: return newCustCount;
    case 2: return newTxnCount;
    case 3: return newTxnAmt;
    case 4: return newDiscAmt;
    case 5: return newItemQty;
    case 6: return reactCustCount;
    case 7: return reactTxnCount;
    case 8: return reactTxnAmt;
    case 9: return reactDiscAmt;
    case 10: return reactItemQty;
    case 11: return returnCustCount;
    case 12: return returnTxnCount;
    case 13: return returnTxnAmt;
    case 14: return returnDiscAmt;
    case 15: return returnItemQty;
    case 16: return lapsedCustCount;
    case 17: return lapsedTxnCount;
    case 18: return lapsedTxnAmt;
    case 19: return lapsedDiscAmt;
    case 20: return lapsedItemQty;
    case 21: return custBalor;
    case 22: return txnBalor;
    case 23: return spendBalor;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timePeriod = (java.lang.Integer)value$; break;
    case 1: newCustCount = (java.lang.Long)value$; break;
    case 2: newTxnCount = (java.lang.Long)value$; break;
    case 3: newTxnAmt = (java.lang.Double)value$; break;
    case 4: newDiscAmt = (java.lang.Double)value$; break;
    case 5: newItemQty = (java.lang.Long)value$; break;
    case 6: reactCustCount = (java.lang.Long)value$; break;
    case 7: reactTxnCount = (java.lang.Long)value$; break;
    case 8: reactTxnAmt = (java.lang.Double)value$; break;
    case 9: reactDiscAmt = (java.lang.Double)value$; break;
    case 10: reactItemQty = (java.lang.Long)value$; break;
    case 11: returnCustCount = (java.lang.Long)value$; break;
    case 12: returnTxnCount = (java.lang.Long)value$; break;
    case 13: returnTxnAmt = (java.lang.Double)value$; break;
    case 14: returnDiscAmt = (java.lang.Double)value$; break;
    case 15: returnItemQty = (java.lang.Long)value$; break;
    case 16: lapsedCustCount = (java.lang.Long)value$; break;
    case 17: lapsedTxnCount = (java.lang.Long)value$; break;
    case 18: lapsedTxnAmt = (java.lang.Double)value$; break;
    case 19: lapsedDiscAmt = (java.lang.Double)value$; break;
    case 20: lapsedItemQty = (java.lang.Long)value$; break;
    case 21: custBalor = (java.lang.Double)value$; break;
    case 22: txnBalor = (java.lang.Double)value$; break;
    case 23: spendBalor = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timePeriod' field.
   * @return The Balor time period, calculated ascending
   */
  public java.lang.Integer getTimePeriod() {
    return timePeriod;
  }

  /**
   * Sets the value of the 'timePeriod' field.
   * The Balor time period, calculated ascending
   * @param value the value to set.
   */
  public void setTimePeriod(java.lang.Integer value) {
    this.timePeriod = value;
  }

  /**
   * Gets the value of the 'newCustCount' field.
   * @return The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
   */
  public java.lang.Long getNewCustCount() {
    return newCustCount;
  }

  /**
   * Sets the value of the 'newCustCount' field.
   * The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
   * @param value the value to set.
   */
  public void setNewCustCount(java.lang.Long value) {
    this.newCustCount = value;
  }

  /**
   * Gets the value of the 'newTxnCount' field.
   * @return The number of transactions made by NEW customers in the given Balor time period.
   */
  public java.lang.Long getNewTxnCount() {
    return newTxnCount;
  }

  /**
   * Sets the value of the 'newTxnCount' field.
   * The number of transactions made by NEW customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setNewTxnCount(java.lang.Long value) {
    this.newTxnCount = value;
  }

  /**
   * Gets the value of the 'newTxnAmt' field.
   * @return The total spend of transactions made by NEW customers in the given Balor time period.
   */
  public java.lang.Double getNewTxnAmt() {
    return newTxnAmt;
  }

  /**
   * Sets the value of the 'newTxnAmt' field.
   * The total spend of transactions made by NEW customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setNewTxnAmt(java.lang.Double value) {
    this.newTxnAmt = value;
  }

  /**
   * Gets the value of the 'newDiscAmt' field.
   * @return The total discount amount of transactions made by NEW customers in the given Balor time period.
   */
  public java.lang.Double getNewDiscAmt() {
    return newDiscAmt;
  }

  /**
   * Sets the value of the 'newDiscAmt' field.
   * The total discount amount of transactions made by NEW customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setNewDiscAmt(java.lang.Double value) {
    this.newDiscAmt = value;
  }

  /**
   * Gets the value of the 'newItemQty' field.
   * @return The total number of items purchased by all NEW customers in the given Balor time period.
   */
  public java.lang.Long getNewItemQty() {
    return newItemQty;
  }

  /**
   * Sets the value of the 'newItemQty' field.
   * The total number of items purchased by all NEW customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setNewItemQty(java.lang.Long value) {
    this.newItemQty = value;
  }

  /**
   * Gets the value of the 'reactCustCount' field.
   * @return The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
   */
  public java.lang.Long getReactCustCount() {
    return reactCustCount;
  }

  /**
   * Sets the value of the 'reactCustCount' field.
   * The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
   * @param value the value to set.
   */
  public void setReactCustCount(java.lang.Long value) {
    this.reactCustCount = value;
  }

  /**
   * Gets the value of the 'reactTxnCount' field.
   * @return The number of transactions made by REACTIVATED customers in the given Balor time period.
   */
  public java.lang.Long getReactTxnCount() {
    return reactTxnCount;
  }

  /**
   * Sets the value of the 'reactTxnCount' field.
   * The number of transactions made by REACTIVATED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReactTxnCount(java.lang.Long value) {
    this.reactTxnCount = value;
  }

  /**
   * Gets the value of the 'reactTxnAmt' field.
   * @return The total spend of transactions made by REACTIVATED customers in the given Balor time period.
   */
  public java.lang.Double getReactTxnAmt() {
    return reactTxnAmt;
  }

  /**
   * Sets the value of the 'reactTxnAmt' field.
   * The total spend of transactions made by REACTIVATED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReactTxnAmt(java.lang.Double value) {
    this.reactTxnAmt = value;
  }

  /**
   * Gets the value of the 'reactDiscAmt' field.
   * @return The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
   */
  public java.lang.Double getReactDiscAmt() {
    return reactDiscAmt;
  }

  /**
   * Sets the value of the 'reactDiscAmt' field.
   * The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReactDiscAmt(java.lang.Double value) {
    this.reactDiscAmt = value;
  }

  /**
   * Gets the value of the 'reactItemQty' field.
   * @return The total number of items purchased by all REACTIVATED customers in the given Balor time period.
   */
  public java.lang.Long getReactItemQty() {
    return reactItemQty;
  }

  /**
   * Sets the value of the 'reactItemQty' field.
   * The total number of items purchased by all REACTIVATED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReactItemQty(java.lang.Long value) {
    this.reactItemQty = value;
  }

  /**
   * Gets the value of the 'returnCustCount' field.
   * @return The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
   */
  public java.lang.Long getReturnCustCount() {
    return returnCustCount;
  }

  /**
   * Sets the value of the 'returnCustCount' field.
   * The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
   * @param value the value to set.
   */
  public void setReturnCustCount(java.lang.Long value) {
    this.returnCustCount = value;
  }

  /**
   * Gets the value of the 'returnTxnCount' field.
   * @return The number of transactions made by RETURNING customers in the given Balor time period.
   */
  public java.lang.Long getReturnTxnCount() {
    return returnTxnCount;
  }

  /**
   * Sets the value of the 'returnTxnCount' field.
   * The number of transactions made by RETURNING customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReturnTxnCount(java.lang.Long value) {
    this.returnTxnCount = value;
  }

  /**
   * Gets the value of the 'returnTxnAmt' field.
   * @return The total spend of transactions made by RETURNING customers in the given Balor time period.
   */
  public java.lang.Double getReturnTxnAmt() {
    return returnTxnAmt;
  }

  /**
   * Sets the value of the 'returnTxnAmt' field.
   * The total spend of transactions made by RETURNING customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReturnTxnAmt(java.lang.Double value) {
    this.returnTxnAmt = value;
  }

  /**
   * Gets the value of the 'returnDiscAmt' field.
   * @return The total discount amount of transactions made by RETURNING customers in the given Balor time period.
   */
  public java.lang.Double getReturnDiscAmt() {
    return returnDiscAmt;
  }

  /**
   * Sets the value of the 'returnDiscAmt' field.
   * The total discount amount of transactions made by RETURNING customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReturnDiscAmt(java.lang.Double value) {
    this.returnDiscAmt = value;
  }

  /**
   * Gets the value of the 'returnItemQty' field.
   * @return The total number of items purchased by all RETURNING customers in the given Balor time period.
   */
  public java.lang.Long getReturnItemQty() {
    return returnItemQty;
  }

  /**
   * Sets the value of the 'returnItemQty' field.
   * The total number of items purchased by all RETURNING customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReturnItemQty(java.lang.Long value) {
    this.returnItemQty = value;
  }

  /**
   * Gets the value of the 'lapsedCustCount' field.
   * @return The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
   */
  public java.lang.Long getLapsedCustCount() {
    return lapsedCustCount;
  }

  /**
   * Sets the value of the 'lapsedCustCount' field.
   * The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
   * @param value the value to set.
   */
  public void setLapsedCustCount(java.lang.Long value) {
    this.lapsedCustCount = value;
  }

  /**
   * Gets the value of the 'lapsedTxnCount' field.
   * @return The number of transactions made by LAPSED customers in the given Balor time period.
   */
  public java.lang.Long getLapsedTxnCount() {
    return lapsedTxnCount;
  }

  /**
   * Sets the value of the 'lapsedTxnCount' field.
   * The number of transactions made by LAPSED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setLapsedTxnCount(java.lang.Long value) {
    this.lapsedTxnCount = value;
  }

  /**
   * Gets the value of the 'lapsedTxnAmt' field.
   * @return The total spend of transactions made by LAPSED customers in the given Balor time period.
   */
  public java.lang.Double getLapsedTxnAmt() {
    return lapsedTxnAmt;
  }

  /**
   * Sets the value of the 'lapsedTxnAmt' field.
   * The total spend of transactions made by LAPSED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setLapsedTxnAmt(java.lang.Double value) {
    this.lapsedTxnAmt = value;
  }

  /**
   * Gets the value of the 'lapsedDiscAmt' field.
   * @return The total discount amount of transactions made by LAPSED customers in the given Balor time period.
   */
  public java.lang.Double getLapsedDiscAmt() {
    return lapsedDiscAmt;
  }

  /**
   * Sets the value of the 'lapsedDiscAmt' field.
   * The total discount amount of transactions made by LAPSED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setLapsedDiscAmt(java.lang.Double value) {
    this.lapsedDiscAmt = value;
  }

  /**
   * Gets the value of the 'lapsedItemQty' field.
   * @return The total number of items purchased by all LAPSED customers in the given Balor time period.
   */
  public java.lang.Long getLapsedItemQty() {
    return lapsedItemQty;
  }

  /**
   * Sets the value of the 'lapsedItemQty' field.
   * The total number of items purchased by all LAPSED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setLapsedItemQty(java.lang.Long value) {
    this.lapsedItemQty = value;
  }

  /**
   * Gets the value of the 'custBalor' field.
   * @return The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
   */
  public java.lang.Double getCustBalor() {
    return custBalor;
  }

  /**
   * Sets the value of the 'custBalor' field.
   * The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
   * @param value the value to set.
   */
  public void setCustBalor(java.lang.Double value) {
    this.custBalor = value;
  }

  /**
   * Gets the value of the 'txnBalor' field.
   * @return The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
   */
  public java.lang.Double getTxnBalor() {
    return txnBalor;
  }

  /**
   * Sets the value of the 'txnBalor' field.
   * The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
   * @param value the value to set.
   */
  public void setTxnBalor(java.lang.Double value) {
    this.txnBalor = value;
  }

  /**
   * Gets the value of the 'spendBalor' field.
   * @return The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
   */
  public java.lang.Double getSpendBalor() {
    return spendBalor;
  }

  /**
   * Sets the value of the 'spendBalor' field.
   * The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
   * @param value the value to set.
   */
  public void setSpendBalor(java.lang.Double value) {
    this.spendBalor = value;
  }

  /**
   * Creates a new TimePeriodData RecordBuilder.
   * @return A new TimePeriodData RecordBuilder
   */
  public static com.brierley.avro.schemas.TimePeriodData.Builder newBuilder() {
    return new com.brierley.avro.schemas.TimePeriodData.Builder();
  }

  /**
   * Creates a new TimePeriodData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TimePeriodData RecordBuilder
   */
  public static com.brierley.avro.schemas.TimePeriodData.Builder newBuilder(com.brierley.avro.schemas.TimePeriodData.Builder other) {
    return new com.brierley.avro.schemas.TimePeriodData.Builder(other);
  }

  /**
   * Creates a new TimePeriodData RecordBuilder by copying an existing TimePeriodData instance.
   * @param other The existing instance to copy.
   * @return A new TimePeriodData RecordBuilder
   */
  public static com.brierley.avro.schemas.TimePeriodData.Builder newBuilder(com.brierley.avro.schemas.TimePeriodData other) {
    return new com.brierley.avro.schemas.TimePeriodData.Builder(other);
  }

  /**
   * RecordBuilder for TimePeriodData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TimePeriodData>
    implements org.apache.avro.data.RecordBuilder<TimePeriodData> {

    /** The Balor time period, calculated ascending */
    private int timePeriod;
    /** The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods */
    private long newCustCount;
    /** The number of transactions made by NEW customers in the given Balor time period. */
    private long newTxnCount;
    /** The total spend of transactions made by NEW customers in the given Balor time period. */
    private double newTxnAmt;
    /** The total discount amount of transactions made by NEW customers in the given Balor time period. */
    private double newDiscAmt;
    /** The total number of items purchased by all NEW customers in the given Balor time period. */
    private long newItemQty;
    /** The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period */
    private long reactCustCount;
    /** The number of transactions made by REACTIVATED customers in the given Balor time period. */
    private long reactTxnCount;
    /** The total spend of transactions made by REACTIVATED customers in the given Balor time period. */
    private double reactTxnAmt;
    /** The total discount amount of transactions made by REACTIVATED customers in the given Balor time period. */
    private double reactDiscAmt;
    /** The total number of items purchased by all REACTIVATED customers in the given Balor time period. */
    private long reactItemQty;
    /** The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3 */
    private long returnCustCount;
    /** The number of transactions made by RETURNING customers in the given Balor time period. */
    private long returnTxnCount;
    /** The total spend of transactions made by RETURNING customers in the given Balor time period. */
    private double returnTxnAmt;
    /** The total discount amount of transactions made by RETURNING customers in the given Balor time period. */
    private double returnDiscAmt;
    /** The total number of items purchased by all RETURNING customers in the given Balor time period. */
    private long returnItemQty;
    /** The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period */
    private long lapsedCustCount;
    /** The number of transactions made by LAPSED customers in the given Balor time period. */
    private long lapsedTxnCount;
    /** The total spend of transactions made by LAPSED customers in the given Balor time period. */
    private double lapsedTxnAmt;
    /** The total discount amount of transactions made by LAPSED customers in the given Balor time period. */
    private double lapsedDiscAmt;
    /** The total number of items purchased by all LAPSED customers in the given Balor time period. */
    private long lapsedItemQty;
    /** The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed */
    private double custBalor;
    /** The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed */
    private double txnBalor;
    /** The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed */
    private double spendBalor;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.TimePeriodData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.newCustCount)) {
        this.newCustCount = data().deepCopy(fields()[1].schema(), other.newCustCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.newTxnCount)) {
        this.newTxnCount = data().deepCopy(fields()[2].schema(), other.newTxnCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.newTxnAmt)) {
        this.newTxnAmt = data().deepCopy(fields()[3].schema(), other.newTxnAmt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.newDiscAmt)) {
        this.newDiscAmt = data().deepCopy(fields()[4].schema(), other.newDiscAmt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.newItemQty)) {
        this.newItemQty = data().deepCopy(fields()[5].schema(), other.newItemQty);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.reactCustCount)) {
        this.reactCustCount = data().deepCopy(fields()[6].schema(), other.reactCustCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.reactTxnCount)) {
        this.reactTxnCount = data().deepCopy(fields()[7].schema(), other.reactTxnCount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.reactTxnAmt)) {
        this.reactTxnAmt = data().deepCopy(fields()[8].schema(), other.reactTxnAmt);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.reactDiscAmt)) {
        this.reactDiscAmt = data().deepCopy(fields()[9].schema(), other.reactDiscAmt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.reactItemQty)) {
        this.reactItemQty = data().deepCopy(fields()[10].schema(), other.reactItemQty);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.returnCustCount)) {
        this.returnCustCount = data().deepCopy(fields()[11].schema(), other.returnCustCount);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.returnTxnCount)) {
        this.returnTxnCount = data().deepCopy(fields()[12].schema(), other.returnTxnCount);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.returnTxnAmt)) {
        this.returnTxnAmt = data().deepCopy(fields()[13].schema(), other.returnTxnAmt);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.returnDiscAmt)) {
        this.returnDiscAmt = data().deepCopy(fields()[14].schema(), other.returnDiscAmt);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.returnItemQty)) {
        this.returnItemQty = data().deepCopy(fields()[15].schema(), other.returnItemQty);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.lapsedCustCount)) {
        this.lapsedCustCount = data().deepCopy(fields()[16].schema(), other.lapsedCustCount);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.lapsedTxnCount)) {
        this.lapsedTxnCount = data().deepCopy(fields()[17].schema(), other.lapsedTxnCount);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.lapsedTxnAmt)) {
        this.lapsedTxnAmt = data().deepCopy(fields()[18].schema(), other.lapsedTxnAmt);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.lapsedDiscAmt)) {
        this.lapsedDiscAmt = data().deepCopy(fields()[19].schema(), other.lapsedDiscAmt);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.lapsedItemQty)) {
        this.lapsedItemQty = data().deepCopy(fields()[20].schema(), other.lapsedItemQty);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.custBalor)) {
        this.custBalor = data().deepCopy(fields()[21].schema(), other.custBalor);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.txnBalor)) {
        this.txnBalor = data().deepCopy(fields()[22].schema(), other.txnBalor);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.spendBalor)) {
        this.spendBalor = data().deepCopy(fields()[23].schema(), other.spendBalor);
        fieldSetFlags()[23] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TimePeriodData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.TimePeriodData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.newCustCount)) {
        this.newCustCount = data().deepCopy(fields()[1].schema(), other.newCustCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.newTxnCount)) {
        this.newTxnCount = data().deepCopy(fields()[2].schema(), other.newTxnCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.newTxnAmt)) {
        this.newTxnAmt = data().deepCopy(fields()[3].schema(), other.newTxnAmt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.newDiscAmt)) {
        this.newDiscAmt = data().deepCopy(fields()[4].schema(), other.newDiscAmt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.newItemQty)) {
        this.newItemQty = data().deepCopy(fields()[5].schema(), other.newItemQty);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.reactCustCount)) {
        this.reactCustCount = data().deepCopy(fields()[6].schema(), other.reactCustCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.reactTxnCount)) {
        this.reactTxnCount = data().deepCopy(fields()[7].schema(), other.reactTxnCount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.reactTxnAmt)) {
        this.reactTxnAmt = data().deepCopy(fields()[8].schema(), other.reactTxnAmt);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.reactDiscAmt)) {
        this.reactDiscAmt = data().deepCopy(fields()[9].schema(), other.reactDiscAmt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.reactItemQty)) {
        this.reactItemQty = data().deepCopy(fields()[10].schema(), other.reactItemQty);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.returnCustCount)) {
        this.returnCustCount = data().deepCopy(fields()[11].schema(), other.returnCustCount);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.returnTxnCount)) {
        this.returnTxnCount = data().deepCopy(fields()[12].schema(), other.returnTxnCount);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.returnTxnAmt)) {
        this.returnTxnAmt = data().deepCopy(fields()[13].schema(), other.returnTxnAmt);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.returnDiscAmt)) {
        this.returnDiscAmt = data().deepCopy(fields()[14].schema(), other.returnDiscAmt);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.returnItemQty)) {
        this.returnItemQty = data().deepCopy(fields()[15].schema(), other.returnItemQty);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.lapsedCustCount)) {
        this.lapsedCustCount = data().deepCopy(fields()[16].schema(), other.lapsedCustCount);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.lapsedTxnCount)) {
        this.lapsedTxnCount = data().deepCopy(fields()[17].schema(), other.lapsedTxnCount);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.lapsedTxnAmt)) {
        this.lapsedTxnAmt = data().deepCopy(fields()[18].schema(), other.lapsedTxnAmt);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.lapsedDiscAmt)) {
        this.lapsedDiscAmt = data().deepCopy(fields()[19].schema(), other.lapsedDiscAmt);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.lapsedItemQty)) {
        this.lapsedItemQty = data().deepCopy(fields()[20].schema(), other.lapsedItemQty);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.custBalor)) {
        this.custBalor = data().deepCopy(fields()[21].schema(), other.custBalor);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.txnBalor)) {
        this.txnBalor = data().deepCopy(fields()[22].schema(), other.txnBalor);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.spendBalor)) {
        this.spendBalor = data().deepCopy(fields()[23].schema(), other.spendBalor);
        fieldSetFlags()[23] = true;
      }
    }

    /**
      * Gets the value of the 'timePeriod' field.
      * The Balor time period, calculated ascending
      * @return The value.
      */
    public java.lang.Integer getTimePeriod() {
      return timePeriod;
    }

    /**
      * Sets the value of the 'timePeriod' field.
      * The Balor time period, calculated ascending
      * @param value The value of 'timePeriod'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setTimePeriod(int value) {
      validate(fields()[0], value);
      this.timePeriod = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timePeriod' field has been set.
      * The Balor time period, calculated ascending
      * @return True if the 'timePeriod' field has been set, false otherwise.
      */
    public boolean hasTimePeriod() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timePeriod' field.
      * The Balor time period, calculated ascending
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearTimePeriod() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'newCustCount' field.
      * The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
      * @return The value.
      */
    public java.lang.Long getNewCustCount() {
      return newCustCount;
    }

    /**
      * Sets the value of the 'newCustCount' field.
      * The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
      * @param value The value of 'newCustCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewCustCount(long value) {
      validate(fields()[1], value);
      this.newCustCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'newCustCount' field has been set.
      * The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
      * @return True if the 'newCustCount' field has been set, false otherwise.
      */
    public boolean hasNewCustCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'newCustCount' field.
      * The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewCustCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'newTxnCount' field.
      * The number of transactions made by NEW customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getNewTxnCount() {
      return newTxnCount;
    }

    /**
      * Sets the value of the 'newTxnCount' field.
      * The number of transactions made by NEW customers in the given Balor time period.
      * @param value The value of 'newTxnCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewTxnCount(long value) {
      validate(fields()[2], value);
      this.newTxnCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'newTxnCount' field has been set.
      * The number of transactions made by NEW customers in the given Balor time period.
      * @return True if the 'newTxnCount' field has been set, false otherwise.
      */
    public boolean hasNewTxnCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'newTxnCount' field.
      * The number of transactions made by NEW customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewTxnCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'newTxnAmt' field.
      * The total spend of transactions made by NEW customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getNewTxnAmt() {
      return newTxnAmt;
    }

    /**
      * Sets the value of the 'newTxnAmt' field.
      * The total spend of transactions made by NEW customers in the given Balor time period.
      * @param value The value of 'newTxnAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewTxnAmt(double value) {
      validate(fields()[3], value);
      this.newTxnAmt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'newTxnAmt' field has been set.
      * The total spend of transactions made by NEW customers in the given Balor time period.
      * @return True if the 'newTxnAmt' field has been set, false otherwise.
      */
    public boolean hasNewTxnAmt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'newTxnAmt' field.
      * The total spend of transactions made by NEW customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewTxnAmt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'newDiscAmt' field.
      * The total discount amount of transactions made by NEW customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getNewDiscAmt() {
      return newDiscAmt;
    }

    /**
      * Sets the value of the 'newDiscAmt' field.
      * The total discount amount of transactions made by NEW customers in the given Balor time period.
      * @param value The value of 'newDiscAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewDiscAmt(double value) {
      validate(fields()[4], value);
      this.newDiscAmt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'newDiscAmt' field has been set.
      * The total discount amount of transactions made by NEW customers in the given Balor time period.
      * @return True if the 'newDiscAmt' field has been set, false otherwise.
      */
    public boolean hasNewDiscAmt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'newDiscAmt' field.
      * The total discount amount of transactions made by NEW customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewDiscAmt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'newItemQty' field.
      * The total number of items purchased by all NEW customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getNewItemQty() {
      return newItemQty;
    }

    /**
      * Sets the value of the 'newItemQty' field.
      * The total number of items purchased by all NEW customers in the given Balor time period.
      * @param value The value of 'newItemQty'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewItemQty(long value) {
      validate(fields()[5], value);
      this.newItemQty = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'newItemQty' field has been set.
      * The total number of items purchased by all NEW customers in the given Balor time period.
      * @return True if the 'newItemQty' field has been set, false otherwise.
      */
    public boolean hasNewItemQty() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'newItemQty' field.
      * The total number of items purchased by all NEW customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewItemQty() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactCustCount' field.
      * The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
      * @return The value.
      */
    public java.lang.Long getReactCustCount() {
      return reactCustCount;
    }

    /**
      * Sets the value of the 'reactCustCount' field.
      * The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
      * @param value The value of 'reactCustCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactCustCount(long value) {
      validate(fields()[6], value);
      this.reactCustCount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'reactCustCount' field has been set.
      * The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
      * @return True if the 'reactCustCount' field has been set, false otherwise.
      */
    public boolean hasReactCustCount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'reactCustCount' field.
      * The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactCustCount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactTxnCount' field.
      * The number of transactions made by REACTIVATED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getReactTxnCount() {
      return reactTxnCount;
    }

    /**
      * Sets the value of the 'reactTxnCount' field.
      * The number of transactions made by REACTIVATED customers in the given Balor time period.
      * @param value The value of 'reactTxnCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactTxnCount(long value) {
      validate(fields()[7], value);
      this.reactTxnCount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'reactTxnCount' field has been set.
      * The number of transactions made by REACTIVATED customers in the given Balor time period.
      * @return True if the 'reactTxnCount' field has been set, false otherwise.
      */
    public boolean hasReactTxnCount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'reactTxnCount' field.
      * The number of transactions made by REACTIVATED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactTxnCount() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactTxnAmt' field.
      * The total spend of transactions made by REACTIVATED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getReactTxnAmt() {
      return reactTxnAmt;
    }

    /**
      * Sets the value of the 'reactTxnAmt' field.
      * The total spend of transactions made by REACTIVATED customers in the given Balor time period.
      * @param value The value of 'reactTxnAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactTxnAmt(double value) {
      validate(fields()[8], value);
      this.reactTxnAmt = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'reactTxnAmt' field has been set.
      * The total spend of transactions made by REACTIVATED customers in the given Balor time period.
      * @return True if the 'reactTxnAmt' field has been set, false otherwise.
      */
    public boolean hasReactTxnAmt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'reactTxnAmt' field.
      * The total spend of transactions made by REACTIVATED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactTxnAmt() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactDiscAmt' field.
      * The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getReactDiscAmt() {
      return reactDiscAmt;
    }

    /**
      * Sets the value of the 'reactDiscAmt' field.
      * The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
      * @param value The value of 'reactDiscAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactDiscAmt(double value) {
      validate(fields()[9], value);
      this.reactDiscAmt = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'reactDiscAmt' field has been set.
      * The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
      * @return True if the 'reactDiscAmt' field has been set, false otherwise.
      */
    public boolean hasReactDiscAmt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'reactDiscAmt' field.
      * The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactDiscAmt() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactItemQty' field.
      * The total number of items purchased by all REACTIVATED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getReactItemQty() {
      return reactItemQty;
    }

    /**
      * Sets the value of the 'reactItemQty' field.
      * The total number of items purchased by all REACTIVATED customers in the given Balor time period.
      * @param value The value of 'reactItemQty'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactItemQty(long value) {
      validate(fields()[10], value);
      this.reactItemQty = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'reactItemQty' field has been set.
      * The total number of items purchased by all REACTIVATED customers in the given Balor time period.
      * @return True if the 'reactItemQty' field has been set, false otherwise.
      */
    public boolean hasReactItemQty() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'reactItemQty' field.
      * The total number of items purchased by all REACTIVATED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactItemQty() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnCustCount' field.
      * The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
      * @return The value.
      */
    public java.lang.Long getReturnCustCount() {
      return returnCustCount;
    }

    /**
      * Sets the value of the 'returnCustCount' field.
      * The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
      * @param value The value of 'returnCustCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnCustCount(long value) {
      validate(fields()[11], value);
      this.returnCustCount = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'returnCustCount' field has been set.
      * The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
      * @return True if the 'returnCustCount' field has been set, false otherwise.
      */
    public boolean hasReturnCustCount() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'returnCustCount' field.
      * The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnCustCount() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnTxnCount' field.
      * The number of transactions made by RETURNING customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getReturnTxnCount() {
      return returnTxnCount;
    }

    /**
      * Sets the value of the 'returnTxnCount' field.
      * The number of transactions made by RETURNING customers in the given Balor time period.
      * @param value The value of 'returnTxnCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnTxnCount(long value) {
      validate(fields()[12], value);
      this.returnTxnCount = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'returnTxnCount' field has been set.
      * The number of transactions made by RETURNING customers in the given Balor time period.
      * @return True if the 'returnTxnCount' field has been set, false otherwise.
      */
    public boolean hasReturnTxnCount() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'returnTxnCount' field.
      * The number of transactions made by RETURNING customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnTxnCount() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnTxnAmt' field.
      * The total spend of transactions made by RETURNING customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getReturnTxnAmt() {
      return returnTxnAmt;
    }

    /**
      * Sets the value of the 'returnTxnAmt' field.
      * The total spend of transactions made by RETURNING customers in the given Balor time period.
      * @param value The value of 'returnTxnAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnTxnAmt(double value) {
      validate(fields()[13], value);
      this.returnTxnAmt = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'returnTxnAmt' field has been set.
      * The total spend of transactions made by RETURNING customers in the given Balor time period.
      * @return True if the 'returnTxnAmt' field has been set, false otherwise.
      */
    public boolean hasReturnTxnAmt() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'returnTxnAmt' field.
      * The total spend of transactions made by RETURNING customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnTxnAmt() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnDiscAmt' field.
      * The total discount amount of transactions made by RETURNING customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getReturnDiscAmt() {
      return returnDiscAmt;
    }

    /**
      * Sets the value of the 'returnDiscAmt' field.
      * The total discount amount of transactions made by RETURNING customers in the given Balor time period.
      * @param value The value of 'returnDiscAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnDiscAmt(double value) {
      validate(fields()[14], value);
      this.returnDiscAmt = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'returnDiscAmt' field has been set.
      * The total discount amount of transactions made by RETURNING customers in the given Balor time period.
      * @return True if the 'returnDiscAmt' field has been set, false otherwise.
      */
    public boolean hasReturnDiscAmt() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'returnDiscAmt' field.
      * The total discount amount of transactions made by RETURNING customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnDiscAmt() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnItemQty' field.
      * The total number of items purchased by all RETURNING customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getReturnItemQty() {
      return returnItemQty;
    }

    /**
      * Sets the value of the 'returnItemQty' field.
      * The total number of items purchased by all RETURNING customers in the given Balor time period.
      * @param value The value of 'returnItemQty'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnItemQty(long value) {
      validate(fields()[15], value);
      this.returnItemQty = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'returnItemQty' field has been set.
      * The total number of items purchased by all RETURNING customers in the given Balor time period.
      * @return True if the 'returnItemQty' field has been set, false otherwise.
      */
    public boolean hasReturnItemQty() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'returnItemQty' field.
      * The total number of items purchased by all RETURNING customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnItemQty() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedCustCount' field.
      * The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
      * @return The value.
      */
    public java.lang.Long getLapsedCustCount() {
      return lapsedCustCount;
    }

    /**
      * Sets the value of the 'lapsedCustCount' field.
      * The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
      * @param value The value of 'lapsedCustCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedCustCount(long value) {
      validate(fields()[16], value);
      this.lapsedCustCount = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedCustCount' field has been set.
      * The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
      * @return True if the 'lapsedCustCount' field has been set, false otherwise.
      */
    public boolean hasLapsedCustCount() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'lapsedCustCount' field.
      * The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedCustCount() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedTxnCount' field.
      * The number of transactions made by LAPSED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getLapsedTxnCount() {
      return lapsedTxnCount;
    }

    /**
      * Sets the value of the 'lapsedTxnCount' field.
      * The number of transactions made by LAPSED customers in the given Balor time period.
      * @param value The value of 'lapsedTxnCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedTxnCount(long value) {
      validate(fields()[17], value);
      this.lapsedTxnCount = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedTxnCount' field has been set.
      * The number of transactions made by LAPSED customers in the given Balor time period.
      * @return True if the 'lapsedTxnCount' field has been set, false otherwise.
      */
    public boolean hasLapsedTxnCount() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'lapsedTxnCount' field.
      * The number of transactions made by LAPSED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedTxnCount() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedTxnAmt' field.
      * The total spend of transactions made by LAPSED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getLapsedTxnAmt() {
      return lapsedTxnAmt;
    }

    /**
      * Sets the value of the 'lapsedTxnAmt' field.
      * The total spend of transactions made by LAPSED customers in the given Balor time period.
      * @param value The value of 'lapsedTxnAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedTxnAmt(double value) {
      validate(fields()[18], value);
      this.lapsedTxnAmt = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedTxnAmt' field has been set.
      * The total spend of transactions made by LAPSED customers in the given Balor time period.
      * @return True if the 'lapsedTxnAmt' field has been set, false otherwise.
      */
    public boolean hasLapsedTxnAmt() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'lapsedTxnAmt' field.
      * The total spend of transactions made by LAPSED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedTxnAmt() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedDiscAmt' field.
      * The total discount amount of transactions made by LAPSED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getLapsedDiscAmt() {
      return lapsedDiscAmt;
    }

    /**
      * Sets the value of the 'lapsedDiscAmt' field.
      * The total discount amount of transactions made by LAPSED customers in the given Balor time period.
      * @param value The value of 'lapsedDiscAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedDiscAmt(double value) {
      validate(fields()[19], value);
      this.lapsedDiscAmt = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedDiscAmt' field has been set.
      * The total discount amount of transactions made by LAPSED customers in the given Balor time period.
      * @return True if the 'lapsedDiscAmt' field has been set, false otherwise.
      */
    public boolean hasLapsedDiscAmt() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'lapsedDiscAmt' field.
      * The total discount amount of transactions made by LAPSED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedDiscAmt() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedItemQty' field.
      * The total number of items purchased by all LAPSED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getLapsedItemQty() {
      return lapsedItemQty;
    }

    /**
      * Sets the value of the 'lapsedItemQty' field.
      * The total number of items purchased by all LAPSED customers in the given Balor time period.
      * @param value The value of 'lapsedItemQty'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedItemQty(long value) {
      validate(fields()[20], value);
      this.lapsedItemQty = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedItemQty' field has been set.
      * The total number of items purchased by all LAPSED customers in the given Balor time period.
      * @return True if the 'lapsedItemQty' field has been set, false otherwise.
      */
    public boolean hasLapsedItemQty() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'lapsedItemQty' field.
      * The total number of items purchased by all LAPSED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedItemQty() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'custBalor' field.
      * The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
      * @return The value.
      */
    public java.lang.Double getCustBalor() {
      return custBalor;
    }

    /**
      * Sets the value of the 'custBalor' field.
      * The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
      * @param value The value of 'custBalor'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setCustBalor(double value) {
      validate(fields()[21], value);
      this.custBalor = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'custBalor' field has been set.
      * The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
      * @return True if the 'custBalor' field has been set, false otherwise.
      */
    public boolean hasCustBalor() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'custBalor' field.
      * The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearCustBalor() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'txnBalor' field.
      * The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return The value.
      */
    public java.lang.Double getTxnBalor() {
      return txnBalor;
    }

    /**
      * Sets the value of the 'txnBalor' field.
      * The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
      * @param value The value of 'txnBalor'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setTxnBalor(double value) {
      validate(fields()[22], value);
      this.txnBalor = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'txnBalor' field has been set.
      * The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return True if the 'txnBalor' field has been set, false otherwise.
      */
    public boolean hasTxnBalor() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'txnBalor' field.
      * The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearTxnBalor() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'spendBalor' field.
      * The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return The value.
      */
    public java.lang.Double getSpendBalor() {
      return spendBalor;
    }

    /**
      * Sets the value of the 'spendBalor' field.
      * The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
      * @param value The value of 'spendBalor'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setSpendBalor(double value) {
      validate(fields()[23], value);
      this.spendBalor = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'spendBalor' field has been set.
      * The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return True if the 'spendBalor' field has been set, false otherwise.
      */
    public boolean hasSpendBalor() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'spendBalor' field.
      * The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearSpendBalor() {
      fieldSetFlags()[23] = false;
      return this;
    }

    @Override
    public TimePeriodData build() {
      try {
        TimePeriodData record = new TimePeriodData();
        record.timePeriod = fieldSetFlags()[0] ? this.timePeriod : (java.lang.Integer) defaultValue(fields()[0]);
        record.newCustCount = fieldSetFlags()[1] ? this.newCustCount : (java.lang.Long) defaultValue(fields()[1]);
        record.newTxnCount = fieldSetFlags()[2] ? this.newTxnCount : (java.lang.Long) defaultValue(fields()[2]);
        record.newTxnAmt = fieldSetFlags()[3] ? this.newTxnAmt : (java.lang.Double) defaultValue(fields()[3]);
        record.newDiscAmt = fieldSetFlags()[4] ? this.newDiscAmt : (java.lang.Double) defaultValue(fields()[4]);
        record.newItemQty = fieldSetFlags()[5] ? this.newItemQty : (java.lang.Long) defaultValue(fields()[5]);
        record.reactCustCount = fieldSetFlags()[6] ? this.reactCustCount : (java.lang.Long) defaultValue(fields()[6]);
        record.reactTxnCount = fieldSetFlags()[7] ? this.reactTxnCount : (java.lang.Long) defaultValue(fields()[7]);
        record.reactTxnAmt = fieldSetFlags()[8] ? this.reactTxnAmt : (java.lang.Double) defaultValue(fields()[8]);
        record.reactDiscAmt = fieldSetFlags()[9] ? this.reactDiscAmt : (java.lang.Double) defaultValue(fields()[9]);
        record.reactItemQty = fieldSetFlags()[10] ? this.reactItemQty : (java.lang.Long) defaultValue(fields()[10]);
        record.returnCustCount = fieldSetFlags()[11] ? this.returnCustCount : (java.lang.Long) defaultValue(fields()[11]);
        record.returnTxnCount = fieldSetFlags()[12] ? this.returnTxnCount : (java.lang.Long) defaultValue(fields()[12]);
        record.returnTxnAmt = fieldSetFlags()[13] ? this.returnTxnAmt : (java.lang.Double) defaultValue(fields()[13]);
        record.returnDiscAmt = fieldSetFlags()[14] ? this.returnDiscAmt : (java.lang.Double) defaultValue(fields()[14]);
        record.returnItemQty = fieldSetFlags()[15] ? this.returnItemQty : (java.lang.Long) defaultValue(fields()[15]);
        record.lapsedCustCount = fieldSetFlags()[16] ? this.lapsedCustCount : (java.lang.Long) defaultValue(fields()[16]);
        record.lapsedTxnCount = fieldSetFlags()[17] ? this.lapsedTxnCount : (java.lang.Long) defaultValue(fields()[17]);
        record.lapsedTxnAmt = fieldSetFlags()[18] ? this.lapsedTxnAmt : (java.lang.Double) defaultValue(fields()[18]);
        record.lapsedDiscAmt = fieldSetFlags()[19] ? this.lapsedDiscAmt : (java.lang.Double) defaultValue(fields()[19]);
        record.lapsedItemQty = fieldSetFlags()[20] ? this.lapsedItemQty : (java.lang.Long) defaultValue(fields()[20]);
        record.custBalor = fieldSetFlags()[21] ? this.custBalor : (java.lang.Double) defaultValue(fields()[21]);
        record.txnBalor = fieldSetFlags()[22] ? this.txnBalor : (java.lang.Double) defaultValue(fields()[22]);
        record.spendBalor = fieldSetFlags()[23] ? this.spendBalor : (java.lang.Double) defaultValue(fields()[23]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
