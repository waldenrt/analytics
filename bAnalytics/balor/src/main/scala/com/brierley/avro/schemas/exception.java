/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class exception extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2541624073706048636L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"exception\",\"namespace\":\"com.brierley.avro.schemas\",\"fields\":[{\"name\":\"className\",\"type\":\"string\",\"doc\":\"The class that is throwing the error\"},{\"name\":\"methodName\",\"type\":\"string\",\"doc\":\"The method that is throwing the error\"},{\"name\":\"exceptionMsg\",\"type\":\"string\",\"doc\":\"The main message of the exception, can be user defined, or the title of the exception\"},{\"name\":\"stackTrace\",\"type\":\"string\",\"doc\":\"The StackTrace for system thrown exceptions, optional\"},{\"name\":\"exceptionType\",\"type\":\"string\",\"doc\":\"What kind of exception is it, validation, system, user, etc.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The class that is throwing the error */
  @Deprecated public java.lang.CharSequence className;
  /** The method that is throwing the error */
  @Deprecated public java.lang.CharSequence methodName;
  /** The main message of the exception, can be user defined, or the title of the exception */
  @Deprecated public java.lang.CharSequence exceptionMsg;
  /** The StackTrace for system thrown exceptions, optional */
  @Deprecated public java.lang.CharSequence stackTrace;
  /** What kind of exception is it, validation, system, user, etc. */
  @Deprecated public java.lang.CharSequence exceptionType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public exception() {}

  /**
   * All-args constructor.
   * @param className The class that is throwing the error
   * @param methodName The method that is throwing the error
   * @param exceptionMsg The main message of the exception, can be user defined, or the title of the exception
   * @param stackTrace The StackTrace for system thrown exceptions, optional
   * @param exceptionType What kind of exception is it, validation, system, user, etc.
   */
  public exception(java.lang.CharSequence className, java.lang.CharSequence methodName, java.lang.CharSequence exceptionMsg, java.lang.CharSequence stackTrace, java.lang.CharSequence exceptionType) {
    this.className = className;
    this.methodName = methodName;
    this.exceptionMsg = exceptionMsg;
    this.stackTrace = stackTrace;
    this.exceptionType = exceptionType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return className;
    case 1: return methodName;
    case 2: return exceptionMsg;
    case 3: return stackTrace;
    case 4: return exceptionType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: className = (java.lang.CharSequence)value$; break;
    case 1: methodName = (java.lang.CharSequence)value$; break;
    case 2: exceptionMsg = (java.lang.CharSequence)value$; break;
    case 3: stackTrace = (java.lang.CharSequence)value$; break;
    case 4: exceptionType = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'className' field.
   * @return The class that is throwing the error
   */
  public java.lang.CharSequence getClassName() {
    return className;
  }

  /**
   * Sets the value of the 'className' field.
   * The class that is throwing the error
   * @param value the value to set.
   */
  public void setClassName(java.lang.CharSequence value) {
    this.className = value;
  }

  /**
   * Gets the value of the 'methodName' field.
   * @return The method that is throwing the error
   */
  public java.lang.CharSequence getMethodName() {
    return methodName;
  }

  /**
   * Sets the value of the 'methodName' field.
   * The method that is throwing the error
   * @param value the value to set.
   */
  public void setMethodName(java.lang.CharSequence value) {
    this.methodName = value;
  }

  /**
   * Gets the value of the 'exceptionMsg' field.
   * @return The main message of the exception, can be user defined, or the title of the exception
   */
  public java.lang.CharSequence getExceptionMsg() {
    return exceptionMsg;
  }

  /**
   * Sets the value of the 'exceptionMsg' field.
   * The main message of the exception, can be user defined, or the title of the exception
   * @param value the value to set.
   */
  public void setExceptionMsg(java.lang.CharSequence value) {
    this.exceptionMsg = value;
  }

  /**
   * Gets the value of the 'stackTrace' field.
   * @return The StackTrace for system thrown exceptions, optional
   */
  public java.lang.CharSequence getStackTrace() {
    return stackTrace;
  }

  /**
   * Sets the value of the 'stackTrace' field.
   * The StackTrace for system thrown exceptions, optional
   * @param value the value to set.
   */
  public void setStackTrace(java.lang.CharSequence value) {
    this.stackTrace = value;
  }

  /**
   * Gets the value of the 'exceptionType' field.
   * @return What kind of exception is it, validation, system, user, etc.
   */
  public java.lang.CharSequence getExceptionType() {
    return exceptionType;
  }

  /**
   * Sets the value of the 'exceptionType' field.
   * What kind of exception is it, validation, system, user, etc.
   * @param value the value to set.
   */
  public void setExceptionType(java.lang.CharSequence value) {
    this.exceptionType = value;
  }

  /**
   * Creates a new exception RecordBuilder.
   * @return A new exception RecordBuilder
   */
  public static com.brierley.avro.schemas.exception.Builder newBuilder() {
    return new com.brierley.avro.schemas.exception.Builder();
  }

  /**
   * Creates a new exception RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new exception RecordBuilder
   */
  public static com.brierley.avro.schemas.exception.Builder newBuilder(com.brierley.avro.schemas.exception.Builder other) {
    return new com.brierley.avro.schemas.exception.Builder(other);
  }

  /**
   * Creates a new exception RecordBuilder by copying an existing exception instance.
   * @param other The existing instance to copy.
   * @return A new exception RecordBuilder
   */
  public static com.brierley.avro.schemas.exception.Builder newBuilder(com.brierley.avro.schemas.exception other) {
    return new com.brierley.avro.schemas.exception.Builder(other);
  }

  /**
   * RecordBuilder for exception instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<exception>
    implements org.apache.avro.data.RecordBuilder<exception> {

    /** The class that is throwing the error */
    private java.lang.CharSequence className;
    /** The method that is throwing the error */
    private java.lang.CharSequence methodName;
    /** The main message of the exception, can be user defined, or the title of the exception */
    private java.lang.CharSequence exceptionMsg;
    /** The StackTrace for system thrown exceptions, optional */
    private java.lang.CharSequence stackTrace;
    /** What kind of exception is it, validation, system, user, etc. */
    private java.lang.CharSequence exceptionType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.exception.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.className)) {
        this.className = data().deepCopy(fields()[0].schema(), other.className);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.methodName)) {
        this.methodName = data().deepCopy(fields()[1].schema(), other.methodName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.exceptionMsg)) {
        this.exceptionMsg = data().deepCopy(fields()[2].schema(), other.exceptionMsg);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stackTrace)) {
        this.stackTrace = data().deepCopy(fields()[3].schema(), other.stackTrace);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.exceptionType)) {
        this.exceptionType = data().deepCopy(fields()[4].schema(), other.exceptionType);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing exception instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.exception other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.className)) {
        this.className = data().deepCopy(fields()[0].schema(), other.className);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.methodName)) {
        this.methodName = data().deepCopy(fields()[1].schema(), other.methodName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.exceptionMsg)) {
        this.exceptionMsg = data().deepCopy(fields()[2].schema(), other.exceptionMsg);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stackTrace)) {
        this.stackTrace = data().deepCopy(fields()[3].schema(), other.stackTrace);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.exceptionType)) {
        this.exceptionType = data().deepCopy(fields()[4].schema(), other.exceptionType);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'className' field.
      * The class that is throwing the error
      * @return The value.
      */
    public java.lang.CharSequence getClassName() {
      return className;
    }

    /**
      * Sets the value of the 'className' field.
      * The class that is throwing the error
      * @param value The value of 'className'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.exception.Builder setClassName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.className = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'className' field has been set.
      * The class that is throwing the error
      * @return True if the 'className' field has been set, false otherwise.
      */
    public boolean hasClassName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'className' field.
      * The class that is throwing the error
      * @return This builder.
      */
    public com.brierley.avro.schemas.exception.Builder clearClassName() {
      className = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'methodName' field.
      * The method that is throwing the error
      * @return The value.
      */
    public java.lang.CharSequence getMethodName() {
      return methodName;
    }

    /**
      * Sets the value of the 'methodName' field.
      * The method that is throwing the error
      * @param value The value of 'methodName'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.exception.Builder setMethodName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.methodName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'methodName' field has been set.
      * The method that is throwing the error
      * @return True if the 'methodName' field has been set, false otherwise.
      */
    public boolean hasMethodName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'methodName' field.
      * The method that is throwing the error
      * @return This builder.
      */
    public com.brierley.avro.schemas.exception.Builder clearMethodName() {
      methodName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'exceptionMsg' field.
      * The main message of the exception, can be user defined, or the title of the exception
      * @return The value.
      */
    public java.lang.CharSequence getExceptionMsg() {
      return exceptionMsg;
    }

    /**
      * Sets the value of the 'exceptionMsg' field.
      * The main message of the exception, can be user defined, or the title of the exception
      * @param value The value of 'exceptionMsg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.exception.Builder setExceptionMsg(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.exceptionMsg = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'exceptionMsg' field has been set.
      * The main message of the exception, can be user defined, or the title of the exception
      * @return True if the 'exceptionMsg' field has been set, false otherwise.
      */
    public boolean hasExceptionMsg() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'exceptionMsg' field.
      * The main message of the exception, can be user defined, or the title of the exception
      * @return This builder.
      */
    public com.brierley.avro.schemas.exception.Builder clearExceptionMsg() {
      exceptionMsg = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'stackTrace' field.
      * The StackTrace for system thrown exceptions, optional
      * @return The value.
      */
    public java.lang.CharSequence getStackTrace() {
      return stackTrace;
    }

    /**
      * Sets the value of the 'stackTrace' field.
      * The StackTrace for system thrown exceptions, optional
      * @param value The value of 'stackTrace'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.exception.Builder setStackTrace(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.stackTrace = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'stackTrace' field has been set.
      * The StackTrace for system thrown exceptions, optional
      * @return True if the 'stackTrace' field has been set, false otherwise.
      */
    public boolean hasStackTrace() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'stackTrace' field.
      * The StackTrace for system thrown exceptions, optional
      * @return This builder.
      */
    public com.brierley.avro.schemas.exception.Builder clearStackTrace() {
      stackTrace = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'exceptionType' field.
      * What kind of exception is it, validation, system, user, etc.
      * @return The value.
      */
    public java.lang.CharSequence getExceptionType() {
      return exceptionType;
    }

    /**
      * Sets the value of the 'exceptionType' field.
      * What kind of exception is it, validation, system, user, etc.
      * @param value The value of 'exceptionType'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.exception.Builder setExceptionType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.exceptionType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'exceptionType' field has been set.
      * What kind of exception is it, validation, system, user, etc.
      * @return True if the 'exceptionType' field has been set, false otherwise.
      */
    public boolean hasExceptionType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'exceptionType' field.
      * What kind of exception is it, validation, system, user, etc.
      * @return This builder.
      */
    public com.brierley.avro.schemas.exception.Builder clearExceptionType() {
      exceptionType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public exception build() {
      try {
        exception record = new exception();
        record.className = fieldSetFlags()[0] ? this.className : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.methodName = fieldSetFlags()[1] ? this.methodName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.exceptionMsg = fieldSetFlags()[2] ? this.exceptionMsg : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.stackTrace = fieldSetFlags()[3] ? this.stackTrace : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.exceptionType = fieldSetFlags()[4] ? this.exceptionType : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
