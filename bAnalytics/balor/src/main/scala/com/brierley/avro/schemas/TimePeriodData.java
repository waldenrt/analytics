/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TimePeriodData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 430613573011844729L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TimePeriodData\",\"namespace\":\"com.brierley.avro.schemas\",\"fields\":[{\"name\":\"timePeriod\",\"type\":\"int\",\"doc\":\"The Balor time period, calculated ascending\"},{\"name\":\"anchorDate\",\"type\":[\"null\",\"string\"],\"doc\":\"the earliest date for each time period, month will be formatted 'MMM yyyy' and weeks will be formatted 'MM/dd/yyyy', nullable to allow previous schema to appear in topic.\"},{\"name\":\"newCustCount\",\"type\":\"long\",\"doc\":\"The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods\"},{\"name\":\"newTxnCount\",\"type\":\"long\",\"doc\":\"The number of transactions made by NEW customers in the given Balor time period.\"},{\"name\":\"newTxnAmt\",\"type\":\"double\",\"doc\":\"The total spend of transactions made by NEW customers in the given Balor time period.\"},{\"name\":\"newDiscAmt\",\"type\":\"double\",\"doc\":\"The total discount amount of transactions made by NEW customers in the given Balor time period.\"},{\"name\":\"newItemQty\",\"type\":\"long\",\"doc\":\"The total number of items purchased by all NEW customers in the given Balor time period.\"},{\"name\":\"newCustSpendAvg\",\"type\":\"double\",\"doc\":\"The average sales per NEW customer in the given time period.\"},{\"name\":\"newCustVisitAvg\",\"type\":\"double\",\"doc\":\"The average number of visits per NEW customer in the given time period.\"},{\"name\":\"newCustItemAvg\",\"type\":\"double\",\"doc\":\"The average number of purchased items per NEW customer in the given time period.\"},{\"name\":\"newCustDiscAvg\",\"type\":\"double\",\"doc\":\"The average discount amount per NEW customer in the given time period.\"},{\"name\":\"newVisitSpendAvg\",\"type\":\"double\",\"doc\":\"The average sales per visit for NEW customers in the given time period.\"},{\"name\":\"newVisitDiscAvg\",\"type\":\"double\",\"doc\":\"The average discount amount per visit for NEW customers in the given time period.\"},{\"name\":\"newVisitItemAvg\",\"type\":\"double\",\"doc\":\"The average number of purchased items per visit for NEW customers in the given time period.\"},{\"name\":\"reactCustCount\",\"type\":\"long\",\"doc\":\"The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period\"},{\"name\":\"reactTxnCount\",\"type\":\"long\",\"doc\":\"The number of transactions made by REACTIVATED customers in the given Balor time period.\"},{\"name\":\"reactTxnAmt\",\"type\":\"double\",\"doc\":\"The total spend of transactions made by REACTIVATED customers in the given Balor time period.\"},{\"name\":\"reactDiscAmt\",\"type\":\"double\",\"doc\":\"The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.\"},{\"name\":\"reactItemQty\",\"type\":\"long\",\"doc\":\"The total number of items purchased by all REACTIVATED customers in the given Balor time period.\"},{\"name\":\"reactCustSpendAvg\",\"type\":\"double\",\"doc\":\"The average sales per REACTIVATED customer in the given time period.\"},{\"name\":\"reactCustVisitAvg\",\"type\":\"double\",\"doc\":\"The average number of visits per REACTIVATED customer in the given time period.\"},{\"name\":\"reactCustItemAvg\",\"type\":\"double\",\"doc\":\"The average number of purchased items per REACTIVATED customer in the given time period.\"},{\"name\":\"reactCustDiscAvg\",\"type\":\"double\",\"doc\":\"The average discount amount per REACTIVATED customer in the given time period.\"},{\"name\":\"reactVisitSpendAvg\",\"type\":\"double\",\"doc\":\"The average sales per visit for REACTIVATED customers in the given time period.\"},{\"name\":\"reactVisitDiscAvg\",\"type\":\"double\",\"doc\":\"The average discount amount per visit for REACTIVATED customers in the given time period.\"},{\"name\":\"reactVisitItemAvg\",\"type\":\"double\",\"doc\":\"The average number of purchased items per visit for REACTIVATED customers in the given time period.\"},{\"name\":\"returnCustCount\",\"type\":\"long\",\"doc\":\"The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3\"},{\"name\":\"returnTxnCount\",\"type\":\"long\",\"doc\":\"The number of transactions made by RETURNING customers in the given Balor time period.\"},{\"name\":\"returnTxnAmt\",\"type\":\"double\",\"doc\":\"The total spend of transactions made by RETURNING customers in the given Balor time period.\"},{\"name\":\"returnDiscAmt\",\"type\":\"double\",\"doc\":\"The total discount amount of transactions made by RETURNING customers in the given Balor time period.\"},{\"name\":\"returnItemQty\",\"type\":\"long\",\"doc\":\"The total number of items purchased by all RETURNING customers in the given Balor time period.\"},{\"name\":\"returnCustSpendAvg\",\"type\":\"double\",\"doc\":\"The average sales per RETURNING customer in the given time period.\"},{\"name\":\"returnCustVisitAvg\",\"type\":\"double\",\"doc\":\"The average number of visits per RETURNING customer in the given time period.\"},{\"name\":\"returnCustItemAvg\",\"type\":\"double\",\"doc\":\"The average number of purchased items per RETURNING customer in the given time period.\"},{\"name\":\"returnCustDiscAvg\",\"type\":\"double\",\"doc\":\"The average discount amount per RETURNING customer in the given time period.\"},{\"name\":\"returnVisitSpendAvg\",\"type\":\"double\",\"doc\":\"The average sales per visit for RETURNING customers in the given time period.\"},{\"name\":\"returnVisitDiscAvg\",\"type\":\"double\",\"doc\":\"The average discount amount per visit for RETURNING customers in the given time period.\"},{\"name\":\"returnVisitItemAvg\",\"type\":\"double\",\"doc\":\"The average number of purchased items per visit for RETURNING customers in the given time period.\"},{\"name\":\"lapsedCustCount\",\"type\":\"long\",\"doc\":\"The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period\"},{\"name\":\"lapsedTxnCount\",\"type\":\"long\",\"doc\":\"The number of transactions made by LAPSED customers in the given Balor time period.\"},{\"name\":\"lapsedTxnAmt\",\"type\":\"double\",\"doc\":\"The total spend of transactions made by LAPSED customers in the given Balor time period.\"},{\"name\":\"lapsedDiscAmt\",\"type\":\"double\",\"doc\":\"The total discount amount of transactions made by LAPSED customers in the given Balor time period.\"},{\"name\":\"lapsedItemQty\",\"type\":\"long\",\"doc\":\"The total number of items purchased by all LAPSED customers in the given Balor time period.\"},{\"name\":\"lapsedCustSpendAvg\",\"type\":\"double\",\"doc\":\"The average sales per LAPSED customer in the given time period.\"},{\"name\":\"lapsedCustVisitAvg\",\"type\":\"double\",\"doc\":\"The average number of visits per LAPSED customer in the given time period.\"},{\"name\":\"lapsedCustItemAvg\",\"type\":\"double\",\"doc\":\"The average number of purchased items per LAPSED customer in the given time period.\"},{\"name\":\"lapsedCustDiscAvg\",\"type\":\"double\",\"doc\":\"The average discount amount per LAPSED customer in the given time period.\"},{\"name\":\"lapsedVisitSpendAvg\",\"type\":\"double\",\"doc\":\"The average sales per visit for LAPSED customers in the given time period.\"},{\"name\":\"lapsedVisitDiscAvg\",\"type\":\"double\",\"doc\":\"The average discount amount per visit for LAPSED customers in the given time period.\"},{\"name\":\"lapsedVisitItemAvg\",\"type\":\"double\",\"doc\":\"The average number of purchased items per visit for LAPSED customers in the given time period.\"},{\"name\":\"custBalor\",\"type\":\"double\",\"doc\":\"The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed\"},{\"name\":\"txnBalor\",\"type\":\"double\",\"doc\":\"The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed\"},{\"name\":\"spendBalor\",\"type\":\"double\",\"doc\":\"The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed\"},{\"name\":\"retention\",\"type\":\"double\",\"doc\":\"The retention rate: (Returning in (t))/(new + react + return in (t-1))\"},{\"name\":\"retentionGrowth\",\"type\":[\"null\",\"double\"],\"doc\":\"The retention growth rate from t-1 to t: [(Retention(t) - Retention(t-1)/Retention(t-1)] * 100\"},{\"name\":\"returnNewSales\",\"type\":[\"null\",\"double\"],\"doc\":\"Total sales in (t) for customers that were NEW in (t-1) and RETURNING in (t)\"},{\"name\":\"returnNewTxn\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of transactions in (t) for customers that were NEW in (","t-1) and RETURNING in (t)\"},{\"name\":\"returnNewCust\",\"type\":[\"null\",\"long\"],\"doc\":\"Total customer count in (t) that were NEW in (t-1) and RETURNING in (t)\"},{\"name\":\"returnReactSales\",\"type\":[\"null\",\"double\"],\"doc\":\"Total sales in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)\"},{\"name\":\"returnReactTxn\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of transactions in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)\"},{\"name\":\"returnReactCust\",\"type\":[\"null\",\"long\"],\"doc\":\"Total customers in (t) that were REACTIVATED in (t-1) and RETURNING in (t)\"},{\"name\":\"returnReturnSales\",\"type\":[\"null\",\"double\"],\"doc\":\"Total sales in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)\"},{\"name\":\"returnReturnTxn\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of transactions in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)\"},{\"name\":\"returnReturnCust\",\"type\":[\"null\",\"long\"],\"doc\":\"Total customers in (t) that were RETURNING in (t-1) and RETURNING in (t)\"},{\"name\":\"ttlSalesLift\",\"type\":[\"null\",\"double\"],\"doc\":\"Lift based on TOTAL sales: returnTxnAmt/(returnNewSales + returnReactSales + returnReturnSales)\"},{\"name\":\"avgSalesLift\",\"type\":[\"null\",\"double\"],\"doc\":\"Lift based on AVG sales per cust: (returnTxnAmt/returnCustCount) / [(returnNewSales + returnReactSales + returnReturnSales) / (returnNewCust + returnReactCust + returnReturnCust)]\"},{\"name\":\"ttlTxnLift\",\"type\":[\"null\",\"double\"],\"doc\":\"Lift based on TOTAL Txns: returnTxnCount/(returnNewTxn + returnReactTxn + returnReturnTxn)\"},{\"name\":\"avgTxnLift\",\"type\":[\"null\",\"double\"],\"doc\":\"Lift based on AVG Txns per cust: (returnTxnCount/returnCustCount) / [(returnNewTxn + returnReactTxn + returnReturnTxn) / (returnNewCust + returnReactCust + returnReturnCust)]\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The Balor time period, calculated ascending */
  @Deprecated public int timePeriod;
  /** the earliest date for each time period, month will be formatted 'MMM yyyy' and weeks will be formatted 'MM/dd/yyyy', nullable to allow previous schema to appear in topic. */
  @Deprecated public java.lang.CharSequence anchorDate;
  /** The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods */
  @Deprecated public long newCustCount;
  /** The number of transactions made by NEW customers in the given Balor time period. */
  @Deprecated public long newTxnCount;
  /** The total spend of transactions made by NEW customers in the given Balor time period. */
  @Deprecated public double newTxnAmt;
  /** The total discount amount of transactions made by NEW customers in the given Balor time period. */
  @Deprecated public double newDiscAmt;
  /** The total number of items purchased by all NEW customers in the given Balor time period. */
  @Deprecated public long newItemQty;
  /** The average sales per NEW customer in the given time period. */
  @Deprecated public double newCustSpendAvg;
  /** The average number of visits per NEW customer in the given time period. */
  @Deprecated public double newCustVisitAvg;
  /** The average number of purchased items per NEW customer in the given time period. */
  @Deprecated public double newCustItemAvg;
  /** The average discount amount per NEW customer in the given time period. */
  @Deprecated public double newCustDiscAvg;
  /** The average sales per visit for NEW customers in the given time period. */
  @Deprecated public double newVisitSpendAvg;
  /** The average discount amount per visit for NEW customers in the given time period. */
  @Deprecated public double newVisitDiscAvg;
  /** The average number of purchased items per visit for NEW customers in the given time period. */
  @Deprecated public double newVisitItemAvg;
  /** The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period */
  @Deprecated public long reactCustCount;
  /** The number of transactions made by REACTIVATED customers in the given Balor time period. */
  @Deprecated public long reactTxnCount;
  /** The total spend of transactions made by REACTIVATED customers in the given Balor time period. */
  @Deprecated public double reactTxnAmt;
  /** The total discount amount of transactions made by REACTIVATED customers in the given Balor time period. */
  @Deprecated public double reactDiscAmt;
  /** The total number of items purchased by all REACTIVATED customers in the given Balor time period. */
  @Deprecated public long reactItemQty;
  /** The average sales per REACTIVATED customer in the given time period. */
  @Deprecated public double reactCustSpendAvg;
  /** The average number of visits per REACTIVATED customer in the given time period. */
  @Deprecated public double reactCustVisitAvg;
  /** The average number of purchased items per REACTIVATED customer in the given time period. */
  @Deprecated public double reactCustItemAvg;
  /** The average discount amount per REACTIVATED customer in the given time period. */
  @Deprecated public double reactCustDiscAvg;
  /** The average sales per visit for REACTIVATED customers in the given time period. */
  @Deprecated public double reactVisitSpendAvg;
  /** The average discount amount per visit for REACTIVATED customers in the given time period. */
  @Deprecated public double reactVisitDiscAvg;
  /** The average number of purchased items per visit for REACTIVATED customers in the given time period. */
  @Deprecated public double reactVisitItemAvg;
  /** The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3 */
  @Deprecated public long returnCustCount;
  /** The number of transactions made by RETURNING customers in the given Balor time period. */
  @Deprecated public long returnTxnCount;
  /** The total spend of transactions made by RETURNING customers in the given Balor time period. */
  @Deprecated public double returnTxnAmt;
  /** The total discount amount of transactions made by RETURNING customers in the given Balor time period. */
  @Deprecated public double returnDiscAmt;
  /** The total number of items purchased by all RETURNING customers in the given Balor time period. */
  @Deprecated public long returnItemQty;
  /** The average sales per RETURNING customer in the given time period. */
  @Deprecated public double returnCustSpendAvg;
  /** The average number of visits per RETURNING customer in the given time period. */
  @Deprecated public double returnCustVisitAvg;
  /** The average number of purchased items per RETURNING customer in the given time period. */
  @Deprecated public double returnCustItemAvg;
  /** The average discount amount per RETURNING customer in the given time period. */
  @Deprecated public double returnCustDiscAvg;
  /** The average sales per visit for RETURNING customers in the given time period. */
  @Deprecated public double returnVisitSpendAvg;
  /** The average discount amount per visit for RETURNING customers in the given time period. */
  @Deprecated public double returnVisitDiscAvg;
  /** The average number of purchased items per visit for RETURNING customers in the given time period. */
  @Deprecated public double returnVisitItemAvg;
  /** The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period */
  @Deprecated public long lapsedCustCount;
  /** The number of transactions made by LAPSED customers in the given Balor time period. */
  @Deprecated public long lapsedTxnCount;
  /** The total spend of transactions made by LAPSED customers in the given Balor time period. */
  @Deprecated public double lapsedTxnAmt;
  /** The total discount amount of transactions made by LAPSED customers in the given Balor time period. */
  @Deprecated public double lapsedDiscAmt;
  /** The total number of items purchased by all LAPSED customers in the given Balor time period. */
  @Deprecated public long lapsedItemQty;
  /** The average sales per LAPSED customer in the given time period. */
  @Deprecated public double lapsedCustSpendAvg;
  /** The average number of visits per LAPSED customer in the given time period. */
  @Deprecated public double lapsedCustVisitAvg;
  /** The average number of purchased items per LAPSED customer in the given time period. */
  @Deprecated public double lapsedCustItemAvg;
  /** The average discount amount per LAPSED customer in the given time period. */
  @Deprecated public double lapsedCustDiscAvg;
  /** The average sales per visit for LAPSED customers in the given time period. */
  @Deprecated public double lapsedVisitSpendAvg;
  /** The average discount amount per visit for LAPSED customers in the given time period. */
  @Deprecated public double lapsedVisitDiscAvg;
  /** The average number of purchased items per visit for LAPSED customers in the given time period. */
  @Deprecated public double lapsedVisitItemAvg;
  /** The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed */
  @Deprecated public double custBalor;
  /** The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed */
  @Deprecated public double txnBalor;
  /** The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed */
  @Deprecated public double spendBalor;
  /** The retention rate: (Returning in (t))/(new + react + return in (t-1)) */
  @Deprecated public double retention;
  /** The retention growth rate from t-1 to t: [(Retention(t) - Retention(t-1)/Retention(t-1)] * 100 */
  @Deprecated public java.lang.Double retentionGrowth;
  /** Total sales in (t) for customers that were NEW in (t-1) and RETURNING in (t) */
  @Deprecated public java.lang.Double returnNewSales;
  /** Total number of transactions in (t) for customers that were NEW in (t-1) and RETURNING in (t) */
  @Deprecated public java.lang.Long returnNewTxn;
  /** Total customer count in (t) that were NEW in (t-1) and RETURNING in (t) */
  @Deprecated public java.lang.Long returnNewCust;
  /** Total sales in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t) */
  @Deprecated public java.lang.Double returnReactSales;
  /** Total number of transactions in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t) */
  @Deprecated public java.lang.Long returnReactTxn;
  /** Total customers in (t) that were REACTIVATED in (t-1) and RETURNING in (t) */
  @Deprecated public java.lang.Long returnReactCust;
  /** Total sales in (t) for customers that were RETURNING in (t-1) and RETURNING in (t) */
  @Deprecated public java.lang.Double returnReturnSales;
  /** Total number of transactions in (t) for customers that were RETURNING in (t-1) and RETURNING in (t) */
  @Deprecated public java.lang.Long returnReturnTxn;
  /** Total customers in (t) that were RETURNING in (t-1) and RETURNING in (t) */
  @Deprecated public java.lang.Long returnReturnCust;
  /** Lift based on TOTAL sales: returnTxnAmt/(returnNewSales + returnReactSales + returnReturnSales) */
  @Deprecated public java.lang.Double ttlSalesLift;
  /** Lift based on AVG sales per cust: (returnTxnAmt/returnCustCount) / [(returnNewSales + returnReactSales + returnReturnSales) / (returnNewCust + returnReactCust + returnReturnCust)] */
  @Deprecated public java.lang.Double avgSalesLift;
  /** Lift based on TOTAL Txns: returnTxnCount/(returnNewTxn + returnReactTxn + returnReturnTxn) */
  @Deprecated public java.lang.Double ttlTxnLift;
  /** Lift based on AVG Txns per cust: (returnTxnCount/returnCustCount) / [(returnNewTxn + returnReactTxn + returnReturnTxn) / (returnNewCust + returnReactCust + returnReturnCust)] */
  @Deprecated public java.lang.Double avgTxnLift;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TimePeriodData() {}

  /**
   * All-args constructor.
   * @param timePeriod The Balor time period, calculated ascending
   * @param anchorDate the earliest date for each time period, month will be formatted 'MMM yyyy' and weeks will be formatted 'MM/dd/yyyy', nullable to allow previous schema to appear in topic.
   * @param newCustCount The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
   * @param newTxnCount The number of transactions made by NEW customers in the given Balor time period.
   * @param newTxnAmt The total spend of transactions made by NEW customers in the given Balor time period.
   * @param newDiscAmt The total discount amount of transactions made by NEW customers in the given Balor time period.
   * @param newItemQty The total number of items purchased by all NEW customers in the given Balor time period.
   * @param newCustSpendAvg The average sales per NEW customer in the given time period.
   * @param newCustVisitAvg The average number of visits per NEW customer in the given time period.
   * @param newCustItemAvg The average number of purchased items per NEW customer in the given time period.
   * @param newCustDiscAvg The average discount amount per NEW customer in the given time period.
   * @param newVisitSpendAvg The average sales per visit for NEW customers in the given time period.
   * @param newVisitDiscAvg The average discount amount per visit for NEW customers in the given time period.
   * @param newVisitItemAvg The average number of purchased items per visit for NEW customers in the given time period.
   * @param reactCustCount The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
   * @param reactTxnCount The number of transactions made by REACTIVATED customers in the given Balor time period.
   * @param reactTxnAmt The total spend of transactions made by REACTIVATED customers in the given Balor time period.
   * @param reactDiscAmt The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
   * @param reactItemQty The total number of items purchased by all REACTIVATED customers in the given Balor time period.
   * @param reactCustSpendAvg The average sales per REACTIVATED customer in the given time period.
   * @param reactCustVisitAvg The average number of visits per REACTIVATED customer in the given time period.
   * @param reactCustItemAvg The average number of purchased items per REACTIVATED customer in the given time period.
   * @param reactCustDiscAvg The average discount amount per REACTIVATED customer in the given time period.
   * @param reactVisitSpendAvg The average sales per visit for REACTIVATED customers in the given time period.
   * @param reactVisitDiscAvg The average discount amount per visit for REACTIVATED customers in the given time period.
   * @param reactVisitItemAvg The average number of purchased items per visit for REACTIVATED customers in the given time period.
   * @param returnCustCount The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
   * @param returnTxnCount The number of transactions made by RETURNING customers in the given Balor time period.
   * @param returnTxnAmt The total spend of transactions made by RETURNING customers in the given Balor time period.
   * @param returnDiscAmt The total discount amount of transactions made by RETURNING customers in the given Balor time period.
   * @param returnItemQty The total number of items purchased by all RETURNING customers in the given Balor time period.
   * @param returnCustSpendAvg The average sales per RETURNING customer in the given time period.
   * @param returnCustVisitAvg The average number of visits per RETURNING customer in the given time period.
   * @param returnCustItemAvg The average number of purchased items per RETURNING customer in the given time period.
   * @param returnCustDiscAvg The average discount amount per RETURNING customer in the given time period.
   * @param returnVisitSpendAvg The average sales per visit for RETURNING customers in the given time period.
   * @param returnVisitDiscAvg The average discount amount per visit for RETURNING customers in the given time period.
   * @param returnVisitItemAvg The average number of purchased items per visit for RETURNING customers in the given time period.
   * @param lapsedCustCount The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
   * @param lapsedTxnCount The number of transactions made by LAPSED customers in the given Balor time period.
   * @param lapsedTxnAmt The total spend of transactions made by LAPSED customers in the given Balor time period.
   * @param lapsedDiscAmt The total discount amount of transactions made by LAPSED customers in the given Balor time period.
   * @param lapsedItemQty The total number of items purchased by all LAPSED customers in the given Balor time period.
   * @param lapsedCustSpendAvg The average sales per LAPSED customer in the given time period.
   * @param lapsedCustVisitAvg The average number of visits per LAPSED customer in the given time period.
   * @param lapsedCustItemAvg The average number of purchased items per LAPSED customer in the given time period.
   * @param lapsedCustDiscAvg The average discount amount per LAPSED customer in the given time period.
   * @param lapsedVisitSpendAvg The average sales per visit for LAPSED customers in the given time period.
   * @param lapsedVisitDiscAvg The average discount amount per visit for LAPSED customers in the given time period.
   * @param lapsedVisitItemAvg The average number of purchased items per visit for LAPSED customers in the given time period.
   * @param custBalor The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
   * @param txnBalor The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
   * @param spendBalor The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
   * @param retention The retention rate: (Returning in (t))/(new + react + return in (t-1))
   * @param retentionGrowth The retention growth rate from t-1 to t: [(Retention(t) - Retention(t-1)/Retention(t-1)] * 100
   * @param returnNewSales Total sales in (t) for customers that were NEW in (t-1) and RETURNING in (t)
   * @param returnNewTxn Total number of transactions in (t) for customers that were NEW in (t-1) and RETURNING in (t)
   * @param returnNewCust Total customer count in (t) that were NEW in (t-1) and RETURNING in (t)
   * @param returnReactSales Total sales in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
   * @param returnReactTxn Total number of transactions in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
   * @param returnReactCust Total customers in (t) that were REACTIVATED in (t-1) and RETURNING in (t)
   * @param returnReturnSales Total sales in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
   * @param returnReturnTxn Total number of transactions in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
   * @param returnReturnCust Total customers in (t) that were RETURNING in (t-1) and RETURNING in (t)
   * @param ttlSalesLift Lift based on TOTAL sales: returnTxnAmt/(returnNewSales + returnReactSales + returnReturnSales)
   * @param avgSalesLift Lift based on AVG sales per cust: (returnTxnAmt/returnCustCount) / [(returnNewSales + returnReactSales + returnReturnSales) / (returnNewCust + returnReactCust + returnReturnCust)]
   * @param ttlTxnLift Lift based on TOTAL Txns: returnTxnCount/(returnNewTxn + returnReactTxn + returnReturnTxn)
   * @param avgTxnLift Lift based on AVG Txns per cust: (returnTxnCount/returnCustCount) / [(returnNewTxn + returnReactTxn + returnReturnTxn) / (returnNewCust + returnReactCust + returnReturnCust)]
   */
  public TimePeriodData(java.lang.Integer timePeriod, java.lang.CharSequence anchorDate, java.lang.Long newCustCount, java.lang.Long newTxnCount, java.lang.Double newTxnAmt, java.lang.Double newDiscAmt, java.lang.Long newItemQty, java.lang.Double newCustSpendAvg, java.lang.Double newCustVisitAvg, java.lang.Double newCustItemAvg, java.lang.Double newCustDiscAvg, java.lang.Double newVisitSpendAvg, java.lang.Double newVisitDiscAvg, java.lang.Double newVisitItemAvg, java.lang.Long reactCustCount, java.lang.Long reactTxnCount, java.lang.Double reactTxnAmt, java.lang.Double reactDiscAmt, java.lang.Long reactItemQty, java.lang.Double reactCustSpendAvg, java.lang.Double reactCustVisitAvg, java.lang.Double reactCustItemAvg, java.lang.Double reactCustDiscAvg, java.lang.Double reactVisitSpendAvg, java.lang.Double reactVisitDiscAvg, java.lang.Double reactVisitItemAvg, java.lang.Long returnCustCount, java.lang.Long returnTxnCount, java.lang.Double returnTxnAmt, java.lang.Double returnDiscAmt, java.lang.Long returnItemQty, java.lang.Double returnCustSpendAvg, java.lang.Double returnCustVisitAvg, java.lang.Double returnCustItemAvg, java.lang.Double returnCustDiscAvg, java.lang.Double returnVisitSpendAvg, java.lang.Double returnVisitDiscAvg, java.lang.Double returnVisitItemAvg, java.lang.Long lapsedCustCount, java.lang.Long lapsedTxnCount, java.lang.Double lapsedTxnAmt, java.lang.Double lapsedDiscAmt, java.lang.Long lapsedItemQty, java.lang.Double lapsedCustSpendAvg, java.lang.Double lapsedCustVisitAvg, java.lang.Double lapsedCustItemAvg, java.lang.Double lapsedCustDiscAvg, java.lang.Double lapsedVisitSpendAvg, java.lang.Double lapsedVisitDiscAvg, java.lang.Double lapsedVisitItemAvg, java.lang.Double custBalor, java.lang.Double txnBalor, java.lang.Double spendBalor, java.lang.Double retention, java.lang.Double retentionGrowth, java.lang.Double returnNewSales, java.lang.Long returnNewTxn, java.lang.Long returnNewCust, java.lang.Double returnReactSales, java.lang.Long returnReactTxn, java.lang.Long returnReactCust, java.lang.Double returnReturnSales, java.lang.Long returnReturnTxn, java.lang.Long returnReturnCust, java.lang.Double ttlSalesLift, java.lang.Double avgSalesLift, java.lang.Double ttlTxnLift, java.lang.Double avgTxnLift) {
    this.timePeriod = timePeriod;
    this.anchorDate = anchorDate;
    this.newCustCount = newCustCount;
    this.newTxnCount = newTxnCount;
    this.newTxnAmt = newTxnAmt;
    this.newDiscAmt = newDiscAmt;
    this.newItemQty = newItemQty;
    this.newCustSpendAvg = newCustSpendAvg;
    this.newCustVisitAvg = newCustVisitAvg;
    this.newCustItemAvg = newCustItemAvg;
    this.newCustDiscAvg = newCustDiscAvg;
    this.newVisitSpendAvg = newVisitSpendAvg;
    this.newVisitDiscAvg = newVisitDiscAvg;
    this.newVisitItemAvg = newVisitItemAvg;
    this.reactCustCount = reactCustCount;
    this.reactTxnCount = reactTxnCount;
    this.reactTxnAmt = reactTxnAmt;
    this.reactDiscAmt = reactDiscAmt;
    this.reactItemQty = reactItemQty;
    this.reactCustSpendAvg = reactCustSpendAvg;
    this.reactCustVisitAvg = reactCustVisitAvg;
    this.reactCustItemAvg = reactCustItemAvg;
    this.reactCustDiscAvg = reactCustDiscAvg;
    this.reactVisitSpendAvg = reactVisitSpendAvg;
    this.reactVisitDiscAvg = reactVisitDiscAvg;
    this.reactVisitItemAvg = reactVisitItemAvg;
    this.returnCustCount = returnCustCount;
    this.returnTxnCount = returnTxnCount;
    this.returnTxnAmt = returnTxnAmt;
    this.returnDiscAmt = returnDiscAmt;
    this.returnItemQty = returnItemQty;
    this.returnCustSpendAvg = returnCustSpendAvg;
    this.returnCustVisitAvg = returnCustVisitAvg;
    this.returnCustItemAvg = returnCustItemAvg;
    this.returnCustDiscAvg = returnCustDiscAvg;
    this.returnVisitSpendAvg = returnVisitSpendAvg;
    this.returnVisitDiscAvg = returnVisitDiscAvg;
    this.returnVisitItemAvg = returnVisitItemAvg;
    this.lapsedCustCount = lapsedCustCount;
    this.lapsedTxnCount = lapsedTxnCount;
    this.lapsedTxnAmt = lapsedTxnAmt;
    this.lapsedDiscAmt = lapsedDiscAmt;
    this.lapsedItemQty = lapsedItemQty;
    this.lapsedCustSpendAvg = lapsedCustSpendAvg;
    this.lapsedCustVisitAvg = lapsedCustVisitAvg;
    this.lapsedCustItemAvg = lapsedCustItemAvg;
    this.lapsedCustDiscAvg = lapsedCustDiscAvg;
    this.lapsedVisitSpendAvg = lapsedVisitSpendAvg;
    this.lapsedVisitDiscAvg = lapsedVisitDiscAvg;
    this.lapsedVisitItemAvg = lapsedVisitItemAvg;
    this.custBalor = custBalor;
    this.txnBalor = txnBalor;
    this.spendBalor = spendBalor;
    this.retention = retention;
    this.retentionGrowth = retentionGrowth;
    this.returnNewSales = returnNewSales;
    this.returnNewTxn = returnNewTxn;
    this.returnNewCust = returnNewCust;
    this.returnReactSales = returnReactSales;
    this.returnReactTxn = returnReactTxn;
    this.returnReactCust = returnReactCust;
    this.returnReturnSales = returnReturnSales;
    this.returnReturnTxn = returnReturnTxn;
    this.returnReturnCust = returnReturnCust;
    this.ttlSalesLift = ttlSalesLift;
    this.avgSalesLift = avgSalesLift;
    this.ttlTxnLift = ttlTxnLift;
    this.avgTxnLift = avgTxnLift;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timePeriod;
    case 1: return anchorDate;
    case 2: return newCustCount;
    case 3: return newTxnCount;
    case 4: return newTxnAmt;
    case 5: return newDiscAmt;
    case 6: return newItemQty;
    case 7: return newCustSpendAvg;
    case 8: return newCustVisitAvg;
    case 9: return newCustItemAvg;
    case 10: return newCustDiscAvg;
    case 11: return newVisitSpendAvg;
    case 12: return newVisitDiscAvg;
    case 13: return newVisitItemAvg;
    case 14: return reactCustCount;
    case 15: return reactTxnCount;
    case 16: return reactTxnAmt;
    case 17: return reactDiscAmt;
    case 18: return reactItemQty;
    case 19: return reactCustSpendAvg;
    case 20: return reactCustVisitAvg;
    case 21: return reactCustItemAvg;
    case 22: return reactCustDiscAvg;
    case 23: return reactVisitSpendAvg;
    case 24: return reactVisitDiscAvg;
    case 25: return reactVisitItemAvg;
    case 26: return returnCustCount;
    case 27: return returnTxnCount;
    case 28: return returnTxnAmt;
    case 29: return returnDiscAmt;
    case 30: return returnItemQty;
    case 31: return returnCustSpendAvg;
    case 32: return returnCustVisitAvg;
    case 33: return returnCustItemAvg;
    case 34: return returnCustDiscAvg;
    case 35: return returnVisitSpendAvg;
    case 36: return returnVisitDiscAvg;
    case 37: return returnVisitItemAvg;
    case 38: return lapsedCustCount;
    case 39: return lapsedTxnCount;
    case 40: return lapsedTxnAmt;
    case 41: return lapsedDiscAmt;
    case 42: return lapsedItemQty;
    case 43: return lapsedCustSpendAvg;
    case 44: return lapsedCustVisitAvg;
    case 45: return lapsedCustItemAvg;
    case 46: return lapsedCustDiscAvg;
    case 47: return lapsedVisitSpendAvg;
    case 48: return lapsedVisitDiscAvg;
    case 49: return lapsedVisitItemAvg;
    case 50: return custBalor;
    case 51: return txnBalor;
    case 52: return spendBalor;
    case 53: return retention;
    case 54: return retentionGrowth;
    case 55: return returnNewSales;
    case 56: return returnNewTxn;
    case 57: return returnNewCust;
    case 58: return returnReactSales;
    case 59: return returnReactTxn;
    case 60: return returnReactCust;
    case 61: return returnReturnSales;
    case 62: return returnReturnTxn;
    case 63: return returnReturnCust;
    case 64: return ttlSalesLift;
    case 65: return avgSalesLift;
    case 66: return ttlTxnLift;
    case 67: return avgTxnLift;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timePeriod = (java.lang.Integer)value$; break;
    case 1: anchorDate = (java.lang.CharSequence)value$; break;
    case 2: newCustCount = (java.lang.Long)value$; break;
    case 3: newTxnCount = (java.lang.Long)value$; break;
    case 4: newTxnAmt = (java.lang.Double)value$; break;
    case 5: newDiscAmt = (java.lang.Double)value$; break;
    case 6: newItemQty = (java.lang.Long)value$; break;
    case 7: newCustSpendAvg = (java.lang.Double)value$; break;
    case 8: newCustVisitAvg = (java.lang.Double)value$; break;
    case 9: newCustItemAvg = (java.lang.Double)value$; break;
    case 10: newCustDiscAvg = (java.lang.Double)value$; break;
    case 11: newVisitSpendAvg = (java.lang.Double)value$; break;
    case 12: newVisitDiscAvg = (java.lang.Double)value$; break;
    case 13: newVisitItemAvg = (java.lang.Double)value$; break;
    case 14: reactCustCount = (java.lang.Long)value$; break;
    case 15: reactTxnCount = (java.lang.Long)value$; break;
    case 16: reactTxnAmt = (java.lang.Double)value$; break;
    case 17: reactDiscAmt = (java.lang.Double)value$; break;
    case 18: reactItemQty = (java.lang.Long)value$; break;
    case 19: reactCustSpendAvg = (java.lang.Double)value$; break;
    case 20: reactCustVisitAvg = (java.lang.Double)value$; break;
    case 21: reactCustItemAvg = (java.lang.Double)value$; break;
    case 22: reactCustDiscAvg = (java.lang.Double)value$; break;
    case 23: reactVisitSpendAvg = (java.lang.Double)value$; break;
    case 24: reactVisitDiscAvg = (java.lang.Double)value$; break;
    case 25: reactVisitItemAvg = (java.lang.Double)value$; break;
    case 26: returnCustCount = (java.lang.Long)value$; break;
    case 27: returnTxnCount = (java.lang.Long)value$; break;
    case 28: returnTxnAmt = (java.lang.Double)value$; break;
    case 29: returnDiscAmt = (java.lang.Double)value$; break;
    case 30: returnItemQty = (java.lang.Long)value$; break;
    case 31: returnCustSpendAvg = (java.lang.Double)value$; break;
    case 32: returnCustVisitAvg = (java.lang.Double)value$; break;
    case 33: returnCustItemAvg = (java.lang.Double)value$; break;
    case 34: returnCustDiscAvg = (java.lang.Double)value$; break;
    case 35: returnVisitSpendAvg = (java.lang.Double)value$; break;
    case 36: returnVisitDiscAvg = (java.lang.Double)value$; break;
    case 37: returnVisitItemAvg = (java.lang.Double)value$; break;
    case 38: lapsedCustCount = (java.lang.Long)value$; break;
    case 39: lapsedTxnCount = (java.lang.Long)value$; break;
    case 40: lapsedTxnAmt = (java.lang.Double)value$; break;
    case 41: lapsedDiscAmt = (java.lang.Double)value$; break;
    case 42: lapsedItemQty = (java.lang.Long)value$; break;
    case 43: lapsedCustSpendAvg = (java.lang.Double)value$; break;
    case 44: lapsedCustVisitAvg = (java.lang.Double)value$; break;
    case 45: lapsedCustItemAvg = (java.lang.Double)value$; break;
    case 46: lapsedCustDiscAvg = (java.lang.Double)value$; break;
    case 47: lapsedVisitSpendAvg = (java.lang.Double)value$; break;
    case 48: lapsedVisitDiscAvg = (java.lang.Double)value$; break;
    case 49: lapsedVisitItemAvg = (java.lang.Double)value$; break;
    case 50: custBalor = (java.lang.Double)value$; break;
    case 51: txnBalor = (java.lang.Double)value$; break;
    case 52: spendBalor = (java.lang.Double)value$; break;
    case 53: retention = (java.lang.Double)value$; break;
    case 54: retentionGrowth = (java.lang.Double)value$; break;
    case 55: returnNewSales = (java.lang.Double)value$; break;
    case 56: returnNewTxn = (java.lang.Long)value$; break;
    case 57: returnNewCust = (java.lang.Long)value$; break;
    case 58: returnReactSales = (java.lang.Double)value$; break;
    case 59: returnReactTxn = (java.lang.Long)value$; break;
    case 60: returnReactCust = (java.lang.Long)value$; break;
    case 61: returnReturnSales = (java.lang.Double)value$; break;
    case 62: returnReturnTxn = (java.lang.Long)value$; break;
    case 63: returnReturnCust = (java.lang.Long)value$; break;
    case 64: ttlSalesLift = (java.lang.Double)value$; break;
    case 65: avgSalesLift = (java.lang.Double)value$; break;
    case 66: ttlTxnLift = (java.lang.Double)value$; break;
    case 67: avgTxnLift = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timePeriod' field.
   * @return The Balor time period, calculated ascending
   */
  public java.lang.Integer getTimePeriod() {
    return timePeriod;
  }

  /**
   * Sets the value of the 'timePeriod' field.
   * The Balor time period, calculated ascending
   * @param value the value to set.
   */
  public void setTimePeriod(java.lang.Integer value) {
    this.timePeriod = value;
  }

  /**
   * Gets the value of the 'anchorDate' field.
   * @return the earliest date for each time period, month will be formatted 'MMM yyyy' and weeks will be formatted 'MM/dd/yyyy', nullable to allow previous schema to appear in topic.
   */
  public java.lang.CharSequence getAnchorDate() {
    return anchorDate;
  }

  /**
   * Sets the value of the 'anchorDate' field.
   * the earliest date for each time period, month will be formatted 'MMM yyyy' and weeks will be formatted 'MM/dd/yyyy', nullable to allow previous schema to appear in topic.
   * @param value the value to set.
   */
  public void setAnchorDate(java.lang.CharSequence value) {
    this.anchorDate = value;
  }

  /**
   * Gets the value of the 'newCustCount' field.
   * @return The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
   */
  public java.lang.Long getNewCustCount() {
    return newCustCount;
  }

  /**
   * Sets the value of the 'newCustCount' field.
   * The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
   * @param value the value to set.
   */
  public void setNewCustCount(java.lang.Long value) {
    this.newCustCount = value;
  }

  /**
   * Gets the value of the 'newTxnCount' field.
   * @return The number of transactions made by NEW customers in the given Balor time period.
   */
  public java.lang.Long getNewTxnCount() {
    return newTxnCount;
  }

  /**
   * Sets the value of the 'newTxnCount' field.
   * The number of transactions made by NEW customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setNewTxnCount(java.lang.Long value) {
    this.newTxnCount = value;
  }

  /**
   * Gets the value of the 'newTxnAmt' field.
   * @return The total spend of transactions made by NEW customers in the given Balor time period.
   */
  public java.lang.Double getNewTxnAmt() {
    return newTxnAmt;
  }

  /**
   * Sets the value of the 'newTxnAmt' field.
   * The total spend of transactions made by NEW customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setNewTxnAmt(java.lang.Double value) {
    this.newTxnAmt = value;
  }

  /**
   * Gets the value of the 'newDiscAmt' field.
   * @return The total discount amount of transactions made by NEW customers in the given Balor time period.
   */
  public java.lang.Double getNewDiscAmt() {
    return newDiscAmt;
  }

  /**
   * Sets the value of the 'newDiscAmt' field.
   * The total discount amount of transactions made by NEW customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setNewDiscAmt(java.lang.Double value) {
    this.newDiscAmt = value;
  }

  /**
   * Gets the value of the 'newItemQty' field.
   * @return The total number of items purchased by all NEW customers in the given Balor time period.
   */
  public java.lang.Long getNewItemQty() {
    return newItemQty;
  }

  /**
   * Sets the value of the 'newItemQty' field.
   * The total number of items purchased by all NEW customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setNewItemQty(java.lang.Long value) {
    this.newItemQty = value;
  }

  /**
   * Gets the value of the 'newCustSpendAvg' field.
   * @return The average sales per NEW customer in the given time period.
   */
  public java.lang.Double getNewCustSpendAvg() {
    return newCustSpendAvg;
  }

  /**
   * Sets the value of the 'newCustSpendAvg' field.
   * The average sales per NEW customer in the given time period.
   * @param value the value to set.
   */
  public void setNewCustSpendAvg(java.lang.Double value) {
    this.newCustSpendAvg = value;
  }

  /**
   * Gets the value of the 'newCustVisitAvg' field.
   * @return The average number of visits per NEW customer in the given time period.
   */
  public java.lang.Double getNewCustVisitAvg() {
    return newCustVisitAvg;
  }

  /**
   * Sets the value of the 'newCustVisitAvg' field.
   * The average number of visits per NEW customer in the given time period.
   * @param value the value to set.
   */
  public void setNewCustVisitAvg(java.lang.Double value) {
    this.newCustVisitAvg = value;
  }

  /**
   * Gets the value of the 'newCustItemAvg' field.
   * @return The average number of purchased items per NEW customer in the given time period.
   */
  public java.lang.Double getNewCustItemAvg() {
    return newCustItemAvg;
  }

  /**
   * Sets the value of the 'newCustItemAvg' field.
   * The average number of purchased items per NEW customer in the given time period.
   * @param value the value to set.
   */
  public void setNewCustItemAvg(java.lang.Double value) {
    this.newCustItemAvg = value;
  }

  /**
   * Gets the value of the 'newCustDiscAvg' field.
   * @return The average discount amount per NEW customer in the given time period.
   */
  public java.lang.Double getNewCustDiscAvg() {
    return newCustDiscAvg;
  }

  /**
   * Sets the value of the 'newCustDiscAvg' field.
   * The average discount amount per NEW customer in the given time period.
   * @param value the value to set.
   */
  public void setNewCustDiscAvg(java.lang.Double value) {
    this.newCustDiscAvg = value;
  }

  /**
   * Gets the value of the 'newVisitSpendAvg' field.
   * @return The average sales per visit for NEW customers in the given time period.
   */
  public java.lang.Double getNewVisitSpendAvg() {
    return newVisitSpendAvg;
  }

  /**
   * Sets the value of the 'newVisitSpendAvg' field.
   * The average sales per visit for NEW customers in the given time period.
   * @param value the value to set.
   */
  public void setNewVisitSpendAvg(java.lang.Double value) {
    this.newVisitSpendAvg = value;
  }

  /**
   * Gets the value of the 'newVisitDiscAvg' field.
   * @return The average discount amount per visit for NEW customers in the given time period.
   */
  public java.lang.Double getNewVisitDiscAvg() {
    return newVisitDiscAvg;
  }

  /**
   * Sets the value of the 'newVisitDiscAvg' field.
   * The average discount amount per visit for NEW customers in the given time period.
   * @param value the value to set.
   */
  public void setNewVisitDiscAvg(java.lang.Double value) {
    this.newVisitDiscAvg = value;
  }

  /**
   * Gets the value of the 'newVisitItemAvg' field.
   * @return The average number of purchased items per visit for NEW customers in the given time period.
   */
  public java.lang.Double getNewVisitItemAvg() {
    return newVisitItemAvg;
  }

  /**
   * Sets the value of the 'newVisitItemAvg' field.
   * The average number of purchased items per visit for NEW customers in the given time period.
   * @param value the value to set.
   */
  public void setNewVisitItemAvg(java.lang.Double value) {
    this.newVisitItemAvg = value;
  }

  /**
   * Gets the value of the 'reactCustCount' field.
   * @return The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
   */
  public java.lang.Long getReactCustCount() {
    return reactCustCount;
  }

  /**
   * Sets the value of the 'reactCustCount' field.
   * The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
   * @param value the value to set.
   */
  public void setReactCustCount(java.lang.Long value) {
    this.reactCustCount = value;
  }

  /**
   * Gets the value of the 'reactTxnCount' field.
   * @return The number of transactions made by REACTIVATED customers in the given Balor time period.
   */
  public java.lang.Long getReactTxnCount() {
    return reactTxnCount;
  }

  /**
   * Sets the value of the 'reactTxnCount' field.
   * The number of transactions made by REACTIVATED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReactTxnCount(java.lang.Long value) {
    this.reactTxnCount = value;
  }

  /**
   * Gets the value of the 'reactTxnAmt' field.
   * @return The total spend of transactions made by REACTIVATED customers in the given Balor time period.
   */
  public java.lang.Double getReactTxnAmt() {
    return reactTxnAmt;
  }

  /**
   * Sets the value of the 'reactTxnAmt' field.
   * The total spend of transactions made by REACTIVATED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReactTxnAmt(java.lang.Double value) {
    this.reactTxnAmt = value;
  }

  /**
   * Gets the value of the 'reactDiscAmt' field.
   * @return The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
   */
  public java.lang.Double getReactDiscAmt() {
    return reactDiscAmt;
  }

  /**
   * Sets the value of the 'reactDiscAmt' field.
   * The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReactDiscAmt(java.lang.Double value) {
    this.reactDiscAmt = value;
  }

  /**
   * Gets the value of the 'reactItemQty' field.
   * @return The total number of items purchased by all REACTIVATED customers in the given Balor time period.
   */
  public java.lang.Long getReactItemQty() {
    return reactItemQty;
  }

  /**
   * Sets the value of the 'reactItemQty' field.
   * The total number of items purchased by all REACTIVATED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReactItemQty(java.lang.Long value) {
    this.reactItemQty = value;
  }

  /**
   * Gets the value of the 'reactCustSpendAvg' field.
   * @return The average sales per REACTIVATED customer in the given time period.
   */
  public java.lang.Double getReactCustSpendAvg() {
    return reactCustSpendAvg;
  }

  /**
   * Sets the value of the 'reactCustSpendAvg' field.
   * The average sales per REACTIVATED customer in the given time period.
   * @param value the value to set.
   */
  public void setReactCustSpendAvg(java.lang.Double value) {
    this.reactCustSpendAvg = value;
  }

  /**
   * Gets the value of the 'reactCustVisitAvg' field.
   * @return The average number of visits per REACTIVATED customer in the given time period.
   */
  public java.lang.Double getReactCustVisitAvg() {
    return reactCustVisitAvg;
  }

  /**
   * Sets the value of the 'reactCustVisitAvg' field.
   * The average number of visits per REACTIVATED customer in the given time period.
   * @param value the value to set.
   */
  public void setReactCustVisitAvg(java.lang.Double value) {
    this.reactCustVisitAvg = value;
  }

  /**
   * Gets the value of the 'reactCustItemAvg' field.
   * @return The average number of purchased items per REACTIVATED customer in the given time period.
   */
  public java.lang.Double getReactCustItemAvg() {
    return reactCustItemAvg;
  }

  /**
   * Sets the value of the 'reactCustItemAvg' field.
   * The average number of purchased items per REACTIVATED customer in the given time period.
   * @param value the value to set.
   */
  public void setReactCustItemAvg(java.lang.Double value) {
    this.reactCustItemAvg = value;
  }

  /**
   * Gets the value of the 'reactCustDiscAvg' field.
   * @return The average discount amount per REACTIVATED customer in the given time period.
   */
  public java.lang.Double getReactCustDiscAvg() {
    return reactCustDiscAvg;
  }

  /**
   * Sets the value of the 'reactCustDiscAvg' field.
   * The average discount amount per REACTIVATED customer in the given time period.
   * @param value the value to set.
   */
  public void setReactCustDiscAvg(java.lang.Double value) {
    this.reactCustDiscAvg = value;
  }

  /**
   * Gets the value of the 'reactVisitSpendAvg' field.
   * @return The average sales per visit for REACTIVATED customers in the given time period.
   */
  public java.lang.Double getReactVisitSpendAvg() {
    return reactVisitSpendAvg;
  }

  /**
   * Sets the value of the 'reactVisitSpendAvg' field.
   * The average sales per visit for REACTIVATED customers in the given time period.
   * @param value the value to set.
   */
  public void setReactVisitSpendAvg(java.lang.Double value) {
    this.reactVisitSpendAvg = value;
  }

  /**
   * Gets the value of the 'reactVisitDiscAvg' field.
   * @return The average discount amount per visit for REACTIVATED customers in the given time period.
   */
  public java.lang.Double getReactVisitDiscAvg() {
    return reactVisitDiscAvg;
  }

  /**
   * Sets the value of the 'reactVisitDiscAvg' field.
   * The average discount amount per visit for REACTIVATED customers in the given time period.
   * @param value the value to set.
   */
  public void setReactVisitDiscAvg(java.lang.Double value) {
    this.reactVisitDiscAvg = value;
  }

  /**
   * Gets the value of the 'reactVisitItemAvg' field.
   * @return The average number of purchased items per visit for REACTIVATED customers in the given time period.
   */
  public java.lang.Double getReactVisitItemAvg() {
    return reactVisitItemAvg;
  }

  /**
   * Sets the value of the 'reactVisitItemAvg' field.
   * The average number of purchased items per visit for REACTIVATED customers in the given time period.
   * @param value the value to set.
   */
  public void setReactVisitItemAvg(java.lang.Double value) {
    this.reactVisitItemAvg = value;
  }

  /**
   * Gets the value of the 'returnCustCount' field.
   * @return The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
   */
  public java.lang.Long getReturnCustCount() {
    return returnCustCount;
  }

  /**
   * Sets the value of the 'returnCustCount' field.
   * The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
   * @param value the value to set.
   */
  public void setReturnCustCount(java.lang.Long value) {
    this.returnCustCount = value;
  }

  /**
   * Gets the value of the 'returnTxnCount' field.
   * @return The number of transactions made by RETURNING customers in the given Balor time period.
   */
  public java.lang.Long getReturnTxnCount() {
    return returnTxnCount;
  }

  /**
   * Sets the value of the 'returnTxnCount' field.
   * The number of transactions made by RETURNING customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReturnTxnCount(java.lang.Long value) {
    this.returnTxnCount = value;
  }

  /**
   * Gets the value of the 'returnTxnAmt' field.
   * @return The total spend of transactions made by RETURNING customers in the given Balor time period.
   */
  public java.lang.Double getReturnTxnAmt() {
    return returnTxnAmt;
  }

  /**
   * Sets the value of the 'returnTxnAmt' field.
   * The total spend of transactions made by RETURNING customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReturnTxnAmt(java.lang.Double value) {
    this.returnTxnAmt = value;
  }

  /**
   * Gets the value of the 'returnDiscAmt' field.
   * @return The total discount amount of transactions made by RETURNING customers in the given Balor time period.
   */
  public java.lang.Double getReturnDiscAmt() {
    return returnDiscAmt;
  }

  /**
   * Sets the value of the 'returnDiscAmt' field.
   * The total discount amount of transactions made by RETURNING customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReturnDiscAmt(java.lang.Double value) {
    this.returnDiscAmt = value;
  }

  /**
   * Gets the value of the 'returnItemQty' field.
   * @return The total number of items purchased by all RETURNING customers in the given Balor time period.
   */
  public java.lang.Long getReturnItemQty() {
    return returnItemQty;
  }

  /**
   * Sets the value of the 'returnItemQty' field.
   * The total number of items purchased by all RETURNING customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setReturnItemQty(java.lang.Long value) {
    this.returnItemQty = value;
  }

  /**
   * Gets the value of the 'returnCustSpendAvg' field.
   * @return The average sales per RETURNING customer in the given time period.
   */
  public java.lang.Double getReturnCustSpendAvg() {
    return returnCustSpendAvg;
  }

  /**
   * Sets the value of the 'returnCustSpendAvg' field.
   * The average sales per RETURNING customer in the given time period.
   * @param value the value to set.
   */
  public void setReturnCustSpendAvg(java.lang.Double value) {
    this.returnCustSpendAvg = value;
  }

  /**
   * Gets the value of the 'returnCustVisitAvg' field.
   * @return The average number of visits per RETURNING customer in the given time period.
   */
  public java.lang.Double getReturnCustVisitAvg() {
    return returnCustVisitAvg;
  }

  /**
   * Sets the value of the 'returnCustVisitAvg' field.
   * The average number of visits per RETURNING customer in the given time period.
   * @param value the value to set.
   */
  public void setReturnCustVisitAvg(java.lang.Double value) {
    this.returnCustVisitAvg = value;
  }

  /**
   * Gets the value of the 'returnCustItemAvg' field.
   * @return The average number of purchased items per RETURNING customer in the given time period.
   */
  public java.lang.Double getReturnCustItemAvg() {
    return returnCustItemAvg;
  }

  /**
   * Sets the value of the 'returnCustItemAvg' field.
   * The average number of purchased items per RETURNING customer in the given time period.
   * @param value the value to set.
   */
  public void setReturnCustItemAvg(java.lang.Double value) {
    this.returnCustItemAvg = value;
  }

  /**
   * Gets the value of the 'returnCustDiscAvg' field.
   * @return The average discount amount per RETURNING customer in the given time period.
   */
  public java.lang.Double getReturnCustDiscAvg() {
    return returnCustDiscAvg;
  }

  /**
   * Sets the value of the 'returnCustDiscAvg' field.
   * The average discount amount per RETURNING customer in the given time period.
   * @param value the value to set.
   */
  public void setReturnCustDiscAvg(java.lang.Double value) {
    this.returnCustDiscAvg = value;
  }

  /**
   * Gets the value of the 'returnVisitSpendAvg' field.
   * @return The average sales per visit for RETURNING customers in the given time period.
   */
  public java.lang.Double getReturnVisitSpendAvg() {
    return returnVisitSpendAvg;
  }

  /**
   * Sets the value of the 'returnVisitSpendAvg' field.
   * The average sales per visit for RETURNING customers in the given time period.
   * @param value the value to set.
   */
  public void setReturnVisitSpendAvg(java.lang.Double value) {
    this.returnVisitSpendAvg = value;
  }

  /**
   * Gets the value of the 'returnVisitDiscAvg' field.
   * @return The average discount amount per visit for RETURNING customers in the given time period.
   */
  public java.lang.Double getReturnVisitDiscAvg() {
    return returnVisitDiscAvg;
  }

  /**
   * Sets the value of the 'returnVisitDiscAvg' field.
   * The average discount amount per visit for RETURNING customers in the given time period.
   * @param value the value to set.
   */
  public void setReturnVisitDiscAvg(java.lang.Double value) {
    this.returnVisitDiscAvg = value;
  }

  /**
   * Gets the value of the 'returnVisitItemAvg' field.
   * @return The average number of purchased items per visit for RETURNING customers in the given time period.
   */
  public java.lang.Double getReturnVisitItemAvg() {
    return returnVisitItemAvg;
  }

  /**
   * Sets the value of the 'returnVisitItemAvg' field.
   * The average number of purchased items per visit for RETURNING customers in the given time period.
   * @param value the value to set.
   */
  public void setReturnVisitItemAvg(java.lang.Double value) {
    this.returnVisitItemAvg = value;
  }

  /**
   * Gets the value of the 'lapsedCustCount' field.
   * @return The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
   */
  public java.lang.Long getLapsedCustCount() {
    return lapsedCustCount;
  }

  /**
   * Sets the value of the 'lapsedCustCount' field.
   * The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
   * @param value the value to set.
   */
  public void setLapsedCustCount(java.lang.Long value) {
    this.lapsedCustCount = value;
  }

  /**
   * Gets the value of the 'lapsedTxnCount' field.
   * @return The number of transactions made by LAPSED customers in the given Balor time period.
   */
  public java.lang.Long getLapsedTxnCount() {
    return lapsedTxnCount;
  }

  /**
   * Sets the value of the 'lapsedTxnCount' field.
   * The number of transactions made by LAPSED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setLapsedTxnCount(java.lang.Long value) {
    this.lapsedTxnCount = value;
  }

  /**
   * Gets the value of the 'lapsedTxnAmt' field.
   * @return The total spend of transactions made by LAPSED customers in the given Balor time period.
   */
  public java.lang.Double getLapsedTxnAmt() {
    return lapsedTxnAmt;
  }

  /**
   * Sets the value of the 'lapsedTxnAmt' field.
   * The total spend of transactions made by LAPSED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setLapsedTxnAmt(java.lang.Double value) {
    this.lapsedTxnAmt = value;
  }

  /**
   * Gets the value of the 'lapsedDiscAmt' field.
   * @return The total discount amount of transactions made by LAPSED customers in the given Balor time period.
   */
  public java.lang.Double getLapsedDiscAmt() {
    return lapsedDiscAmt;
  }

  /**
   * Sets the value of the 'lapsedDiscAmt' field.
   * The total discount amount of transactions made by LAPSED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setLapsedDiscAmt(java.lang.Double value) {
    this.lapsedDiscAmt = value;
  }

  /**
   * Gets the value of the 'lapsedItemQty' field.
   * @return The total number of items purchased by all LAPSED customers in the given Balor time period.
   */
  public java.lang.Long getLapsedItemQty() {
    return lapsedItemQty;
  }

  /**
   * Sets the value of the 'lapsedItemQty' field.
   * The total number of items purchased by all LAPSED customers in the given Balor time period.
   * @param value the value to set.
   */
  public void setLapsedItemQty(java.lang.Long value) {
    this.lapsedItemQty = value;
  }

  /**
   * Gets the value of the 'lapsedCustSpendAvg' field.
   * @return The average sales per LAPSED customer in the given time period.
   */
  public java.lang.Double getLapsedCustSpendAvg() {
    return lapsedCustSpendAvg;
  }

  /**
   * Sets the value of the 'lapsedCustSpendAvg' field.
   * The average sales per LAPSED customer in the given time period.
   * @param value the value to set.
   */
  public void setLapsedCustSpendAvg(java.lang.Double value) {
    this.lapsedCustSpendAvg = value;
  }

  /**
   * Gets the value of the 'lapsedCustVisitAvg' field.
   * @return The average number of visits per LAPSED customer in the given time period.
   */
  public java.lang.Double getLapsedCustVisitAvg() {
    return lapsedCustVisitAvg;
  }

  /**
   * Sets the value of the 'lapsedCustVisitAvg' field.
   * The average number of visits per LAPSED customer in the given time period.
   * @param value the value to set.
   */
  public void setLapsedCustVisitAvg(java.lang.Double value) {
    this.lapsedCustVisitAvg = value;
  }

  /**
   * Gets the value of the 'lapsedCustItemAvg' field.
   * @return The average number of purchased items per LAPSED customer in the given time period.
   */
  public java.lang.Double getLapsedCustItemAvg() {
    return lapsedCustItemAvg;
  }

  /**
   * Sets the value of the 'lapsedCustItemAvg' field.
   * The average number of purchased items per LAPSED customer in the given time period.
   * @param value the value to set.
   */
  public void setLapsedCustItemAvg(java.lang.Double value) {
    this.lapsedCustItemAvg = value;
  }

  /**
   * Gets the value of the 'lapsedCustDiscAvg' field.
   * @return The average discount amount per LAPSED customer in the given time period.
   */
  public java.lang.Double getLapsedCustDiscAvg() {
    return lapsedCustDiscAvg;
  }

  /**
   * Sets the value of the 'lapsedCustDiscAvg' field.
   * The average discount amount per LAPSED customer in the given time period.
   * @param value the value to set.
   */
  public void setLapsedCustDiscAvg(java.lang.Double value) {
    this.lapsedCustDiscAvg = value;
  }

  /**
   * Gets the value of the 'lapsedVisitSpendAvg' field.
   * @return The average sales per visit for LAPSED customers in the given time period.
   */
  public java.lang.Double getLapsedVisitSpendAvg() {
    return lapsedVisitSpendAvg;
  }

  /**
   * Sets the value of the 'lapsedVisitSpendAvg' field.
   * The average sales per visit for LAPSED customers in the given time period.
   * @param value the value to set.
   */
  public void setLapsedVisitSpendAvg(java.lang.Double value) {
    this.lapsedVisitSpendAvg = value;
  }

  /**
   * Gets the value of the 'lapsedVisitDiscAvg' field.
   * @return The average discount amount per visit for LAPSED customers in the given time period.
   */
  public java.lang.Double getLapsedVisitDiscAvg() {
    return lapsedVisitDiscAvg;
  }

  /**
   * Sets the value of the 'lapsedVisitDiscAvg' field.
   * The average discount amount per visit for LAPSED customers in the given time period.
   * @param value the value to set.
   */
  public void setLapsedVisitDiscAvg(java.lang.Double value) {
    this.lapsedVisitDiscAvg = value;
  }

  /**
   * Gets the value of the 'lapsedVisitItemAvg' field.
   * @return The average number of purchased items per visit for LAPSED customers in the given time period.
   */
  public java.lang.Double getLapsedVisitItemAvg() {
    return lapsedVisitItemAvg;
  }

  /**
   * Sets the value of the 'lapsedVisitItemAvg' field.
   * The average number of purchased items per visit for LAPSED customers in the given time period.
   * @param value the value to set.
   */
  public void setLapsedVisitItemAvg(java.lang.Double value) {
    this.lapsedVisitItemAvg = value;
  }

  /**
   * Gets the value of the 'custBalor' field.
   * @return The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
   */
  public java.lang.Double getCustBalor() {
    return custBalor;
  }

  /**
   * Sets the value of the 'custBalor' field.
   * The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
   * @param value the value to set.
   */
  public void setCustBalor(java.lang.Double value) {
    this.custBalor = value;
  }

  /**
   * Gets the value of the 'txnBalor' field.
   * @return The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
   */
  public java.lang.Double getTxnBalor() {
    return txnBalor;
  }

  /**
   * Sets the value of the 'txnBalor' field.
   * The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
   * @param value the value to set.
   */
  public void setTxnBalor(java.lang.Double value) {
    this.txnBalor = value;
  }

  /**
   * Gets the value of the 'spendBalor' field.
   * @return The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
   */
  public java.lang.Double getSpendBalor() {
    return spendBalor;
  }

  /**
   * Sets the value of the 'spendBalor' field.
   * The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
   * @param value the value to set.
   */
  public void setSpendBalor(java.lang.Double value) {
    this.spendBalor = value;
  }

  /**
   * Gets the value of the 'retention' field.
   * @return The retention rate: (Returning in (t))/(new + react + return in (t-1))
   */
  public java.lang.Double getRetention() {
    return retention;
  }

  /**
   * Sets the value of the 'retention' field.
   * The retention rate: (Returning in (t))/(new + react + return in (t-1))
   * @param value the value to set.
   */
  public void setRetention(java.lang.Double value) {
    this.retention = value;
  }

  /**
   * Gets the value of the 'retentionGrowth' field.
   * @return The retention growth rate from t-1 to t: [(Retention(t) - Retention(t-1)/Retention(t-1)] * 100
   */
  public java.lang.Double getRetentionGrowth() {
    return retentionGrowth;
  }

  /**
   * Sets the value of the 'retentionGrowth' field.
   * The retention growth rate from t-1 to t: [(Retention(t) - Retention(t-1)/Retention(t-1)] * 100
   * @param value the value to set.
   */
  public void setRetentionGrowth(java.lang.Double value) {
    this.retentionGrowth = value;
  }

  /**
   * Gets the value of the 'returnNewSales' field.
   * @return Total sales in (t) for customers that were NEW in (t-1) and RETURNING in (t)
   */
  public java.lang.Double getReturnNewSales() {
    return returnNewSales;
  }

  /**
   * Sets the value of the 'returnNewSales' field.
   * Total sales in (t) for customers that were NEW in (t-1) and RETURNING in (t)
   * @param value the value to set.
   */
  public void setReturnNewSales(java.lang.Double value) {
    this.returnNewSales = value;
  }

  /**
   * Gets the value of the 'returnNewTxn' field.
   * @return Total number of transactions in (t) for customers that were NEW in (t-1) and RETURNING in (t)
   */
  public java.lang.Long getReturnNewTxn() {
    return returnNewTxn;
  }

  /**
   * Sets the value of the 'returnNewTxn' field.
   * Total number of transactions in (t) for customers that were NEW in (t-1) and RETURNING in (t)
   * @param value the value to set.
   */
  public void setReturnNewTxn(java.lang.Long value) {
    this.returnNewTxn = value;
  }

  /**
   * Gets the value of the 'returnNewCust' field.
   * @return Total customer count in (t) that were NEW in (t-1) and RETURNING in (t)
   */
  public java.lang.Long getReturnNewCust() {
    return returnNewCust;
  }

  /**
   * Sets the value of the 'returnNewCust' field.
   * Total customer count in (t) that were NEW in (t-1) and RETURNING in (t)
   * @param value the value to set.
   */
  public void setReturnNewCust(java.lang.Long value) {
    this.returnNewCust = value;
  }

  /**
   * Gets the value of the 'returnReactSales' field.
   * @return Total sales in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
   */
  public java.lang.Double getReturnReactSales() {
    return returnReactSales;
  }

  /**
   * Sets the value of the 'returnReactSales' field.
   * Total sales in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
   * @param value the value to set.
   */
  public void setReturnReactSales(java.lang.Double value) {
    this.returnReactSales = value;
  }

  /**
   * Gets the value of the 'returnReactTxn' field.
   * @return Total number of transactions in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
   */
  public java.lang.Long getReturnReactTxn() {
    return returnReactTxn;
  }

  /**
   * Sets the value of the 'returnReactTxn' field.
   * Total number of transactions in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
   * @param value the value to set.
   */
  public void setReturnReactTxn(java.lang.Long value) {
    this.returnReactTxn = value;
  }

  /**
   * Gets the value of the 'returnReactCust' field.
   * @return Total customers in (t) that were REACTIVATED in (t-1) and RETURNING in (t)
   */
  public java.lang.Long getReturnReactCust() {
    return returnReactCust;
  }

  /**
   * Sets the value of the 'returnReactCust' field.
   * Total customers in (t) that were REACTIVATED in (t-1) and RETURNING in (t)
   * @param value the value to set.
   */
  public void setReturnReactCust(java.lang.Long value) {
    this.returnReactCust = value;
  }

  /**
   * Gets the value of the 'returnReturnSales' field.
   * @return Total sales in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
   */
  public java.lang.Double getReturnReturnSales() {
    return returnReturnSales;
  }

  /**
   * Sets the value of the 'returnReturnSales' field.
   * Total sales in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
   * @param value the value to set.
   */
  public void setReturnReturnSales(java.lang.Double value) {
    this.returnReturnSales = value;
  }

  /**
   * Gets the value of the 'returnReturnTxn' field.
   * @return Total number of transactions in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
   */
  public java.lang.Long getReturnReturnTxn() {
    return returnReturnTxn;
  }

  /**
   * Sets the value of the 'returnReturnTxn' field.
   * Total number of transactions in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
   * @param value the value to set.
   */
  public void setReturnReturnTxn(java.lang.Long value) {
    this.returnReturnTxn = value;
  }

  /**
   * Gets the value of the 'returnReturnCust' field.
   * @return Total customers in (t) that were RETURNING in (t-1) and RETURNING in (t)
   */
  public java.lang.Long getReturnReturnCust() {
    return returnReturnCust;
  }

  /**
   * Sets the value of the 'returnReturnCust' field.
   * Total customers in (t) that were RETURNING in (t-1) and RETURNING in (t)
   * @param value the value to set.
   */
  public void setReturnReturnCust(java.lang.Long value) {
    this.returnReturnCust = value;
  }

  /**
   * Gets the value of the 'ttlSalesLift' field.
   * @return Lift based on TOTAL sales: returnTxnAmt/(returnNewSales + returnReactSales + returnReturnSales)
   */
  public java.lang.Double getTtlSalesLift() {
    return ttlSalesLift;
  }

  /**
   * Sets the value of the 'ttlSalesLift' field.
   * Lift based on TOTAL sales: returnTxnAmt/(returnNewSales + returnReactSales + returnReturnSales)
   * @param value the value to set.
   */
  public void setTtlSalesLift(java.lang.Double value) {
    this.ttlSalesLift = value;
  }

  /**
   * Gets the value of the 'avgSalesLift' field.
   * @return Lift based on AVG sales per cust: (returnTxnAmt/returnCustCount) / [(returnNewSales + returnReactSales + returnReturnSales) / (returnNewCust + returnReactCust + returnReturnCust)]
   */
  public java.lang.Double getAvgSalesLift() {
    return avgSalesLift;
  }

  /**
   * Sets the value of the 'avgSalesLift' field.
   * Lift based on AVG sales per cust: (returnTxnAmt/returnCustCount) / [(returnNewSales + returnReactSales + returnReturnSales) / (returnNewCust + returnReactCust + returnReturnCust)]
   * @param value the value to set.
   */
  public void setAvgSalesLift(java.lang.Double value) {
    this.avgSalesLift = value;
  }

  /**
   * Gets the value of the 'ttlTxnLift' field.
   * @return Lift based on TOTAL Txns: returnTxnCount/(returnNewTxn + returnReactTxn + returnReturnTxn)
   */
  public java.lang.Double getTtlTxnLift() {
    return ttlTxnLift;
  }

  /**
   * Sets the value of the 'ttlTxnLift' field.
   * Lift based on TOTAL Txns: returnTxnCount/(returnNewTxn + returnReactTxn + returnReturnTxn)
   * @param value the value to set.
   */
  public void setTtlTxnLift(java.lang.Double value) {
    this.ttlTxnLift = value;
  }

  /**
   * Gets the value of the 'avgTxnLift' field.
   * @return Lift based on AVG Txns per cust: (returnTxnCount/returnCustCount) / [(returnNewTxn + returnReactTxn + returnReturnTxn) / (returnNewCust + returnReactCust + returnReturnCust)]
   */
  public java.lang.Double getAvgTxnLift() {
    return avgTxnLift;
  }

  /**
   * Sets the value of the 'avgTxnLift' field.
   * Lift based on AVG Txns per cust: (returnTxnCount/returnCustCount) / [(returnNewTxn + returnReactTxn + returnReturnTxn) / (returnNewCust + returnReactCust + returnReturnCust)]
   * @param value the value to set.
   */
  public void setAvgTxnLift(java.lang.Double value) {
    this.avgTxnLift = value;
  }

  /**
   * Creates a new TimePeriodData RecordBuilder.
   * @return A new TimePeriodData RecordBuilder
   */
  public static com.brierley.avro.schemas.TimePeriodData.Builder newBuilder() {
    return new com.brierley.avro.schemas.TimePeriodData.Builder();
  }

  /**
   * Creates a new TimePeriodData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TimePeriodData RecordBuilder
   */
  public static com.brierley.avro.schemas.TimePeriodData.Builder newBuilder(com.brierley.avro.schemas.TimePeriodData.Builder other) {
    return new com.brierley.avro.schemas.TimePeriodData.Builder(other);
  }

  /**
   * Creates a new TimePeriodData RecordBuilder by copying an existing TimePeriodData instance.
   * @param other The existing instance to copy.
   * @return A new TimePeriodData RecordBuilder
   */
  public static com.brierley.avro.schemas.TimePeriodData.Builder newBuilder(com.brierley.avro.schemas.TimePeriodData other) {
    return new com.brierley.avro.schemas.TimePeriodData.Builder(other);
  }

  /**
   * RecordBuilder for TimePeriodData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TimePeriodData>
    implements org.apache.avro.data.RecordBuilder<TimePeriodData> {

    /** The Balor time period, calculated ascending */
    private int timePeriod;
    /** the earliest date for each time period, month will be formatted 'MMM yyyy' and weeks will be formatted 'MM/dd/yyyy', nullable to allow previous schema to appear in topic. */
    private java.lang.CharSequence anchorDate;
    /** The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods */
    private long newCustCount;
    /** The number of transactions made by NEW customers in the given Balor time period. */
    private long newTxnCount;
    /** The total spend of transactions made by NEW customers in the given Balor time period. */
    private double newTxnAmt;
    /** The total discount amount of transactions made by NEW customers in the given Balor time period. */
    private double newDiscAmt;
    /** The total number of items purchased by all NEW customers in the given Balor time period. */
    private long newItemQty;
    /** The average sales per NEW customer in the given time period. */
    private double newCustSpendAvg;
    /** The average number of visits per NEW customer in the given time period. */
    private double newCustVisitAvg;
    /** The average number of purchased items per NEW customer in the given time period. */
    private double newCustItemAvg;
    /** The average discount amount per NEW customer in the given time period. */
    private double newCustDiscAvg;
    /** The average sales per visit for NEW customers in the given time period. */
    private double newVisitSpendAvg;
    /** The average discount amount per visit for NEW customers in the given time period. */
    private double newVisitDiscAvg;
    /** The average number of purchased items per visit for NEW customers in the given time period. */
    private double newVisitItemAvg;
    /** The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period */
    private long reactCustCount;
    /** The number of transactions made by REACTIVATED customers in the given Balor time period. */
    private long reactTxnCount;
    /** The total spend of transactions made by REACTIVATED customers in the given Balor time period. */
    private double reactTxnAmt;
    /** The total discount amount of transactions made by REACTIVATED customers in the given Balor time period. */
    private double reactDiscAmt;
    /** The total number of items purchased by all REACTIVATED customers in the given Balor time period. */
    private long reactItemQty;
    /** The average sales per REACTIVATED customer in the given time period. */
    private double reactCustSpendAvg;
    /** The average number of visits per REACTIVATED customer in the given time period. */
    private double reactCustVisitAvg;
    /** The average number of purchased items per REACTIVATED customer in the given time period. */
    private double reactCustItemAvg;
    /** The average discount amount per REACTIVATED customer in the given time period. */
    private double reactCustDiscAvg;
    /** The average sales per visit for REACTIVATED customers in the given time period. */
    private double reactVisitSpendAvg;
    /** The average discount amount per visit for REACTIVATED customers in the given time period. */
    private double reactVisitDiscAvg;
    /** The average number of purchased items per visit for REACTIVATED customers in the given time period. */
    private double reactVisitItemAvg;
    /** The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3 */
    private long returnCustCount;
    /** The number of transactions made by RETURNING customers in the given Balor time period. */
    private long returnTxnCount;
    /** The total spend of transactions made by RETURNING customers in the given Balor time period. */
    private double returnTxnAmt;
    /** The total discount amount of transactions made by RETURNING customers in the given Balor time period. */
    private double returnDiscAmt;
    /** The total number of items purchased by all RETURNING customers in the given Balor time period. */
    private long returnItemQty;
    /** The average sales per RETURNING customer in the given time period. */
    private double returnCustSpendAvg;
    /** The average number of visits per RETURNING customer in the given time period. */
    private double returnCustVisitAvg;
    /** The average number of purchased items per RETURNING customer in the given time period. */
    private double returnCustItemAvg;
    /** The average discount amount per RETURNING customer in the given time period. */
    private double returnCustDiscAvg;
    /** The average sales per visit for RETURNING customers in the given time period. */
    private double returnVisitSpendAvg;
    /** The average discount amount per visit for RETURNING customers in the given time period. */
    private double returnVisitDiscAvg;
    /** The average number of purchased items per visit for RETURNING customers in the given time period. */
    private double returnVisitItemAvg;
    /** The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period */
    private long lapsedCustCount;
    /** The number of transactions made by LAPSED customers in the given Balor time period. */
    private long lapsedTxnCount;
    /** The total spend of transactions made by LAPSED customers in the given Balor time period. */
    private double lapsedTxnAmt;
    /** The total discount amount of transactions made by LAPSED customers in the given Balor time period. */
    private double lapsedDiscAmt;
    /** The total number of items purchased by all LAPSED customers in the given Balor time period. */
    private long lapsedItemQty;
    /** The average sales per LAPSED customer in the given time period. */
    private double lapsedCustSpendAvg;
    /** The average number of visits per LAPSED customer in the given time period. */
    private double lapsedCustVisitAvg;
    /** The average number of purchased items per LAPSED customer in the given time period. */
    private double lapsedCustItemAvg;
    /** The average discount amount per LAPSED customer in the given time period. */
    private double lapsedCustDiscAvg;
    /** The average sales per visit for LAPSED customers in the given time period. */
    private double lapsedVisitSpendAvg;
    /** The average discount amount per visit for LAPSED customers in the given time period. */
    private double lapsedVisitDiscAvg;
    /** The average number of purchased items per visit for LAPSED customers in the given time period. */
    private double lapsedVisitItemAvg;
    /** The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed */
    private double custBalor;
    /** The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed */
    private double txnBalor;
    /** The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed */
    private double spendBalor;
    /** The retention rate: (Returning in (t))/(new + react + return in (t-1)) */
    private double retention;
    /** The retention growth rate from t-1 to t: [(Retention(t) - Retention(t-1)/Retention(t-1)] * 100 */
    private java.lang.Double retentionGrowth;
    /** Total sales in (t) for customers that were NEW in (t-1) and RETURNING in (t) */
    private java.lang.Double returnNewSales;
    /** Total number of transactions in (t) for customers that were NEW in (t-1) and RETURNING in (t) */
    private java.lang.Long returnNewTxn;
    /** Total customer count in (t) that were NEW in (t-1) and RETURNING in (t) */
    private java.lang.Long returnNewCust;
    /** Total sales in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t) */
    private java.lang.Double returnReactSales;
    /** Total number of transactions in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t) */
    private java.lang.Long returnReactTxn;
    /** Total customers in (t) that were REACTIVATED in (t-1) and RETURNING in (t) */
    private java.lang.Long returnReactCust;
    /** Total sales in (t) for customers that were RETURNING in (t-1) and RETURNING in (t) */
    private java.lang.Double returnReturnSales;
    /** Total number of transactions in (t) for customers that were RETURNING in (t-1) and RETURNING in (t) */
    private java.lang.Long returnReturnTxn;
    /** Total customers in (t) that were RETURNING in (t-1) and RETURNING in (t) */
    private java.lang.Long returnReturnCust;
    /** Lift based on TOTAL sales: returnTxnAmt/(returnNewSales + returnReactSales + returnReturnSales) */
    private java.lang.Double ttlSalesLift;
    /** Lift based on AVG sales per cust: (returnTxnAmt/returnCustCount) / [(returnNewSales + returnReactSales + returnReturnSales) / (returnNewCust + returnReactCust + returnReturnCust)] */
    private java.lang.Double avgSalesLift;
    /** Lift based on TOTAL Txns: returnTxnCount/(returnNewTxn + returnReactTxn + returnReturnTxn) */
    private java.lang.Double ttlTxnLift;
    /** Lift based on AVG Txns per cust: (returnTxnCount/returnCustCount) / [(returnNewTxn + returnReactTxn + returnReturnTxn) / (returnNewCust + returnReactCust + returnReturnCust)] */
    private java.lang.Double avgTxnLift;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.TimePeriodData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.anchorDate)) {
        this.anchorDate = data().deepCopy(fields()[1].schema(), other.anchorDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.newCustCount)) {
        this.newCustCount = data().deepCopy(fields()[2].schema(), other.newCustCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.newTxnCount)) {
        this.newTxnCount = data().deepCopy(fields()[3].schema(), other.newTxnCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.newTxnAmt)) {
        this.newTxnAmt = data().deepCopy(fields()[4].schema(), other.newTxnAmt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.newDiscAmt)) {
        this.newDiscAmt = data().deepCopy(fields()[5].schema(), other.newDiscAmt);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.newItemQty)) {
        this.newItemQty = data().deepCopy(fields()[6].schema(), other.newItemQty);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.newCustSpendAvg)) {
        this.newCustSpendAvg = data().deepCopy(fields()[7].schema(), other.newCustSpendAvg);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.newCustVisitAvg)) {
        this.newCustVisitAvg = data().deepCopy(fields()[8].schema(), other.newCustVisitAvg);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.newCustItemAvg)) {
        this.newCustItemAvg = data().deepCopy(fields()[9].schema(), other.newCustItemAvg);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.newCustDiscAvg)) {
        this.newCustDiscAvg = data().deepCopy(fields()[10].schema(), other.newCustDiscAvg);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.newVisitSpendAvg)) {
        this.newVisitSpendAvg = data().deepCopy(fields()[11].schema(), other.newVisitSpendAvg);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.newVisitDiscAvg)) {
        this.newVisitDiscAvg = data().deepCopy(fields()[12].schema(), other.newVisitDiscAvg);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.newVisitItemAvg)) {
        this.newVisitItemAvg = data().deepCopy(fields()[13].schema(), other.newVisitItemAvg);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.reactCustCount)) {
        this.reactCustCount = data().deepCopy(fields()[14].schema(), other.reactCustCount);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.reactTxnCount)) {
        this.reactTxnCount = data().deepCopy(fields()[15].schema(), other.reactTxnCount);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.reactTxnAmt)) {
        this.reactTxnAmt = data().deepCopy(fields()[16].schema(), other.reactTxnAmt);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.reactDiscAmt)) {
        this.reactDiscAmt = data().deepCopy(fields()[17].schema(), other.reactDiscAmt);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.reactItemQty)) {
        this.reactItemQty = data().deepCopy(fields()[18].schema(), other.reactItemQty);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.reactCustSpendAvg)) {
        this.reactCustSpendAvg = data().deepCopy(fields()[19].schema(), other.reactCustSpendAvg);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.reactCustVisitAvg)) {
        this.reactCustVisitAvg = data().deepCopy(fields()[20].schema(), other.reactCustVisitAvg);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.reactCustItemAvg)) {
        this.reactCustItemAvg = data().deepCopy(fields()[21].schema(), other.reactCustItemAvg);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.reactCustDiscAvg)) {
        this.reactCustDiscAvg = data().deepCopy(fields()[22].schema(), other.reactCustDiscAvg);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.reactVisitSpendAvg)) {
        this.reactVisitSpendAvg = data().deepCopy(fields()[23].schema(), other.reactVisitSpendAvg);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.reactVisitDiscAvg)) {
        this.reactVisitDiscAvg = data().deepCopy(fields()[24].schema(), other.reactVisitDiscAvg);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.reactVisitItemAvg)) {
        this.reactVisitItemAvg = data().deepCopy(fields()[25].schema(), other.reactVisitItemAvg);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.returnCustCount)) {
        this.returnCustCount = data().deepCopy(fields()[26].schema(), other.returnCustCount);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.returnTxnCount)) {
        this.returnTxnCount = data().deepCopy(fields()[27].schema(), other.returnTxnCount);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.returnTxnAmt)) {
        this.returnTxnAmt = data().deepCopy(fields()[28].schema(), other.returnTxnAmt);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.returnDiscAmt)) {
        this.returnDiscAmt = data().deepCopy(fields()[29].schema(), other.returnDiscAmt);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.returnItemQty)) {
        this.returnItemQty = data().deepCopy(fields()[30].schema(), other.returnItemQty);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.returnCustSpendAvg)) {
        this.returnCustSpendAvg = data().deepCopy(fields()[31].schema(), other.returnCustSpendAvg);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.returnCustVisitAvg)) {
        this.returnCustVisitAvg = data().deepCopy(fields()[32].schema(), other.returnCustVisitAvg);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.returnCustItemAvg)) {
        this.returnCustItemAvg = data().deepCopy(fields()[33].schema(), other.returnCustItemAvg);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.returnCustDiscAvg)) {
        this.returnCustDiscAvg = data().deepCopy(fields()[34].schema(), other.returnCustDiscAvg);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.returnVisitSpendAvg)) {
        this.returnVisitSpendAvg = data().deepCopy(fields()[35].schema(), other.returnVisitSpendAvg);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.returnVisitDiscAvg)) {
        this.returnVisitDiscAvg = data().deepCopy(fields()[36].schema(), other.returnVisitDiscAvg);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.returnVisitItemAvg)) {
        this.returnVisitItemAvg = data().deepCopy(fields()[37].schema(), other.returnVisitItemAvg);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.lapsedCustCount)) {
        this.lapsedCustCount = data().deepCopy(fields()[38].schema(), other.lapsedCustCount);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.lapsedTxnCount)) {
        this.lapsedTxnCount = data().deepCopy(fields()[39].schema(), other.lapsedTxnCount);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.lapsedTxnAmt)) {
        this.lapsedTxnAmt = data().deepCopy(fields()[40].schema(), other.lapsedTxnAmt);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.lapsedDiscAmt)) {
        this.lapsedDiscAmt = data().deepCopy(fields()[41].schema(), other.lapsedDiscAmt);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.lapsedItemQty)) {
        this.lapsedItemQty = data().deepCopy(fields()[42].schema(), other.lapsedItemQty);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.lapsedCustSpendAvg)) {
        this.lapsedCustSpendAvg = data().deepCopy(fields()[43].schema(), other.lapsedCustSpendAvg);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.lapsedCustVisitAvg)) {
        this.lapsedCustVisitAvg = data().deepCopy(fields()[44].schema(), other.lapsedCustVisitAvg);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.lapsedCustItemAvg)) {
        this.lapsedCustItemAvg = data().deepCopy(fields()[45].schema(), other.lapsedCustItemAvg);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.lapsedCustDiscAvg)) {
        this.lapsedCustDiscAvg = data().deepCopy(fields()[46].schema(), other.lapsedCustDiscAvg);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.lapsedVisitSpendAvg)) {
        this.lapsedVisitSpendAvg = data().deepCopy(fields()[47].schema(), other.lapsedVisitSpendAvg);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.lapsedVisitDiscAvg)) {
        this.lapsedVisitDiscAvg = data().deepCopy(fields()[48].schema(), other.lapsedVisitDiscAvg);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.lapsedVisitItemAvg)) {
        this.lapsedVisitItemAvg = data().deepCopy(fields()[49].schema(), other.lapsedVisitItemAvg);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.custBalor)) {
        this.custBalor = data().deepCopy(fields()[50].schema(), other.custBalor);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.txnBalor)) {
        this.txnBalor = data().deepCopy(fields()[51].schema(), other.txnBalor);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.spendBalor)) {
        this.spendBalor = data().deepCopy(fields()[52].schema(), other.spendBalor);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.retention)) {
        this.retention = data().deepCopy(fields()[53].schema(), other.retention);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.retentionGrowth)) {
        this.retentionGrowth = data().deepCopy(fields()[54].schema(), other.retentionGrowth);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.returnNewSales)) {
        this.returnNewSales = data().deepCopy(fields()[55].schema(), other.returnNewSales);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.returnNewTxn)) {
        this.returnNewTxn = data().deepCopy(fields()[56].schema(), other.returnNewTxn);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.returnNewCust)) {
        this.returnNewCust = data().deepCopy(fields()[57].schema(), other.returnNewCust);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.returnReactSales)) {
        this.returnReactSales = data().deepCopy(fields()[58].schema(), other.returnReactSales);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.returnReactTxn)) {
        this.returnReactTxn = data().deepCopy(fields()[59].schema(), other.returnReactTxn);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.returnReactCust)) {
        this.returnReactCust = data().deepCopy(fields()[60].schema(), other.returnReactCust);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.returnReturnSales)) {
        this.returnReturnSales = data().deepCopy(fields()[61].schema(), other.returnReturnSales);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.returnReturnTxn)) {
        this.returnReturnTxn = data().deepCopy(fields()[62].schema(), other.returnReturnTxn);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.returnReturnCust)) {
        this.returnReturnCust = data().deepCopy(fields()[63].schema(), other.returnReturnCust);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.ttlSalesLift)) {
        this.ttlSalesLift = data().deepCopy(fields()[64].schema(), other.ttlSalesLift);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.avgSalesLift)) {
        this.avgSalesLift = data().deepCopy(fields()[65].schema(), other.avgSalesLift);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.ttlTxnLift)) {
        this.ttlTxnLift = data().deepCopy(fields()[66].schema(), other.ttlTxnLift);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.avgTxnLift)) {
        this.avgTxnLift = data().deepCopy(fields()[67].schema(), other.avgTxnLift);
        fieldSetFlags()[67] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TimePeriodData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.TimePeriodData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.anchorDate)) {
        this.anchorDate = data().deepCopy(fields()[1].schema(), other.anchorDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.newCustCount)) {
        this.newCustCount = data().deepCopy(fields()[2].schema(), other.newCustCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.newTxnCount)) {
        this.newTxnCount = data().deepCopy(fields()[3].schema(), other.newTxnCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.newTxnAmt)) {
        this.newTxnAmt = data().deepCopy(fields()[4].schema(), other.newTxnAmt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.newDiscAmt)) {
        this.newDiscAmt = data().deepCopy(fields()[5].schema(), other.newDiscAmt);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.newItemQty)) {
        this.newItemQty = data().deepCopy(fields()[6].schema(), other.newItemQty);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.newCustSpendAvg)) {
        this.newCustSpendAvg = data().deepCopy(fields()[7].schema(), other.newCustSpendAvg);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.newCustVisitAvg)) {
        this.newCustVisitAvg = data().deepCopy(fields()[8].schema(), other.newCustVisitAvg);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.newCustItemAvg)) {
        this.newCustItemAvg = data().deepCopy(fields()[9].schema(), other.newCustItemAvg);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.newCustDiscAvg)) {
        this.newCustDiscAvg = data().deepCopy(fields()[10].schema(), other.newCustDiscAvg);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.newVisitSpendAvg)) {
        this.newVisitSpendAvg = data().deepCopy(fields()[11].schema(), other.newVisitSpendAvg);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.newVisitDiscAvg)) {
        this.newVisitDiscAvg = data().deepCopy(fields()[12].schema(), other.newVisitDiscAvg);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.newVisitItemAvg)) {
        this.newVisitItemAvg = data().deepCopy(fields()[13].schema(), other.newVisitItemAvg);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.reactCustCount)) {
        this.reactCustCount = data().deepCopy(fields()[14].schema(), other.reactCustCount);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.reactTxnCount)) {
        this.reactTxnCount = data().deepCopy(fields()[15].schema(), other.reactTxnCount);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.reactTxnAmt)) {
        this.reactTxnAmt = data().deepCopy(fields()[16].schema(), other.reactTxnAmt);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.reactDiscAmt)) {
        this.reactDiscAmt = data().deepCopy(fields()[17].schema(), other.reactDiscAmt);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.reactItemQty)) {
        this.reactItemQty = data().deepCopy(fields()[18].schema(), other.reactItemQty);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.reactCustSpendAvg)) {
        this.reactCustSpendAvg = data().deepCopy(fields()[19].schema(), other.reactCustSpendAvg);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.reactCustVisitAvg)) {
        this.reactCustVisitAvg = data().deepCopy(fields()[20].schema(), other.reactCustVisitAvg);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.reactCustItemAvg)) {
        this.reactCustItemAvg = data().deepCopy(fields()[21].schema(), other.reactCustItemAvg);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.reactCustDiscAvg)) {
        this.reactCustDiscAvg = data().deepCopy(fields()[22].schema(), other.reactCustDiscAvg);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.reactVisitSpendAvg)) {
        this.reactVisitSpendAvg = data().deepCopy(fields()[23].schema(), other.reactVisitSpendAvg);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.reactVisitDiscAvg)) {
        this.reactVisitDiscAvg = data().deepCopy(fields()[24].schema(), other.reactVisitDiscAvg);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.reactVisitItemAvg)) {
        this.reactVisitItemAvg = data().deepCopy(fields()[25].schema(), other.reactVisitItemAvg);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.returnCustCount)) {
        this.returnCustCount = data().deepCopy(fields()[26].schema(), other.returnCustCount);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.returnTxnCount)) {
        this.returnTxnCount = data().deepCopy(fields()[27].schema(), other.returnTxnCount);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.returnTxnAmt)) {
        this.returnTxnAmt = data().deepCopy(fields()[28].schema(), other.returnTxnAmt);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.returnDiscAmt)) {
        this.returnDiscAmt = data().deepCopy(fields()[29].schema(), other.returnDiscAmt);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.returnItemQty)) {
        this.returnItemQty = data().deepCopy(fields()[30].schema(), other.returnItemQty);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.returnCustSpendAvg)) {
        this.returnCustSpendAvg = data().deepCopy(fields()[31].schema(), other.returnCustSpendAvg);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.returnCustVisitAvg)) {
        this.returnCustVisitAvg = data().deepCopy(fields()[32].schema(), other.returnCustVisitAvg);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.returnCustItemAvg)) {
        this.returnCustItemAvg = data().deepCopy(fields()[33].schema(), other.returnCustItemAvg);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.returnCustDiscAvg)) {
        this.returnCustDiscAvg = data().deepCopy(fields()[34].schema(), other.returnCustDiscAvg);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.returnVisitSpendAvg)) {
        this.returnVisitSpendAvg = data().deepCopy(fields()[35].schema(), other.returnVisitSpendAvg);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.returnVisitDiscAvg)) {
        this.returnVisitDiscAvg = data().deepCopy(fields()[36].schema(), other.returnVisitDiscAvg);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.returnVisitItemAvg)) {
        this.returnVisitItemAvg = data().deepCopy(fields()[37].schema(), other.returnVisitItemAvg);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.lapsedCustCount)) {
        this.lapsedCustCount = data().deepCopy(fields()[38].schema(), other.lapsedCustCount);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.lapsedTxnCount)) {
        this.lapsedTxnCount = data().deepCopy(fields()[39].schema(), other.lapsedTxnCount);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.lapsedTxnAmt)) {
        this.lapsedTxnAmt = data().deepCopy(fields()[40].schema(), other.lapsedTxnAmt);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.lapsedDiscAmt)) {
        this.lapsedDiscAmt = data().deepCopy(fields()[41].schema(), other.lapsedDiscAmt);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.lapsedItemQty)) {
        this.lapsedItemQty = data().deepCopy(fields()[42].schema(), other.lapsedItemQty);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.lapsedCustSpendAvg)) {
        this.lapsedCustSpendAvg = data().deepCopy(fields()[43].schema(), other.lapsedCustSpendAvg);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.lapsedCustVisitAvg)) {
        this.lapsedCustVisitAvg = data().deepCopy(fields()[44].schema(), other.lapsedCustVisitAvg);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.lapsedCustItemAvg)) {
        this.lapsedCustItemAvg = data().deepCopy(fields()[45].schema(), other.lapsedCustItemAvg);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.lapsedCustDiscAvg)) {
        this.lapsedCustDiscAvg = data().deepCopy(fields()[46].schema(), other.lapsedCustDiscAvg);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.lapsedVisitSpendAvg)) {
        this.lapsedVisitSpendAvg = data().deepCopy(fields()[47].schema(), other.lapsedVisitSpendAvg);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.lapsedVisitDiscAvg)) {
        this.lapsedVisitDiscAvg = data().deepCopy(fields()[48].schema(), other.lapsedVisitDiscAvg);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.lapsedVisitItemAvg)) {
        this.lapsedVisitItemAvg = data().deepCopy(fields()[49].schema(), other.lapsedVisitItemAvg);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.custBalor)) {
        this.custBalor = data().deepCopy(fields()[50].schema(), other.custBalor);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.txnBalor)) {
        this.txnBalor = data().deepCopy(fields()[51].schema(), other.txnBalor);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.spendBalor)) {
        this.spendBalor = data().deepCopy(fields()[52].schema(), other.spendBalor);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.retention)) {
        this.retention = data().deepCopy(fields()[53].schema(), other.retention);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.retentionGrowth)) {
        this.retentionGrowth = data().deepCopy(fields()[54].schema(), other.retentionGrowth);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.returnNewSales)) {
        this.returnNewSales = data().deepCopy(fields()[55].schema(), other.returnNewSales);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.returnNewTxn)) {
        this.returnNewTxn = data().deepCopy(fields()[56].schema(), other.returnNewTxn);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.returnNewCust)) {
        this.returnNewCust = data().deepCopy(fields()[57].schema(), other.returnNewCust);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.returnReactSales)) {
        this.returnReactSales = data().deepCopy(fields()[58].schema(), other.returnReactSales);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.returnReactTxn)) {
        this.returnReactTxn = data().deepCopy(fields()[59].schema(), other.returnReactTxn);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.returnReactCust)) {
        this.returnReactCust = data().deepCopy(fields()[60].schema(), other.returnReactCust);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.returnReturnSales)) {
        this.returnReturnSales = data().deepCopy(fields()[61].schema(), other.returnReturnSales);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.returnReturnTxn)) {
        this.returnReturnTxn = data().deepCopy(fields()[62].schema(), other.returnReturnTxn);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.returnReturnCust)) {
        this.returnReturnCust = data().deepCopy(fields()[63].schema(), other.returnReturnCust);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.ttlSalesLift)) {
        this.ttlSalesLift = data().deepCopy(fields()[64].schema(), other.ttlSalesLift);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.avgSalesLift)) {
        this.avgSalesLift = data().deepCopy(fields()[65].schema(), other.avgSalesLift);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.ttlTxnLift)) {
        this.ttlTxnLift = data().deepCopy(fields()[66].schema(), other.ttlTxnLift);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.avgTxnLift)) {
        this.avgTxnLift = data().deepCopy(fields()[67].schema(), other.avgTxnLift);
        fieldSetFlags()[67] = true;
      }
    }

    /**
      * Gets the value of the 'timePeriod' field.
      * The Balor time period, calculated ascending
      * @return The value.
      */
    public java.lang.Integer getTimePeriod() {
      return timePeriod;
    }

    /**
      * Sets the value of the 'timePeriod' field.
      * The Balor time period, calculated ascending
      * @param value The value of 'timePeriod'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setTimePeriod(int value) {
      validate(fields()[0], value);
      this.timePeriod = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timePeriod' field has been set.
      * The Balor time period, calculated ascending
      * @return True if the 'timePeriod' field has been set, false otherwise.
      */
    public boolean hasTimePeriod() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timePeriod' field.
      * The Balor time period, calculated ascending
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearTimePeriod() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'anchorDate' field.
      * the earliest date for each time period, month will be formatted 'MMM yyyy' and weeks will be formatted 'MM/dd/yyyy', nullable to allow previous schema to appear in topic.
      * @return The value.
      */
    public java.lang.CharSequence getAnchorDate() {
      return anchorDate;
    }

    /**
      * Sets the value of the 'anchorDate' field.
      * the earliest date for each time period, month will be formatted 'MMM yyyy' and weeks will be formatted 'MM/dd/yyyy', nullable to allow previous schema to appear in topic.
      * @param value The value of 'anchorDate'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setAnchorDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.anchorDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'anchorDate' field has been set.
      * the earliest date for each time period, month will be formatted 'MMM yyyy' and weeks will be formatted 'MM/dd/yyyy', nullable to allow previous schema to appear in topic.
      * @return True if the 'anchorDate' field has been set, false otherwise.
      */
    public boolean hasAnchorDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'anchorDate' field.
      * the earliest date for each time period, month will be formatted 'MMM yyyy' and weeks will be formatted 'MM/dd/yyyy', nullable to allow previous schema to appear in topic.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearAnchorDate() {
      anchorDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'newCustCount' field.
      * The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
      * @return The value.
      */
    public java.lang.Long getNewCustCount() {
      return newCustCount;
    }

    /**
      * Sets the value of the 'newCustCount' field.
      * The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
      * @param value The value of 'newCustCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewCustCount(long value) {
      validate(fields()[2], value);
      this.newCustCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'newCustCount' field has been set.
      * The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
      * @return True if the 'newCustCount' field has been set, false otherwise.
      */
    public boolean hasNewCustCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'newCustCount' field.
      * The count of customers that are considered new in the given Balor time period.  To be considered new the cust_id must not appear in the previous 2 cadence periods
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewCustCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'newTxnCount' field.
      * The number of transactions made by NEW customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getNewTxnCount() {
      return newTxnCount;
    }

    /**
      * Sets the value of the 'newTxnCount' field.
      * The number of transactions made by NEW customers in the given Balor time period.
      * @param value The value of 'newTxnCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewTxnCount(long value) {
      validate(fields()[3], value);
      this.newTxnCount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'newTxnCount' field has been set.
      * The number of transactions made by NEW customers in the given Balor time period.
      * @return True if the 'newTxnCount' field has been set, false otherwise.
      */
    public boolean hasNewTxnCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'newTxnCount' field.
      * The number of transactions made by NEW customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewTxnCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'newTxnAmt' field.
      * The total spend of transactions made by NEW customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getNewTxnAmt() {
      return newTxnAmt;
    }

    /**
      * Sets the value of the 'newTxnAmt' field.
      * The total spend of transactions made by NEW customers in the given Balor time period.
      * @param value The value of 'newTxnAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewTxnAmt(double value) {
      validate(fields()[4], value);
      this.newTxnAmt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'newTxnAmt' field has been set.
      * The total spend of transactions made by NEW customers in the given Balor time period.
      * @return True if the 'newTxnAmt' field has been set, false otherwise.
      */
    public boolean hasNewTxnAmt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'newTxnAmt' field.
      * The total spend of transactions made by NEW customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewTxnAmt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'newDiscAmt' field.
      * The total discount amount of transactions made by NEW customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getNewDiscAmt() {
      return newDiscAmt;
    }

    /**
      * Sets the value of the 'newDiscAmt' field.
      * The total discount amount of transactions made by NEW customers in the given Balor time period.
      * @param value The value of 'newDiscAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewDiscAmt(double value) {
      validate(fields()[5], value);
      this.newDiscAmt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'newDiscAmt' field has been set.
      * The total discount amount of transactions made by NEW customers in the given Balor time period.
      * @return True if the 'newDiscAmt' field has been set, false otherwise.
      */
    public boolean hasNewDiscAmt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'newDiscAmt' field.
      * The total discount amount of transactions made by NEW customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewDiscAmt() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'newItemQty' field.
      * The total number of items purchased by all NEW customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getNewItemQty() {
      return newItemQty;
    }

    /**
      * Sets the value of the 'newItemQty' field.
      * The total number of items purchased by all NEW customers in the given Balor time period.
      * @param value The value of 'newItemQty'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewItemQty(long value) {
      validate(fields()[6], value);
      this.newItemQty = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'newItemQty' field has been set.
      * The total number of items purchased by all NEW customers in the given Balor time period.
      * @return True if the 'newItemQty' field has been set, false otherwise.
      */
    public boolean hasNewItemQty() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'newItemQty' field.
      * The total number of items purchased by all NEW customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewItemQty() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'newCustSpendAvg' field.
      * The average sales per NEW customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getNewCustSpendAvg() {
      return newCustSpendAvg;
    }

    /**
      * Sets the value of the 'newCustSpendAvg' field.
      * The average sales per NEW customer in the given time period.
      * @param value The value of 'newCustSpendAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewCustSpendAvg(double value) {
      validate(fields()[7], value);
      this.newCustSpendAvg = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'newCustSpendAvg' field has been set.
      * The average sales per NEW customer in the given time period.
      * @return True if the 'newCustSpendAvg' field has been set, false otherwise.
      */
    public boolean hasNewCustSpendAvg() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'newCustSpendAvg' field.
      * The average sales per NEW customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewCustSpendAvg() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'newCustVisitAvg' field.
      * The average number of visits per NEW customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getNewCustVisitAvg() {
      return newCustVisitAvg;
    }

    /**
      * Sets the value of the 'newCustVisitAvg' field.
      * The average number of visits per NEW customer in the given time period.
      * @param value The value of 'newCustVisitAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewCustVisitAvg(double value) {
      validate(fields()[8], value);
      this.newCustVisitAvg = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'newCustVisitAvg' field has been set.
      * The average number of visits per NEW customer in the given time period.
      * @return True if the 'newCustVisitAvg' field has been set, false otherwise.
      */
    public boolean hasNewCustVisitAvg() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'newCustVisitAvg' field.
      * The average number of visits per NEW customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewCustVisitAvg() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'newCustItemAvg' field.
      * The average number of purchased items per NEW customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getNewCustItemAvg() {
      return newCustItemAvg;
    }

    /**
      * Sets the value of the 'newCustItemAvg' field.
      * The average number of purchased items per NEW customer in the given time period.
      * @param value The value of 'newCustItemAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewCustItemAvg(double value) {
      validate(fields()[9], value);
      this.newCustItemAvg = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'newCustItemAvg' field has been set.
      * The average number of purchased items per NEW customer in the given time period.
      * @return True if the 'newCustItemAvg' field has been set, false otherwise.
      */
    public boolean hasNewCustItemAvg() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'newCustItemAvg' field.
      * The average number of purchased items per NEW customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewCustItemAvg() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'newCustDiscAvg' field.
      * The average discount amount per NEW customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getNewCustDiscAvg() {
      return newCustDiscAvg;
    }

    /**
      * Sets the value of the 'newCustDiscAvg' field.
      * The average discount amount per NEW customer in the given time period.
      * @param value The value of 'newCustDiscAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewCustDiscAvg(double value) {
      validate(fields()[10], value);
      this.newCustDiscAvg = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'newCustDiscAvg' field has been set.
      * The average discount amount per NEW customer in the given time period.
      * @return True if the 'newCustDiscAvg' field has been set, false otherwise.
      */
    public boolean hasNewCustDiscAvg() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'newCustDiscAvg' field.
      * The average discount amount per NEW customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewCustDiscAvg() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'newVisitSpendAvg' field.
      * The average sales per visit for NEW customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getNewVisitSpendAvg() {
      return newVisitSpendAvg;
    }

    /**
      * Sets the value of the 'newVisitSpendAvg' field.
      * The average sales per visit for NEW customers in the given time period.
      * @param value The value of 'newVisitSpendAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewVisitSpendAvg(double value) {
      validate(fields()[11], value);
      this.newVisitSpendAvg = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'newVisitSpendAvg' field has been set.
      * The average sales per visit for NEW customers in the given time period.
      * @return True if the 'newVisitSpendAvg' field has been set, false otherwise.
      */
    public boolean hasNewVisitSpendAvg() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'newVisitSpendAvg' field.
      * The average sales per visit for NEW customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewVisitSpendAvg() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'newVisitDiscAvg' field.
      * The average discount amount per visit for NEW customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getNewVisitDiscAvg() {
      return newVisitDiscAvg;
    }

    /**
      * Sets the value of the 'newVisitDiscAvg' field.
      * The average discount amount per visit for NEW customers in the given time period.
      * @param value The value of 'newVisitDiscAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewVisitDiscAvg(double value) {
      validate(fields()[12], value);
      this.newVisitDiscAvg = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'newVisitDiscAvg' field has been set.
      * The average discount amount per visit for NEW customers in the given time period.
      * @return True if the 'newVisitDiscAvg' field has been set, false otherwise.
      */
    public boolean hasNewVisitDiscAvg() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'newVisitDiscAvg' field.
      * The average discount amount per visit for NEW customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewVisitDiscAvg() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'newVisitItemAvg' field.
      * The average number of purchased items per visit for NEW customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getNewVisitItemAvg() {
      return newVisitItemAvg;
    }

    /**
      * Sets the value of the 'newVisitItemAvg' field.
      * The average number of purchased items per visit for NEW customers in the given time period.
      * @param value The value of 'newVisitItemAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setNewVisitItemAvg(double value) {
      validate(fields()[13], value);
      this.newVisitItemAvg = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'newVisitItemAvg' field has been set.
      * The average number of purchased items per visit for NEW customers in the given time period.
      * @return True if the 'newVisitItemAvg' field has been set, false otherwise.
      */
    public boolean hasNewVisitItemAvg() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'newVisitItemAvg' field.
      * The average number of purchased items per visit for NEW customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearNewVisitItemAvg() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactCustCount' field.
      * The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
      * @return The value.
      */
    public java.lang.Long getReactCustCount() {
      return reactCustCount;
    }

    /**
      * Sets the value of the 'reactCustCount' field.
      * The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
      * @param value The value of 'reactCustCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactCustCount(long value) {
      validate(fields()[14], value);
      this.reactCustCount = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'reactCustCount' field has been set.
      * The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
      * @return True if the 'reactCustCount' field has been set, false otherwise.
      */
    public boolean hasReactCustCount() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'reactCustCount' field.
      * The count of customers that are considered REACTIVATED in the given Balor time period.  To be considered reactivated the cust_id must appear in the current and t-2 time period
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactCustCount() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactTxnCount' field.
      * The number of transactions made by REACTIVATED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getReactTxnCount() {
      return reactTxnCount;
    }

    /**
      * Sets the value of the 'reactTxnCount' field.
      * The number of transactions made by REACTIVATED customers in the given Balor time period.
      * @param value The value of 'reactTxnCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactTxnCount(long value) {
      validate(fields()[15], value);
      this.reactTxnCount = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'reactTxnCount' field has been set.
      * The number of transactions made by REACTIVATED customers in the given Balor time period.
      * @return True if the 'reactTxnCount' field has been set, false otherwise.
      */
    public boolean hasReactTxnCount() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'reactTxnCount' field.
      * The number of transactions made by REACTIVATED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactTxnCount() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactTxnAmt' field.
      * The total spend of transactions made by REACTIVATED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getReactTxnAmt() {
      return reactTxnAmt;
    }

    /**
      * Sets the value of the 'reactTxnAmt' field.
      * The total spend of transactions made by REACTIVATED customers in the given Balor time period.
      * @param value The value of 'reactTxnAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactTxnAmt(double value) {
      validate(fields()[16], value);
      this.reactTxnAmt = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'reactTxnAmt' field has been set.
      * The total spend of transactions made by REACTIVATED customers in the given Balor time period.
      * @return True if the 'reactTxnAmt' field has been set, false otherwise.
      */
    public boolean hasReactTxnAmt() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'reactTxnAmt' field.
      * The total spend of transactions made by REACTIVATED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactTxnAmt() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactDiscAmt' field.
      * The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getReactDiscAmt() {
      return reactDiscAmt;
    }

    /**
      * Sets the value of the 'reactDiscAmt' field.
      * The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
      * @param value The value of 'reactDiscAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactDiscAmt(double value) {
      validate(fields()[17], value);
      this.reactDiscAmt = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'reactDiscAmt' field has been set.
      * The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
      * @return True if the 'reactDiscAmt' field has been set, false otherwise.
      */
    public boolean hasReactDiscAmt() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'reactDiscAmt' field.
      * The total discount amount of transactions made by REACTIVATED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactDiscAmt() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactItemQty' field.
      * The total number of items purchased by all REACTIVATED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getReactItemQty() {
      return reactItemQty;
    }

    /**
      * Sets the value of the 'reactItemQty' field.
      * The total number of items purchased by all REACTIVATED customers in the given Balor time period.
      * @param value The value of 'reactItemQty'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactItemQty(long value) {
      validate(fields()[18], value);
      this.reactItemQty = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'reactItemQty' field has been set.
      * The total number of items purchased by all REACTIVATED customers in the given Balor time period.
      * @return True if the 'reactItemQty' field has been set, false otherwise.
      */
    public boolean hasReactItemQty() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'reactItemQty' field.
      * The total number of items purchased by all REACTIVATED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactItemQty() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactCustSpendAvg' field.
      * The average sales per REACTIVATED customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getReactCustSpendAvg() {
      return reactCustSpendAvg;
    }

    /**
      * Sets the value of the 'reactCustSpendAvg' field.
      * The average sales per REACTIVATED customer in the given time period.
      * @param value The value of 'reactCustSpendAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactCustSpendAvg(double value) {
      validate(fields()[19], value);
      this.reactCustSpendAvg = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'reactCustSpendAvg' field has been set.
      * The average sales per REACTIVATED customer in the given time period.
      * @return True if the 'reactCustSpendAvg' field has been set, false otherwise.
      */
    public boolean hasReactCustSpendAvg() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'reactCustSpendAvg' field.
      * The average sales per REACTIVATED customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactCustSpendAvg() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactCustVisitAvg' field.
      * The average number of visits per REACTIVATED customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getReactCustVisitAvg() {
      return reactCustVisitAvg;
    }

    /**
      * Sets the value of the 'reactCustVisitAvg' field.
      * The average number of visits per REACTIVATED customer in the given time period.
      * @param value The value of 'reactCustVisitAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactCustVisitAvg(double value) {
      validate(fields()[20], value);
      this.reactCustVisitAvg = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'reactCustVisitAvg' field has been set.
      * The average number of visits per REACTIVATED customer in the given time period.
      * @return True if the 'reactCustVisitAvg' field has been set, false otherwise.
      */
    public boolean hasReactCustVisitAvg() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'reactCustVisitAvg' field.
      * The average number of visits per REACTIVATED customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactCustVisitAvg() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactCustItemAvg' field.
      * The average number of purchased items per REACTIVATED customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getReactCustItemAvg() {
      return reactCustItemAvg;
    }

    /**
      * Sets the value of the 'reactCustItemAvg' field.
      * The average number of purchased items per REACTIVATED customer in the given time period.
      * @param value The value of 'reactCustItemAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactCustItemAvg(double value) {
      validate(fields()[21], value);
      this.reactCustItemAvg = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'reactCustItemAvg' field has been set.
      * The average number of purchased items per REACTIVATED customer in the given time period.
      * @return True if the 'reactCustItemAvg' field has been set, false otherwise.
      */
    public boolean hasReactCustItemAvg() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'reactCustItemAvg' field.
      * The average number of purchased items per REACTIVATED customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactCustItemAvg() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactCustDiscAvg' field.
      * The average discount amount per REACTIVATED customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getReactCustDiscAvg() {
      return reactCustDiscAvg;
    }

    /**
      * Sets the value of the 'reactCustDiscAvg' field.
      * The average discount amount per REACTIVATED customer in the given time period.
      * @param value The value of 'reactCustDiscAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactCustDiscAvg(double value) {
      validate(fields()[22], value);
      this.reactCustDiscAvg = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'reactCustDiscAvg' field has been set.
      * The average discount amount per REACTIVATED customer in the given time period.
      * @return True if the 'reactCustDiscAvg' field has been set, false otherwise.
      */
    public boolean hasReactCustDiscAvg() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'reactCustDiscAvg' field.
      * The average discount amount per REACTIVATED customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactCustDiscAvg() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactVisitSpendAvg' field.
      * The average sales per visit for REACTIVATED customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getReactVisitSpendAvg() {
      return reactVisitSpendAvg;
    }

    /**
      * Sets the value of the 'reactVisitSpendAvg' field.
      * The average sales per visit for REACTIVATED customers in the given time period.
      * @param value The value of 'reactVisitSpendAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactVisitSpendAvg(double value) {
      validate(fields()[23], value);
      this.reactVisitSpendAvg = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'reactVisitSpendAvg' field has been set.
      * The average sales per visit for REACTIVATED customers in the given time period.
      * @return True if the 'reactVisitSpendAvg' field has been set, false otherwise.
      */
    public boolean hasReactVisitSpendAvg() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'reactVisitSpendAvg' field.
      * The average sales per visit for REACTIVATED customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactVisitSpendAvg() {
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactVisitDiscAvg' field.
      * The average discount amount per visit for REACTIVATED customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getReactVisitDiscAvg() {
      return reactVisitDiscAvg;
    }

    /**
      * Sets the value of the 'reactVisitDiscAvg' field.
      * The average discount amount per visit for REACTIVATED customers in the given time period.
      * @param value The value of 'reactVisitDiscAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactVisitDiscAvg(double value) {
      validate(fields()[24], value);
      this.reactVisitDiscAvg = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'reactVisitDiscAvg' field has been set.
      * The average discount amount per visit for REACTIVATED customers in the given time period.
      * @return True if the 'reactVisitDiscAvg' field has been set, false otherwise.
      */
    public boolean hasReactVisitDiscAvg() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'reactVisitDiscAvg' field.
      * The average discount amount per visit for REACTIVATED customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactVisitDiscAvg() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactVisitItemAvg' field.
      * The average number of purchased items per visit for REACTIVATED customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getReactVisitItemAvg() {
      return reactVisitItemAvg;
    }

    /**
      * Sets the value of the 'reactVisitItemAvg' field.
      * The average number of purchased items per visit for REACTIVATED customers in the given time period.
      * @param value The value of 'reactVisitItemAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReactVisitItemAvg(double value) {
      validate(fields()[25], value);
      this.reactVisitItemAvg = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'reactVisitItemAvg' field has been set.
      * The average number of purchased items per visit for REACTIVATED customers in the given time period.
      * @return True if the 'reactVisitItemAvg' field has been set, false otherwise.
      */
    public boolean hasReactVisitItemAvg() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'reactVisitItemAvg' field.
      * The average number of purchased items per visit for REACTIVATED customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReactVisitItemAvg() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnCustCount' field.
      * The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
      * @return The value.
      */
    public java.lang.Long getReturnCustCount() {
      return returnCustCount;
    }

    /**
      * Sets the value of the 'returnCustCount' field.
      * The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
      * @param value The value of 'returnCustCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnCustCount(long value) {
      validate(fields()[26], value);
      this.returnCustCount = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'returnCustCount' field has been set.
      * The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
      * @return True if the 'returnCustCount' field has been set, false otherwise.
      */
    public boolean hasReturnCustCount() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'returnCustCount' field.
      * The count of customers that are considered RETURNING in the given Balor time period.  To be considered returning the cust_id must appear in the 2 most recent time periods, or all 3
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnCustCount() {
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnTxnCount' field.
      * The number of transactions made by RETURNING customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getReturnTxnCount() {
      return returnTxnCount;
    }

    /**
      * Sets the value of the 'returnTxnCount' field.
      * The number of transactions made by RETURNING customers in the given Balor time period.
      * @param value The value of 'returnTxnCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnTxnCount(long value) {
      validate(fields()[27], value);
      this.returnTxnCount = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'returnTxnCount' field has been set.
      * The number of transactions made by RETURNING customers in the given Balor time period.
      * @return True if the 'returnTxnCount' field has been set, false otherwise.
      */
    public boolean hasReturnTxnCount() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'returnTxnCount' field.
      * The number of transactions made by RETURNING customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnTxnCount() {
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnTxnAmt' field.
      * The total spend of transactions made by RETURNING customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getReturnTxnAmt() {
      return returnTxnAmt;
    }

    /**
      * Sets the value of the 'returnTxnAmt' field.
      * The total spend of transactions made by RETURNING customers in the given Balor time period.
      * @param value The value of 'returnTxnAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnTxnAmt(double value) {
      validate(fields()[28], value);
      this.returnTxnAmt = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'returnTxnAmt' field has been set.
      * The total spend of transactions made by RETURNING customers in the given Balor time period.
      * @return True if the 'returnTxnAmt' field has been set, false otherwise.
      */
    public boolean hasReturnTxnAmt() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'returnTxnAmt' field.
      * The total spend of transactions made by RETURNING customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnTxnAmt() {
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnDiscAmt' field.
      * The total discount amount of transactions made by RETURNING customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getReturnDiscAmt() {
      return returnDiscAmt;
    }

    /**
      * Sets the value of the 'returnDiscAmt' field.
      * The total discount amount of transactions made by RETURNING customers in the given Balor time period.
      * @param value The value of 'returnDiscAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnDiscAmt(double value) {
      validate(fields()[29], value);
      this.returnDiscAmt = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'returnDiscAmt' field has been set.
      * The total discount amount of transactions made by RETURNING customers in the given Balor time period.
      * @return True if the 'returnDiscAmt' field has been set, false otherwise.
      */
    public boolean hasReturnDiscAmt() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'returnDiscAmt' field.
      * The total discount amount of transactions made by RETURNING customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnDiscAmt() {
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnItemQty' field.
      * The total number of items purchased by all RETURNING customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getReturnItemQty() {
      return returnItemQty;
    }

    /**
      * Sets the value of the 'returnItemQty' field.
      * The total number of items purchased by all RETURNING customers in the given Balor time period.
      * @param value The value of 'returnItemQty'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnItemQty(long value) {
      validate(fields()[30], value);
      this.returnItemQty = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'returnItemQty' field has been set.
      * The total number of items purchased by all RETURNING customers in the given Balor time period.
      * @return True if the 'returnItemQty' field has been set, false otherwise.
      */
    public boolean hasReturnItemQty() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'returnItemQty' field.
      * The total number of items purchased by all RETURNING customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnItemQty() {
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnCustSpendAvg' field.
      * The average sales per RETURNING customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getReturnCustSpendAvg() {
      return returnCustSpendAvg;
    }

    /**
      * Sets the value of the 'returnCustSpendAvg' field.
      * The average sales per RETURNING customer in the given time period.
      * @param value The value of 'returnCustSpendAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnCustSpendAvg(double value) {
      validate(fields()[31], value);
      this.returnCustSpendAvg = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'returnCustSpendAvg' field has been set.
      * The average sales per RETURNING customer in the given time period.
      * @return True if the 'returnCustSpendAvg' field has been set, false otherwise.
      */
    public boolean hasReturnCustSpendAvg() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'returnCustSpendAvg' field.
      * The average sales per RETURNING customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnCustSpendAvg() {
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnCustVisitAvg' field.
      * The average number of visits per RETURNING customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getReturnCustVisitAvg() {
      return returnCustVisitAvg;
    }

    /**
      * Sets the value of the 'returnCustVisitAvg' field.
      * The average number of visits per RETURNING customer in the given time period.
      * @param value The value of 'returnCustVisitAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnCustVisitAvg(double value) {
      validate(fields()[32], value);
      this.returnCustVisitAvg = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'returnCustVisitAvg' field has been set.
      * The average number of visits per RETURNING customer in the given time period.
      * @return True if the 'returnCustVisitAvg' field has been set, false otherwise.
      */
    public boolean hasReturnCustVisitAvg() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'returnCustVisitAvg' field.
      * The average number of visits per RETURNING customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnCustVisitAvg() {
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnCustItemAvg' field.
      * The average number of purchased items per RETURNING customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getReturnCustItemAvg() {
      return returnCustItemAvg;
    }

    /**
      * Sets the value of the 'returnCustItemAvg' field.
      * The average number of purchased items per RETURNING customer in the given time period.
      * @param value The value of 'returnCustItemAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnCustItemAvg(double value) {
      validate(fields()[33], value);
      this.returnCustItemAvg = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'returnCustItemAvg' field has been set.
      * The average number of purchased items per RETURNING customer in the given time period.
      * @return True if the 'returnCustItemAvg' field has been set, false otherwise.
      */
    public boolean hasReturnCustItemAvg() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'returnCustItemAvg' field.
      * The average number of purchased items per RETURNING customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnCustItemAvg() {
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnCustDiscAvg' field.
      * The average discount amount per RETURNING customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getReturnCustDiscAvg() {
      return returnCustDiscAvg;
    }

    /**
      * Sets the value of the 'returnCustDiscAvg' field.
      * The average discount amount per RETURNING customer in the given time period.
      * @param value The value of 'returnCustDiscAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnCustDiscAvg(double value) {
      validate(fields()[34], value);
      this.returnCustDiscAvg = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'returnCustDiscAvg' field has been set.
      * The average discount amount per RETURNING customer in the given time period.
      * @return True if the 'returnCustDiscAvg' field has been set, false otherwise.
      */
    public boolean hasReturnCustDiscAvg() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'returnCustDiscAvg' field.
      * The average discount amount per RETURNING customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnCustDiscAvg() {
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnVisitSpendAvg' field.
      * The average sales per visit for RETURNING customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getReturnVisitSpendAvg() {
      return returnVisitSpendAvg;
    }

    /**
      * Sets the value of the 'returnVisitSpendAvg' field.
      * The average sales per visit for RETURNING customers in the given time period.
      * @param value The value of 'returnVisitSpendAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnVisitSpendAvg(double value) {
      validate(fields()[35], value);
      this.returnVisitSpendAvg = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'returnVisitSpendAvg' field has been set.
      * The average sales per visit for RETURNING customers in the given time period.
      * @return True if the 'returnVisitSpendAvg' field has been set, false otherwise.
      */
    public boolean hasReturnVisitSpendAvg() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'returnVisitSpendAvg' field.
      * The average sales per visit for RETURNING customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnVisitSpendAvg() {
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnVisitDiscAvg' field.
      * The average discount amount per visit for RETURNING customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getReturnVisitDiscAvg() {
      return returnVisitDiscAvg;
    }

    /**
      * Sets the value of the 'returnVisitDiscAvg' field.
      * The average discount amount per visit for RETURNING customers in the given time period.
      * @param value The value of 'returnVisitDiscAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnVisitDiscAvg(double value) {
      validate(fields()[36], value);
      this.returnVisitDiscAvg = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'returnVisitDiscAvg' field has been set.
      * The average discount amount per visit for RETURNING customers in the given time period.
      * @return True if the 'returnVisitDiscAvg' field has been set, false otherwise.
      */
    public boolean hasReturnVisitDiscAvg() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'returnVisitDiscAvg' field.
      * The average discount amount per visit for RETURNING customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnVisitDiscAvg() {
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnVisitItemAvg' field.
      * The average number of purchased items per visit for RETURNING customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getReturnVisitItemAvg() {
      return returnVisitItemAvg;
    }

    /**
      * Sets the value of the 'returnVisitItemAvg' field.
      * The average number of purchased items per visit for RETURNING customers in the given time period.
      * @param value The value of 'returnVisitItemAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnVisitItemAvg(double value) {
      validate(fields()[37], value);
      this.returnVisitItemAvg = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'returnVisitItemAvg' field has been set.
      * The average number of purchased items per visit for RETURNING customers in the given time period.
      * @return True if the 'returnVisitItemAvg' field has been set, false otherwise.
      */
    public boolean hasReturnVisitItemAvg() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'returnVisitItemAvg' field.
      * The average number of purchased items per visit for RETURNING customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnVisitItemAvg() {
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedCustCount' field.
      * The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
      * @return The value.
      */
    public java.lang.Long getLapsedCustCount() {
      return lapsedCustCount;
    }

    /**
      * Sets the value of the 'lapsedCustCount' field.
      * The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
      * @param value The value of 'lapsedCustCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedCustCount(long value) {
      validate(fields()[38], value);
      this.lapsedCustCount = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedCustCount' field has been set.
      * The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
      * @return True if the 'lapsedCustCount' field has been set, false otherwise.
      */
    public boolean hasLapsedCustCount() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'lapsedCustCount' field.
      * The count of customers that are considered LAPSED in the given Balor time period.  To be considered lapsed the cust_id cannot appear in the current time period
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedCustCount() {
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedTxnCount' field.
      * The number of transactions made by LAPSED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getLapsedTxnCount() {
      return lapsedTxnCount;
    }

    /**
      * Sets the value of the 'lapsedTxnCount' field.
      * The number of transactions made by LAPSED customers in the given Balor time period.
      * @param value The value of 'lapsedTxnCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedTxnCount(long value) {
      validate(fields()[39], value);
      this.lapsedTxnCount = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedTxnCount' field has been set.
      * The number of transactions made by LAPSED customers in the given Balor time period.
      * @return True if the 'lapsedTxnCount' field has been set, false otherwise.
      */
    public boolean hasLapsedTxnCount() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'lapsedTxnCount' field.
      * The number of transactions made by LAPSED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedTxnCount() {
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedTxnAmt' field.
      * The total spend of transactions made by LAPSED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getLapsedTxnAmt() {
      return lapsedTxnAmt;
    }

    /**
      * Sets the value of the 'lapsedTxnAmt' field.
      * The total spend of transactions made by LAPSED customers in the given Balor time period.
      * @param value The value of 'lapsedTxnAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedTxnAmt(double value) {
      validate(fields()[40], value);
      this.lapsedTxnAmt = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedTxnAmt' field has been set.
      * The total spend of transactions made by LAPSED customers in the given Balor time period.
      * @return True if the 'lapsedTxnAmt' field has been set, false otherwise.
      */
    public boolean hasLapsedTxnAmt() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'lapsedTxnAmt' field.
      * The total spend of transactions made by LAPSED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedTxnAmt() {
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedDiscAmt' field.
      * The total discount amount of transactions made by LAPSED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Double getLapsedDiscAmt() {
      return lapsedDiscAmt;
    }

    /**
      * Sets the value of the 'lapsedDiscAmt' field.
      * The total discount amount of transactions made by LAPSED customers in the given Balor time period.
      * @param value The value of 'lapsedDiscAmt'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedDiscAmt(double value) {
      validate(fields()[41], value);
      this.lapsedDiscAmt = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedDiscAmt' field has been set.
      * The total discount amount of transactions made by LAPSED customers in the given Balor time period.
      * @return True if the 'lapsedDiscAmt' field has been set, false otherwise.
      */
    public boolean hasLapsedDiscAmt() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'lapsedDiscAmt' field.
      * The total discount amount of transactions made by LAPSED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedDiscAmt() {
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedItemQty' field.
      * The total number of items purchased by all LAPSED customers in the given Balor time period.
      * @return The value.
      */
    public java.lang.Long getLapsedItemQty() {
      return lapsedItemQty;
    }

    /**
      * Sets the value of the 'lapsedItemQty' field.
      * The total number of items purchased by all LAPSED customers in the given Balor time period.
      * @param value The value of 'lapsedItemQty'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedItemQty(long value) {
      validate(fields()[42], value);
      this.lapsedItemQty = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedItemQty' field has been set.
      * The total number of items purchased by all LAPSED customers in the given Balor time period.
      * @return True if the 'lapsedItemQty' field has been set, false otherwise.
      */
    public boolean hasLapsedItemQty() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'lapsedItemQty' field.
      * The total number of items purchased by all LAPSED customers in the given Balor time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedItemQty() {
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedCustSpendAvg' field.
      * The average sales per LAPSED customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getLapsedCustSpendAvg() {
      return lapsedCustSpendAvg;
    }

    /**
      * Sets the value of the 'lapsedCustSpendAvg' field.
      * The average sales per LAPSED customer in the given time period.
      * @param value The value of 'lapsedCustSpendAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedCustSpendAvg(double value) {
      validate(fields()[43], value);
      this.lapsedCustSpendAvg = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedCustSpendAvg' field has been set.
      * The average sales per LAPSED customer in the given time period.
      * @return True if the 'lapsedCustSpendAvg' field has been set, false otherwise.
      */
    public boolean hasLapsedCustSpendAvg() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'lapsedCustSpendAvg' field.
      * The average sales per LAPSED customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedCustSpendAvg() {
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedCustVisitAvg' field.
      * The average number of visits per LAPSED customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getLapsedCustVisitAvg() {
      return lapsedCustVisitAvg;
    }

    /**
      * Sets the value of the 'lapsedCustVisitAvg' field.
      * The average number of visits per LAPSED customer in the given time period.
      * @param value The value of 'lapsedCustVisitAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedCustVisitAvg(double value) {
      validate(fields()[44], value);
      this.lapsedCustVisitAvg = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedCustVisitAvg' field has been set.
      * The average number of visits per LAPSED customer in the given time period.
      * @return True if the 'lapsedCustVisitAvg' field has been set, false otherwise.
      */
    public boolean hasLapsedCustVisitAvg() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'lapsedCustVisitAvg' field.
      * The average number of visits per LAPSED customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedCustVisitAvg() {
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedCustItemAvg' field.
      * The average number of purchased items per LAPSED customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getLapsedCustItemAvg() {
      return lapsedCustItemAvg;
    }

    /**
      * Sets the value of the 'lapsedCustItemAvg' field.
      * The average number of purchased items per LAPSED customer in the given time period.
      * @param value The value of 'lapsedCustItemAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedCustItemAvg(double value) {
      validate(fields()[45], value);
      this.lapsedCustItemAvg = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedCustItemAvg' field has been set.
      * The average number of purchased items per LAPSED customer in the given time period.
      * @return True if the 'lapsedCustItemAvg' field has been set, false otherwise.
      */
    public boolean hasLapsedCustItemAvg() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'lapsedCustItemAvg' field.
      * The average number of purchased items per LAPSED customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedCustItemAvg() {
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedCustDiscAvg' field.
      * The average discount amount per LAPSED customer in the given time period.
      * @return The value.
      */
    public java.lang.Double getLapsedCustDiscAvg() {
      return lapsedCustDiscAvg;
    }

    /**
      * Sets the value of the 'lapsedCustDiscAvg' field.
      * The average discount amount per LAPSED customer in the given time period.
      * @param value The value of 'lapsedCustDiscAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedCustDiscAvg(double value) {
      validate(fields()[46], value);
      this.lapsedCustDiscAvg = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedCustDiscAvg' field has been set.
      * The average discount amount per LAPSED customer in the given time period.
      * @return True if the 'lapsedCustDiscAvg' field has been set, false otherwise.
      */
    public boolean hasLapsedCustDiscAvg() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'lapsedCustDiscAvg' field.
      * The average discount amount per LAPSED customer in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedCustDiscAvg() {
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedVisitSpendAvg' field.
      * The average sales per visit for LAPSED customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getLapsedVisitSpendAvg() {
      return lapsedVisitSpendAvg;
    }

    /**
      * Sets the value of the 'lapsedVisitSpendAvg' field.
      * The average sales per visit for LAPSED customers in the given time period.
      * @param value The value of 'lapsedVisitSpendAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedVisitSpendAvg(double value) {
      validate(fields()[47], value);
      this.lapsedVisitSpendAvg = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedVisitSpendAvg' field has been set.
      * The average sales per visit for LAPSED customers in the given time period.
      * @return True if the 'lapsedVisitSpendAvg' field has been set, false otherwise.
      */
    public boolean hasLapsedVisitSpendAvg() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'lapsedVisitSpendAvg' field.
      * The average sales per visit for LAPSED customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedVisitSpendAvg() {
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedVisitDiscAvg' field.
      * The average discount amount per visit for LAPSED customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getLapsedVisitDiscAvg() {
      return lapsedVisitDiscAvg;
    }

    /**
      * Sets the value of the 'lapsedVisitDiscAvg' field.
      * The average discount amount per visit for LAPSED customers in the given time period.
      * @param value The value of 'lapsedVisitDiscAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedVisitDiscAvg(double value) {
      validate(fields()[48], value);
      this.lapsedVisitDiscAvg = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedVisitDiscAvg' field has been set.
      * The average discount amount per visit for LAPSED customers in the given time period.
      * @return True if the 'lapsedVisitDiscAvg' field has been set, false otherwise.
      */
    public boolean hasLapsedVisitDiscAvg() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'lapsedVisitDiscAvg' field.
      * The average discount amount per visit for LAPSED customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedVisitDiscAvg() {
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsedVisitItemAvg' field.
      * The average number of purchased items per visit for LAPSED customers in the given time period.
      * @return The value.
      */
    public java.lang.Double getLapsedVisitItemAvg() {
      return lapsedVisitItemAvg;
    }

    /**
      * Sets the value of the 'lapsedVisitItemAvg' field.
      * The average number of purchased items per visit for LAPSED customers in the given time period.
      * @param value The value of 'lapsedVisitItemAvg'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setLapsedVisitItemAvg(double value) {
      validate(fields()[49], value);
      this.lapsedVisitItemAvg = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsedVisitItemAvg' field has been set.
      * The average number of purchased items per visit for LAPSED customers in the given time period.
      * @return True if the 'lapsedVisitItemAvg' field has been set, false otherwise.
      */
    public boolean hasLapsedVisitItemAvg() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'lapsedVisitItemAvg' field.
      * The average number of purchased items per visit for LAPSED customers in the given time period.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearLapsedVisitItemAvg() {
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'custBalor' field.
      * The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
      * @return The value.
      */
    public java.lang.Double getCustBalor() {
      return custBalor;
    }

    /**
      * Sets the value of the 'custBalor' field.
      * The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
      * @param value The value of 'custBalor'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setCustBalor(double value) {
      validate(fields()[50], value);
      this.custBalor = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'custBalor' field has been set.
      * The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
      * @return True if the 'custBalor' field has been set, false otherwise.
      */
    public boolean hasCustBalor() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'custBalor' field.
      * The balor ratio for customer counts. ratio calculated: (new + reactivated) / lapsed
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearCustBalor() {
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'txnBalor' field.
      * The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return The value.
      */
    public java.lang.Double getTxnBalor() {
      return txnBalor;
    }

    /**
      * Sets the value of the 'txnBalor' field.
      * The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
      * @param value The value of 'txnBalor'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setTxnBalor(double value) {
      validate(fields()[51], value);
      this.txnBalor = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'txnBalor' field has been set.
      * The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return True if the 'txnBalor' field has been set, false otherwise.
      */
    public boolean hasTxnBalor() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'txnBalor' field.
      * The balor ratio for transaction counts per customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearTxnBalor() {
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'spendBalor' field.
      * The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return The value.
      */
    public java.lang.Double getSpendBalor() {
      return spendBalor;
    }

    /**
      * Sets the value of the 'spendBalor' field.
      * The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
      * @param value The value of 'spendBalor'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setSpendBalor(double value) {
      validate(fields()[52], value);
      this.spendBalor = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'spendBalor' field has been set.
      * The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return True if the 'spendBalor' field has been set, false otherwise.
      */
    public boolean hasSpendBalor() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'spendBalor' field.
      * The balor ratio for the total spend for each customer segment. ratio calculated: (new + reactivated) / lapsed
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearSpendBalor() {
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'retention' field.
      * The retention rate: (Returning in (t))/(new + react + return in (t-1))
      * @return The value.
      */
    public java.lang.Double getRetention() {
      return retention;
    }

    /**
      * Sets the value of the 'retention' field.
      * The retention rate: (Returning in (t))/(new + react + return in (t-1))
      * @param value The value of 'retention'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setRetention(double value) {
      validate(fields()[53], value);
      this.retention = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'retention' field has been set.
      * The retention rate: (Returning in (t))/(new + react + return in (t-1))
      * @return True if the 'retention' field has been set, false otherwise.
      */
    public boolean hasRetention() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'retention' field.
      * The retention rate: (Returning in (t))/(new + react + return in (t-1))
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearRetention() {
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'retentionGrowth' field.
      * The retention growth rate from t-1 to t: [(Retention(t) - Retention(t-1)/Retention(t-1)] * 100
      * @return The value.
      */
    public java.lang.Double getRetentionGrowth() {
      return retentionGrowth;
    }

    /**
      * Sets the value of the 'retentionGrowth' field.
      * The retention growth rate from t-1 to t: [(Retention(t) - Retention(t-1)/Retention(t-1)] * 100
      * @param value The value of 'retentionGrowth'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setRetentionGrowth(java.lang.Double value) {
      validate(fields()[54], value);
      this.retentionGrowth = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'retentionGrowth' field has been set.
      * The retention growth rate from t-1 to t: [(Retention(t) - Retention(t-1)/Retention(t-1)] * 100
      * @return True if the 'retentionGrowth' field has been set, false otherwise.
      */
    public boolean hasRetentionGrowth() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'retentionGrowth' field.
      * The retention growth rate from t-1 to t: [(Retention(t) - Retention(t-1)/Retention(t-1)] * 100
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearRetentionGrowth() {
      retentionGrowth = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnNewSales' field.
      * Total sales in (t) for customers that were NEW in (t-1) and RETURNING in (t)
      * @return The value.
      */
    public java.lang.Double getReturnNewSales() {
      return returnNewSales;
    }

    /**
      * Sets the value of the 'returnNewSales' field.
      * Total sales in (t) for customers that were NEW in (t-1) and RETURNING in (t)
      * @param value The value of 'returnNewSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnNewSales(java.lang.Double value) {
      validate(fields()[55], value);
      this.returnNewSales = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'returnNewSales' field has been set.
      * Total sales in (t) for customers that were NEW in (t-1) and RETURNING in (t)
      * @return True if the 'returnNewSales' field has been set, false otherwise.
      */
    public boolean hasReturnNewSales() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'returnNewSales' field.
      * Total sales in (t) for customers that were NEW in (t-1) and RETURNING in (t)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnNewSales() {
      returnNewSales = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnNewTxn' field.
      * Total number of transactions in (t) for customers that were NEW in (t-1) and RETURNING in (t)
      * @return The value.
      */
    public java.lang.Long getReturnNewTxn() {
      return returnNewTxn;
    }

    /**
      * Sets the value of the 'returnNewTxn' field.
      * Total number of transactions in (t) for customers that were NEW in (t-1) and RETURNING in (t)
      * @param value The value of 'returnNewTxn'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnNewTxn(java.lang.Long value) {
      validate(fields()[56], value);
      this.returnNewTxn = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'returnNewTxn' field has been set.
      * Total number of transactions in (t) for customers that were NEW in (t-1) and RETURNING in (t)
      * @return True if the 'returnNewTxn' field has been set, false otherwise.
      */
    public boolean hasReturnNewTxn() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'returnNewTxn' field.
      * Total number of transactions in (t) for customers that were NEW in (t-1) and RETURNING in (t)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnNewTxn() {
      returnNewTxn = null;
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnNewCust' field.
      * Total customer count in (t) that were NEW in (t-1) and RETURNING in (t)
      * @return The value.
      */
    public java.lang.Long getReturnNewCust() {
      return returnNewCust;
    }

    /**
      * Sets the value of the 'returnNewCust' field.
      * Total customer count in (t) that were NEW in (t-1) and RETURNING in (t)
      * @param value The value of 'returnNewCust'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnNewCust(java.lang.Long value) {
      validate(fields()[57], value);
      this.returnNewCust = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'returnNewCust' field has been set.
      * Total customer count in (t) that were NEW in (t-1) and RETURNING in (t)
      * @return True if the 'returnNewCust' field has been set, false otherwise.
      */
    public boolean hasReturnNewCust() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'returnNewCust' field.
      * Total customer count in (t) that were NEW in (t-1) and RETURNING in (t)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnNewCust() {
      returnNewCust = null;
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnReactSales' field.
      * Total sales in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
      * @return The value.
      */
    public java.lang.Double getReturnReactSales() {
      return returnReactSales;
    }

    /**
      * Sets the value of the 'returnReactSales' field.
      * Total sales in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
      * @param value The value of 'returnReactSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnReactSales(java.lang.Double value) {
      validate(fields()[58], value);
      this.returnReactSales = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'returnReactSales' field has been set.
      * Total sales in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
      * @return True if the 'returnReactSales' field has been set, false otherwise.
      */
    public boolean hasReturnReactSales() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'returnReactSales' field.
      * Total sales in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnReactSales() {
      returnReactSales = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnReactTxn' field.
      * Total number of transactions in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
      * @return The value.
      */
    public java.lang.Long getReturnReactTxn() {
      return returnReactTxn;
    }

    /**
      * Sets the value of the 'returnReactTxn' field.
      * Total number of transactions in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
      * @param value The value of 'returnReactTxn'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnReactTxn(java.lang.Long value) {
      validate(fields()[59], value);
      this.returnReactTxn = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'returnReactTxn' field has been set.
      * Total number of transactions in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
      * @return True if the 'returnReactTxn' field has been set, false otherwise.
      */
    public boolean hasReturnReactTxn() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'returnReactTxn' field.
      * Total number of transactions in (t) for customers that were REACTIVATED in (t-1) and RETURNING in (t)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnReactTxn() {
      returnReactTxn = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnReactCust' field.
      * Total customers in (t) that were REACTIVATED in (t-1) and RETURNING in (t)
      * @return The value.
      */
    public java.lang.Long getReturnReactCust() {
      return returnReactCust;
    }

    /**
      * Sets the value of the 'returnReactCust' field.
      * Total customers in (t) that were REACTIVATED in (t-1) and RETURNING in (t)
      * @param value The value of 'returnReactCust'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnReactCust(java.lang.Long value) {
      validate(fields()[60], value);
      this.returnReactCust = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'returnReactCust' field has been set.
      * Total customers in (t) that were REACTIVATED in (t-1) and RETURNING in (t)
      * @return True if the 'returnReactCust' field has been set, false otherwise.
      */
    public boolean hasReturnReactCust() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'returnReactCust' field.
      * Total customers in (t) that were REACTIVATED in (t-1) and RETURNING in (t)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnReactCust() {
      returnReactCust = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnReturnSales' field.
      * Total sales in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
      * @return The value.
      */
    public java.lang.Double getReturnReturnSales() {
      return returnReturnSales;
    }

    /**
      * Sets the value of the 'returnReturnSales' field.
      * Total sales in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
      * @param value The value of 'returnReturnSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnReturnSales(java.lang.Double value) {
      validate(fields()[61], value);
      this.returnReturnSales = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'returnReturnSales' field has been set.
      * Total sales in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
      * @return True if the 'returnReturnSales' field has been set, false otherwise.
      */
    public boolean hasReturnReturnSales() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'returnReturnSales' field.
      * Total sales in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnReturnSales() {
      returnReturnSales = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnReturnTxn' field.
      * Total number of transactions in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
      * @return The value.
      */
    public java.lang.Long getReturnReturnTxn() {
      return returnReturnTxn;
    }

    /**
      * Sets the value of the 'returnReturnTxn' field.
      * Total number of transactions in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
      * @param value The value of 'returnReturnTxn'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnReturnTxn(java.lang.Long value) {
      validate(fields()[62], value);
      this.returnReturnTxn = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'returnReturnTxn' field has been set.
      * Total number of transactions in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
      * @return True if the 'returnReturnTxn' field has been set, false otherwise.
      */
    public boolean hasReturnReturnTxn() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'returnReturnTxn' field.
      * Total number of transactions in (t) for customers that were RETURNING in (t-1) and RETURNING in (t)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnReturnTxn() {
      returnReturnTxn = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'returnReturnCust' field.
      * Total customers in (t) that were RETURNING in (t-1) and RETURNING in (t)
      * @return The value.
      */
    public java.lang.Long getReturnReturnCust() {
      return returnReturnCust;
    }

    /**
      * Sets the value of the 'returnReturnCust' field.
      * Total customers in (t) that were RETURNING in (t-1) and RETURNING in (t)
      * @param value The value of 'returnReturnCust'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setReturnReturnCust(java.lang.Long value) {
      validate(fields()[63], value);
      this.returnReturnCust = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'returnReturnCust' field has been set.
      * Total customers in (t) that were RETURNING in (t-1) and RETURNING in (t)
      * @return True if the 'returnReturnCust' field has been set, false otherwise.
      */
    public boolean hasReturnReturnCust() {
      return fieldSetFlags()[63];
    }


    /**
      * Clears the value of the 'returnReturnCust' field.
      * Total customers in (t) that were RETURNING in (t-1) and RETURNING in (t)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearReturnReturnCust() {
      returnReturnCust = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'ttlSalesLift' field.
      * Lift based on TOTAL sales: returnTxnAmt/(returnNewSales + returnReactSales + returnReturnSales)
      * @return The value.
      */
    public java.lang.Double getTtlSalesLift() {
      return ttlSalesLift;
    }

    /**
      * Sets the value of the 'ttlSalesLift' field.
      * Lift based on TOTAL sales: returnTxnAmt/(returnNewSales + returnReactSales + returnReturnSales)
      * @param value The value of 'ttlSalesLift'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setTtlSalesLift(java.lang.Double value) {
      validate(fields()[64], value);
      this.ttlSalesLift = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'ttlSalesLift' field has been set.
      * Lift based on TOTAL sales: returnTxnAmt/(returnNewSales + returnReactSales + returnReturnSales)
      * @return True if the 'ttlSalesLift' field has been set, false otherwise.
      */
    public boolean hasTtlSalesLift() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'ttlSalesLift' field.
      * Lift based on TOTAL sales: returnTxnAmt/(returnNewSales + returnReactSales + returnReturnSales)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearTtlSalesLift() {
      ttlSalesLift = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgSalesLift' field.
      * Lift based on AVG sales per cust: (returnTxnAmt/returnCustCount) / [(returnNewSales + returnReactSales + returnReturnSales) / (returnNewCust + returnReactCust + returnReturnCust)]
      * @return The value.
      */
    public java.lang.Double getAvgSalesLift() {
      return avgSalesLift;
    }

    /**
      * Sets the value of the 'avgSalesLift' field.
      * Lift based on AVG sales per cust: (returnTxnAmt/returnCustCount) / [(returnNewSales + returnReactSales + returnReturnSales) / (returnNewCust + returnReactCust + returnReturnCust)]
      * @param value The value of 'avgSalesLift'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setAvgSalesLift(java.lang.Double value) {
      validate(fields()[65], value);
      this.avgSalesLift = value;
      fieldSetFlags()[65] = true;
      return this;
    }

    /**
      * Checks whether the 'avgSalesLift' field has been set.
      * Lift based on AVG sales per cust: (returnTxnAmt/returnCustCount) / [(returnNewSales + returnReactSales + returnReturnSales) / (returnNewCust + returnReactCust + returnReturnCust)]
      * @return True if the 'avgSalesLift' field has been set, false otherwise.
      */
    public boolean hasAvgSalesLift() {
      return fieldSetFlags()[65];
    }


    /**
      * Clears the value of the 'avgSalesLift' field.
      * Lift based on AVG sales per cust: (returnTxnAmt/returnCustCount) / [(returnNewSales + returnReactSales + returnReturnSales) / (returnNewCust + returnReactCust + returnReturnCust)]
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearAvgSalesLift() {
      avgSalesLift = null;
      fieldSetFlags()[65] = false;
      return this;
    }

    /**
      * Gets the value of the 'ttlTxnLift' field.
      * Lift based on TOTAL Txns: returnTxnCount/(returnNewTxn + returnReactTxn + returnReturnTxn)
      * @return The value.
      */
    public java.lang.Double getTtlTxnLift() {
      return ttlTxnLift;
    }

    /**
      * Sets the value of the 'ttlTxnLift' field.
      * Lift based on TOTAL Txns: returnTxnCount/(returnNewTxn + returnReactTxn + returnReturnTxn)
      * @param value The value of 'ttlTxnLift'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setTtlTxnLift(java.lang.Double value) {
      validate(fields()[66], value);
      this.ttlTxnLift = value;
      fieldSetFlags()[66] = true;
      return this;
    }

    /**
      * Checks whether the 'ttlTxnLift' field has been set.
      * Lift based on TOTAL Txns: returnTxnCount/(returnNewTxn + returnReactTxn + returnReturnTxn)
      * @return True if the 'ttlTxnLift' field has been set, false otherwise.
      */
    public boolean hasTtlTxnLift() {
      return fieldSetFlags()[66];
    }


    /**
      * Clears the value of the 'ttlTxnLift' field.
      * Lift based on TOTAL Txns: returnTxnCount/(returnNewTxn + returnReactTxn + returnReturnTxn)
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearTtlTxnLift() {
      ttlTxnLift = null;
      fieldSetFlags()[66] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgTxnLift' field.
      * Lift based on AVG Txns per cust: (returnTxnCount/returnCustCount) / [(returnNewTxn + returnReactTxn + returnReturnTxn) / (returnNewCust + returnReactCust + returnReturnCust)]
      * @return The value.
      */
    public java.lang.Double getAvgTxnLift() {
      return avgTxnLift;
    }

    /**
      * Sets the value of the 'avgTxnLift' field.
      * Lift based on AVG Txns per cust: (returnTxnCount/returnCustCount) / [(returnNewTxn + returnReactTxn + returnReturnTxn) / (returnNewCust + returnReactCust + returnReturnCust)]
      * @param value The value of 'avgTxnLift'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder setAvgTxnLift(java.lang.Double value) {
      validate(fields()[67], value);
      this.avgTxnLift = value;
      fieldSetFlags()[67] = true;
      return this;
    }

    /**
      * Checks whether the 'avgTxnLift' field has been set.
      * Lift based on AVG Txns per cust: (returnTxnCount/returnCustCount) / [(returnNewTxn + returnReactTxn + returnReturnTxn) / (returnNewCust + returnReactCust + returnReturnCust)]
      * @return True if the 'avgTxnLift' field has been set, false otherwise.
      */
    public boolean hasAvgTxnLift() {
      return fieldSetFlags()[67];
    }


    /**
      * Clears the value of the 'avgTxnLift' field.
      * Lift based on AVG Txns per cust: (returnTxnCount/returnCustCount) / [(returnNewTxn + returnReactTxn + returnReturnTxn) / (returnNewCust + returnReactCust + returnReturnCust)]
      * @return This builder.
      */
    public com.brierley.avro.schemas.TimePeriodData.Builder clearAvgTxnLift() {
      avgTxnLift = null;
      fieldSetFlags()[67] = false;
      return this;
    }

    @Override
    public TimePeriodData build() {
      try {
        TimePeriodData record = new TimePeriodData();
        record.timePeriod = fieldSetFlags()[0] ? this.timePeriod : (java.lang.Integer) defaultValue(fields()[0]);
        record.anchorDate = fieldSetFlags()[1] ? this.anchorDate : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.newCustCount = fieldSetFlags()[2] ? this.newCustCount : (java.lang.Long) defaultValue(fields()[2]);
        record.newTxnCount = fieldSetFlags()[3] ? this.newTxnCount : (java.lang.Long) defaultValue(fields()[3]);
        record.newTxnAmt = fieldSetFlags()[4] ? this.newTxnAmt : (java.lang.Double) defaultValue(fields()[4]);
        record.newDiscAmt = fieldSetFlags()[5] ? this.newDiscAmt : (java.lang.Double) defaultValue(fields()[5]);
        record.newItemQty = fieldSetFlags()[6] ? this.newItemQty : (java.lang.Long) defaultValue(fields()[6]);
        record.newCustSpendAvg = fieldSetFlags()[7] ? this.newCustSpendAvg : (java.lang.Double) defaultValue(fields()[7]);
        record.newCustVisitAvg = fieldSetFlags()[8] ? this.newCustVisitAvg : (java.lang.Double) defaultValue(fields()[8]);
        record.newCustItemAvg = fieldSetFlags()[9] ? this.newCustItemAvg : (java.lang.Double) defaultValue(fields()[9]);
        record.newCustDiscAvg = fieldSetFlags()[10] ? this.newCustDiscAvg : (java.lang.Double) defaultValue(fields()[10]);
        record.newVisitSpendAvg = fieldSetFlags()[11] ? this.newVisitSpendAvg : (java.lang.Double) defaultValue(fields()[11]);
        record.newVisitDiscAvg = fieldSetFlags()[12] ? this.newVisitDiscAvg : (java.lang.Double) defaultValue(fields()[12]);
        record.newVisitItemAvg = fieldSetFlags()[13] ? this.newVisitItemAvg : (java.lang.Double) defaultValue(fields()[13]);
        record.reactCustCount = fieldSetFlags()[14] ? this.reactCustCount : (java.lang.Long) defaultValue(fields()[14]);
        record.reactTxnCount = fieldSetFlags()[15] ? this.reactTxnCount : (java.lang.Long) defaultValue(fields()[15]);
        record.reactTxnAmt = fieldSetFlags()[16] ? this.reactTxnAmt : (java.lang.Double) defaultValue(fields()[16]);
        record.reactDiscAmt = fieldSetFlags()[17] ? this.reactDiscAmt : (java.lang.Double) defaultValue(fields()[17]);
        record.reactItemQty = fieldSetFlags()[18] ? this.reactItemQty : (java.lang.Long) defaultValue(fields()[18]);
        record.reactCustSpendAvg = fieldSetFlags()[19] ? this.reactCustSpendAvg : (java.lang.Double) defaultValue(fields()[19]);
        record.reactCustVisitAvg = fieldSetFlags()[20] ? this.reactCustVisitAvg : (java.lang.Double) defaultValue(fields()[20]);
        record.reactCustItemAvg = fieldSetFlags()[21] ? this.reactCustItemAvg : (java.lang.Double) defaultValue(fields()[21]);
        record.reactCustDiscAvg = fieldSetFlags()[22] ? this.reactCustDiscAvg : (java.lang.Double) defaultValue(fields()[22]);
        record.reactVisitSpendAvg = fieldSetFlags()[23] ? this.reactVisitSpendAvg : (java.lang.Double) defaultValue(fields()[23]);
        record.reactVisitDiscAvg = fieldSetFlags()[24] ? this.reactVisitDiscAvg : (java.lang.Double) defaultValue(fields()[24]);
        record.reactVisitItemAvg = fieldSetFlags()[25] ? this.reactVisitItemAvg : (java.lang.Double) defaultValue(fields()[25]);
        record.returnCustCount = fieldSetFlags()[26] ? this.returnCustCount : (java.lang.Long) defaultValue(fields()[26]);
        record.returnTxnCount = fieldSetFlags()[27] ? this.returnTxnCount : (java.lang.Long) defaultValue(fields()[27]);
        record.returnTxnAmt = fieldSetFlags()[28] ? this.returnTxnAmt : (java.lang.Double) defaultValue(fields()[28]);
        record.returnDiscAmt = fieldSetFlags()[29] ? this.returnDiscAmt : (java.lang.Double) defaultValue(fields()[29]);
        record.returnItemQty = fieldSetFlags()[30] ? this.returnItemQty : (java.lang.Long) defaultValue(fields()[30]);
        record.returnCustSpendAvg = fieldSetFlags()[31] ? this.returnCustSpendAvg : (java.lang.Double) defaultValue(fields()[31]);
        record.returnCustVisitAvg = fieldSetFlags()[32] ? this.returnCustVisitAvg : (java.lang.Double) defaultValue(fields()[32]);
        record.returnCustItemAvg = fieldSetFlags()[33] ? this.returnCustItemAvg : (java.lang.Double) defaultValue(fields()[33]);
        record.returnCustDiscAvg = fieldSetFlags()[34] ? this.returnCustDiscAvg : (java.lang.Double) defaultValue(fields()[34]);
        record.returnVisitSpendAvg = fieldSetFlags()[35] ? this.returnVisitSpendAvg : (java.lang.Double) defaultValue(fields()[35]);
        record.returnVisitDiscAvg = fieldSetFlags()[36] ? this.returnVisitDiscAvg : (java.lang.Double) defaultValue(fields()[36]);
        record.returnVisitItemAvg = fieldSetFlags()[37] ? this.returnVisitItemAvg : (java.lang.Double) defaultValue(fields()[37]);
        record.lapsedCustCount = fieldSetFlags()[38] ? this.lapsedCustCount : (java.lang.Long) defaultValue(fields()[38]);
        record.lapsedTxnCount = fieldSetFlags()[39] ? this.lapsedTxnCount : (java.lang.Long) defaultValue(fields()[39]);
        record.lapsedTxnAmt = fieldSetFlags()[40] ? this.lapsedTxnAmt : (java.lang.Double) defaultValue(fields()[40]);
        record.lapsedDiscAmt = fieldSetFlags()[41] ? this.lapsedDiscAmt : (java.lang.Double) defaultValue(fields()[41]);
        record.lapsedItemQty = fieldSetFlags()[42] ? this.lapsedItemQty : (java.lang.Long) defaultValue(fields()[42]);
        record.lapsedCustSpendAvg = fieldSetFlags()[43] ? this.lapsedCustSpendAvg : (java.lang.Double) defaultValue(fields()[43]);
        record.lapsedCustVisitAvg = fieldSetFlags()[44] ? this.lapsedCustVisitAvg : (java.lang.Double) defaultValue(fields()[44]);
        record.lapsedCustItemAvg = fieldSetFlags()[45] ? this.lapsedCustItemAvg : (java.lang.Double) defaultValue(fields()[45]);
        record.lapsedCustDiscAvg = fieldSetFlags()[46] ? this.lapsedCustDiscAvg : (java.lang.Double) defaultValue(fields()[46]);
        record.lapsedVisitSpendAvg = fieldSetFlags()[47] ? this.lapsedVisitSpendAvg : (java.lang.Double) defaultValue(fields()[47]);
        record.lapsedVisitDiscAvg = fieldSetFlags()[48] ? this.lapsedVisitDiscAvg : (java.lang.Double) defaultValue(fields()[48]);
        record.lapsedVisitItemAvg = fieldSetFlags()[49] ? this.lapsedVisitItemAvg : (java.lang.Double) defaultValue(fields()[49]);
        record.custBalor = fieldSetFlags()[50] ? this.custBalor : (java.lang.Double) defaultValue(fields()[50]);
        record.txnBalor = fieldSetFlags()[51] ? this.txnBalor : (java.lang.Double) defaultValue(fields()[51]);
        record.spendBalor = fieldSetFlags()[52] ? this.spendBalor : (java.lang.Double) defaultValue(fields()[52]);
        record.retention = fieldSetFlags()[53] ? this.retention : (java.lang.Double) defaultValue(fields()[53]);
        record.retentionGrowth = fieldSetFlags()[54] ? this.retentionGrowth : (java.lang.Double) defaultValue(fields()[54]);
        record.returnNewSales = fieldSetFlags()[55] ? this.returnNewSales : (java.lang.Double) defaultValue(fields()[55]);
        record.returnNewTxn = fieldSetFlags()[56] ? this.returnNewTxn : (java.lang.Long) defaultValue(fields()[56]);
        record.returnNewCust = fieldSetFlags()[57] ? this.returnNewCust : (java.lang.Long) defaultValue(fields()[57]);
        record.returnReactSales = fieldSetFlags()[58] ? this.returnReactSales : (java.lang.Double) defaultValue(fields()[58]);
        record.returnReactTxn = fieldSetFlags()[59] ? this.returnReactTxn : (java.lang.Long) defaultValue(fields()[59]);
        record.returnReactCust = fieldSetFlags()[60] ? this.returnReactCust : (java.lang.Long) defaultValue(fields()[60]);
        record.returnReturnSales = fieldSetFlags()[61] ? this.returnReturnSales : (java.lang.Double) defaultValue(fields()[61]);
        record.returnReturnTxn = fieldSetFlags()[62] ? this.returnReturnTxn : (java.lang.Long) defaultValue(fields()[62]);
        record.returnReturnCust = fieldSetFlags()[63] ? this.returnReturnCust : (java.lang.Long) defaultValue(fields()[63]);
        record.ttlSalesLift = fieldSetFlags()[64] ? this.ttlSalesLift : (java.lang.Double) defaultValue(fields()[64]);
        record.avgSalesLift = fieldSetFlags()[65] ? this.avgSalesLift : (java.lang.Double) defaultValue(fields()[65]);
        record.ttlTxnLift = fieldSetFlags()[66] ? this.ttlTxnLift : (java.lang.Double) defaultValue(fields()[66]);
        record.avgTxnLift = fieldSetFlags()[67] ? this.avgTxnLift : (java.lang.Double) defaultValue(fields()[67]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
