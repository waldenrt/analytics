/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FreqRow extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 821019731541626942L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FreqRow\",\"namespace\":\"com.brierley.avro.schemas\",\"fields\":[{\"name\":\"cadence\",\"type\":\"int\",\"doc\":\"The cadence value for the following frequencies in days\"},{\"name\":\"frequency\",\"type\":\"long\",\"doc\":\"The number of times that the cadence appears in the dataset\"},{\"name\":\"cumFreq\",\"type\":\"long\",\"doc\":\"The cumulative frequency of the all previous cadence values.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The cadence value for the following frequencies in days */
  @Deprecated public int cadence;
  /** The number of times that the cadence appears in the dataset */
  @Deprecated public long frequency;
  /** The cumulative frequency of the all previous cadence values. */
  @Deprecated public long cumFreq;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FreqRow() {}

  /**
   * All-args constructor.
   * @param cadence The cadence value for the following frequencies in days
   * @param frequency The number of times that the cadence appears in the dataset
   * @param cumFreq The cumulative frequency of the all previous cadence values.
   */
  public FreqRow(java.lang.Integer cadence, java.lang.Long frequency, java.lang.Long cumFreq) {
    this.cadence = cadence;
    this.frequency = frequency;
    this.cumFreq = cumFreq;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cadence;
    case 1: return frequency;
    case 2: return cumFreq;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cadence = (java.lang.Integer)value$; break;
    case 1: frequency = (java.lang.Long)value$; break;
    case 2: cumFreq = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cadence' field.
   * @return The cadence value for the following frequencies in days
   */
  public java.lang.Integer getCadence() {
    return cadence;
  }

  /**
   * Sets the value of the 'cadence' field.
   * The cadence value for the following frequencies in days
   * @param value the value to set.
   */
  public void setCadence(java.lang.Integer value) {
    this.cadence = value;
  }

  /**
   * Gets the value of the 'frequency' field.
   * @return The number of times that the cadence appears in the dataset
   */
  public java.lang.Long getFrequency() {
    return frequency;
  }

  /**
   * Sets the value of the 'frequency' field.
   * The number of times that the cadence appears in the dataset
   * @param value the value to set.
   */
  public void setFrequency(java.lang.Long value) {
    this.frequency = value;
  }

  /**
   * Gets the value of the 'cumFreq' field.
   * @return The cumulative frequency of the all previous cadence values.
   */
  public java.lang.Long getCumFreq() {
    return cumFreq;
  }

  /**
   * Sets the value of the 'cumFreq' field.
   * The cumulative frequency of the all previous cadence values.
   * @param value the value to set.
   */
  public void setCumFreq(java.lang.Long value) {
    this.cumFreq = value;
  }

  /**
   * Creates a new FreqRow RecordBuilder.
   * @return A new FreqRow RecordBuilder
   */
  public static com.brierley.avro.schemas.FreqRow.Builder newBuilder() {
    return new com.brierley.avro.schemas.FreqRow.Builder();
  }

  /**
   * Creates a new FreqRow RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FreqRow RecordBuilder
   */
  public static com.brierley.avro.schemas.FreqRow.Builder newBuilder(com.brierley.avro.schemas.FreqRow.Builder other) {
    return new com.brierley.avro.schemas.FreqRow.Builder(other);
  }

  /**
   * Creates a new FreqRow RecordBuilder by copying an existing FreqRow instance.
   * @param other The existing instance to copy.
   * @return A new FreqRow RecordBuilder
   */
  public static com.brierley.avro.schemas.FreqRow.Builder newBuilder(com.brierley.avro.schemas.FreqRow other) {
    return new com.brierley.avro.schemas.FreqRow.Builder(other);
  }

  /**
   * RecordBuilder for FreqRow instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FreqRow>
    implements org.apache.avro.data.RecordBuilder<FreqRow> {

    /** The cadence value for the following frequencies in days */
    private int cadence;
    /** The number of times that the cadence appears in the dataset */
    private long frequency;
    /** The cumulative frequency of the all previous cadence values. */
    private long cumFreq;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.FreqRow.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cadence)) {
        this.cadence = data().deepCopy(fields()[0].schema(), other.cadence);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frequency)) {
        this.frequency = data().deepCopy(fields()[1].schema(), other.frequency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cumFreq)) {
        this.cumFreq = data().deepCopy(fields()[2].schema(), other.cumFreq);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FreqRow instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.FreqRow other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.cadence)) {
        this.cadence = data().deepCopy(fields()[0].schema(), other.cadence);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frequency)) {
        this.frequency = data().deepCopy(fields()[1].schema(), other.frequency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cumFreq)) {
        this.cumFreq = data().deepCopy(fields()[2].schema(), other.cumFreq);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'cadence' field.
      * The cadence value for the following frequencies in days
      * @return The value.
      */
    public java.lang.Integer getCadence() {
      return cadence;
    }

    /**
      * Sets the value of the 'cadence' field.
      * The cadence value for the following frequencies in days
      * @param value The value of 'cadence'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.FreqRow.Builder setCadence(int value) {
      validate(fields()[0], value);
      this.cadence = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cadence' field has been set.
      * The cadence value for the following frequencies in days
      * @return True if the 'cadence' field has been set, false otherwise.
      */
    public boolean hasCadence() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cadence' field.
      * The cadence value for the following frequencies in days
      * @return This builder.
      */
    public com.brierley.avro.schemas.FreqRow.Builder clearCadence() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'frequency' field.
      * The number of times that the cadence appears in the dataset
      * @return The value.
      */
    public java.lang.Long getFrequency() {
      return frequency;
    }

    /**
      * Sets the value of the 'frequency' field.
      * The number of times that the cadence appears in the dataset
      * @param value The value of 'frequency'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.FreqRow.Builder setFrequency(long value) {
      validate(fields()[1], value);
      this.frequency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'frequency' field has been set.
      * The number of times that the cadence appears in the dataset
      * @return True if the 'frequency' field has been set, false otherwise.
      */
    public boolean hasFrequency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'frequency' field.
      * The number of times that the cadence appears in the dataset
      * @return This builder.
      */
    public com.brierley.avro.schemas.FreqRow.Builder clearFrequency() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cumFreq' field.
      * The cumulative frequency of the all previous cadence values.
      * @return The value.
      */
    public java.lang.Long getCumFreq() {
      return cumFreq;
    }

    /**
      * Sets the value of the 'cumFreq' field.
      * The cumulative frequency of the all previous cadence values.
      * @param value The value of 'cumFreq'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.FreqRow.Builder setCumFreq(long value) {
      validate(fields()[2], value);
      this.cumFreq = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cumFreq' field has been set.
      * The cumulative frequency of the all previous cadence values.
      * @return True if the 'cumFreq' field has been set, false otherwise.
      */
    public boolean hasCumFreq() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cumFreq' field.
      * The cumulative frequency of the all previous cadence values.
      * @return This builder.
      */
    public com.brierley.avro.schemas.FreqRow.Builder clearCumFreq() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public FreqRow build() {
      try {
        FreqRow record = new FreqRow();
        record.cadence = fieldSetFlags()[0] ? this.cadence : (java.lang.Integer) defaultValue(fields()[0]);
        record.frequency = fieldSetFlags()[1] ? this.frequency : (java.lang.Long) defaultValue(fields()[1]);
        record.cumFreq = fieldSetFlags()[2] ? this.cumFreq : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
