/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Each record gives data for a single time period, and contains arrays to hold all quantile data */
@org.apache.avro.specific.AvroGenerated
public class quantileMigrationResults extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8966533226317488649L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"quantileMigrationResults\",\"namespace\":\"com.brierley.avro.schemas\",\"doc\":\"Each record gives data for a single time period, and contains arrays to hold all quantile data\",\"fields\":[{\"name\":\"timePeriod\",\"type\":\"int\",\"doc\":\"Current Time period\"},{\"name\":\"anchorDate\",\"type\":\"string\",\"doc\":\"The first date of the TimePeriod, formatted 'MMM yyyy'\"},{\"name\":\"migrationData\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"migrationArray\",\"fields\":[{\"name\":\"fromQuantile\",\"type\":\"int\",\"doc\":\"Quantile that they were in for PREVIOUS time period\"},{\"name\":\"currentQuantile\",\"type\":\"int\",\"doc\":\"Quantile that they belong to for CURRENT time period\"},{\"name\":\"migrationCount\",\"type\":\"long\",\"doc\":\"Total number that moved fromQuantile -> currentQuantile\"}]}}},{\"name\":\"quantileTotals\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"newTotal\",\"fields\":[{\"name\":\"quantile\",\"type\":\"int\",\"doc\":\"quantile for which totals apply to in the current time period\"},{\"name\":\"newCount\",\"type\":\"long\",\"doc\":\"Count of those not seen in PREVIOUS period, those not represented in migrationArray\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Current Time period */
  @Deprecated public int timePeriod;
  /** The first date of the TimePeriod, formatted 'MMM yyyy' */
  @Deprecated public java.lang.CharSequence anchorDate;
  @Deprecated public java.util.List<com.brierley.avro.schemas.migrationArray> migrationData;
  @Deprecated public java.util.List<com.brierley.avro.schemas.newTotal> quantileTotals;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public quantileMigrationResults() {}

  /**
   * All-args constructor.
   * @param timePeriod Current Time period
   * @param anchorDate The first date of the TimePeriod, formatted 'MMM yyyy'
   * @param migrationData The new value for migrationData
   * @param quantileTotals The new value for quantileTotals
   */
  public quantileMigrationResults(java.lang.Integer timePeriod, java.lang.CharSequence anchorDate, java.util.List<com.brierley.avro.schemas.migrationArray> migrationData, java.util.List<com.brierley.avro.schemas.newTotal> quantileTotals) {
    this.timePeriod = timePeriod;
    this.anchorDate = anchorDate;
    this.migrationData = migrationData;
    this.quantileTotals = quantileTotals;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timePeriod;
    case 1: return anchorDate;
    case 2: return migrationData;
    case 3: return quantileTotals;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timePeriod = (java.lang.Integer)value$; break;
    case 1: anchorDate = (java.lang.CharSequence)value$; break;
    case 2: migrationData = (java.util.List<com.brierley.avro.schemas.migrationArray>)value$; break;
    case 3: quantileTotals = (java.util.List<com.brierley.avro.schemas.newTotal>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timePeriod' field.
   * @return Current Time period
   */
  public java.lang.Integer getTimePeriod() {
    return timePeriod;
  }

  /**
   * Sets the value of the 'timePeriod' field.
   * Current Time period
   * @param value the value to set.
   */
  public void setTimePeriod(java.lang.Integer value) {
    this.timePeriod = value;
  }

  /**
   * Gets the value of the 'anchorDate' field.
   * @return The first date of the TimePeriod, formatted 'MMM yyyy'
   */
  public java.lang.CharSequence getAnchorDate() {
    return anchorDate;
  }

  /**
   * Sets the value of the 'anchorDate' field.
   * The first date of the TimePeriod, formatted 'MMM yyyy'
   * @param value the value to set.
   */
  public void setAnchorDate(java.lang.CharSequence value) {
    this.anchorDate = value;
  }

  /**
   * Gets the value of the 'migrationData' field.
   * @return The value of the 'migrationData' field.
   */
  public java.util.List<com.brierley.avro.schemas.migrationArray> getMigrationData() {
    return migrationData;
  }

  /**
   * Sets the value of the 'migrationData' field.
   * @param value the value to set.
   */
  public void setMigrationData(java.util.List<com.brierley.avro.schemas.migrationArray> value) {
    this.migrationData = value;
  }

  /**
   * Gets the value of the 'quantileTotals' field.
   * @return The value of the 'quantileTotals' field.
   */
  public java.util.List<com.brierley.avro.schemas.newTotal> getQuantileTotals() {
    return quantileTotals;
  }

  /**
   * Sets the value of the 'quantileTotals' field.
   * @param value the value to set.
   */
  public void setQuantileTotals(java.util.List<com.brierley.avro.schemas.newTotal> value) {
    this.quantileTotals = value;
  }

  /**
   * Creates a new quantileMigrationResults RecordBuilder.
   * @return A new quantileMigrationResults RecordBuilder
   */
  public static com.brierley.avro.schemas.quantileMigrationResults.Builder newBuilder() {
    return new com.brierley.avro.schemas.quantileMigrationResults.Builder();
  }

  /**
   * Creates a new quantileMigrationResults RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new quantileMigrationResults RecordBuilder
   */
  public static com.brierley.avro.schemas.quantileMigrationResults.Builder newBuilder(com.brierley.avro.schemas.quantileMigrationResults.Builder other) {
    return new com.brierley.avro.schemas.quantileMigrationResults.Builder(other);
  }

  /**
   * Creates a new quantileMigrationResults RecordBuilder by copying an existing quantileMigrationResults instance.
   * @param other The existing instance to copy.
   * @return A new quantileMigrationResults RecordBuilder
   */
  public static com.brierley.avro.schemas.quantileMigrationResults.Builder newBuilder(com.brierley.avro.schemas.quantileMigrationResults other) {
    return new com.brierley.avro.schemas.quantileMigrationResults.Builder(other);
  }

  /**
   * RecordBuilder for quantileMigrationResults instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<quantileMigrationResults>
    implements org.apache.avro.data.RecordBuilder<quantileMigrationResults> {

    /** Current Time period */
    private int timePeriod;
    /** The first date of the TimePeriod, formatted 'MMM yyyy' */
    private java.lang.CharSequence anchorDate;
    private java.util.List<com.brierley.avro.schemas.migrationArray> migrationData;
    private java.util.List<com.brierley.avro.schemas.newTotal> quantileTotals;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.quantileMigrationResults.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.anchorDate)) {
        this.anchorDate = data().deepCopy(fields()[1].schema(), other.anchorDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.migrationData)) {
        this.migrationData = data().deepCopy(fields()[2].schema(), other.migrationData);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantileTotals)) {
        this.quantileTotals = data().deepCopy(fields()[3].schema(), other.quantileTotals);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing quantileMigrationResults instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.quantileMigrationResults other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.anchorDate)) {
        this.anchorDate = data().deepCopy(fields()[1].schema(), other.anchorDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.migrationData)) {
        this.migrationData = data().deepCopy(fields()[2].schema(), other.migrationData);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantileTotals)) {
        this.quantileTotals = data().deepCopy(fields()[3].schema(), other.quantileTotals);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'timePeriod' field.
      * Current Time period
      * @return The value.
      */
    public java.lang.Integer getTimePeriod() {
      return timePeriod;
    }

    /**
      * Sets the value of the 'timePeriod' field.
      * Current Time period
      * @param value The value of 'timePeriod'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantileMigrationResults.Builder setTimePeriod(int value) {
      validate(fields()[0], value);
      this.timePeriod = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timePeriod' field has been set.
      * Current Time period
      * @return True if the 'timePeriod' field has been set, false otherwise.
      */
    public boolean hasTimePeriod() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timePeriod' field.
      * Current Time period
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantileMigrationResults.Builder clearTimePeriod() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'anchorDate' field.
      * The first date of the TimePeriod, formatted 'MMM yyyy'
      * @return The value.
      */
    public java.lang.CharSequence getAnchorDate() {
      return anchorDate;
    }

    /**
      * Sets the value of the 'anchorDate' field.
      * The first date of the TimePeriod, formatted 'MMM yyyy'
      * @param value The value of 'anchorDate'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantileMigrationResults.Builder setAnchorDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.anchorDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'anchorDate' field has been set.
      * The first date of the TimePeriod, formatted 'MMM yyyy'
      * @return True if the 'anchorDate' field has been set, false otherwise.
      */
    public boolean hasAnchorDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'anchorDate' field.
      * The first date of the TimePeriod, formatted 'MMM yyyy'
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantileMigrationResults.Builder clearAnchorDate() {
      anchorDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'migrationData' field.
      * @return The value.
      */
    public java.util.List<com.brierley.avro.schemas.migrationArray> getMigrationData() {
      return migrationData;
    }

    /**
      * Sets the value of the 'migrationData' field.
      * @param value The value of 'migrationData'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantileMigrationResults.Builder setMigrationData(java.util.List<com.brierley.avro.schemas.migrationArray> value) {
      validate(fields()[2], value);
      this.migrationData = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'migrationData' field has been set.
      * @return True if the 'migrationData' field has been set, false otherwise.
      */
    public boolean hasMigrationData() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'migrationData' field.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantileMigrationResults.Builder clearMigrationData() {
      migrationData = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantileTotals' field.
      * @return The value.
      */
    public java.util.List<com.brierley.avro.schemas.newTotal> getQuantileTotals() {
      return quantileTotals;
    }

    /**
      * Sets the value of the 'quantileTotals' field.
      * @param value The value of 'quantileTotals'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantileMigrationResults.Builder setQuantileTotals(java.util.List<com.brierley.avro.schemas.newTotal> value) {
      validate(fields()[3], value);
      this.quantileTotals = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'quantileTotals' field has been set.
      * @return True if the 'quantileTotals' field has been set, false otherwise.
      */
    public boolean hasQuantileTotals() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'quantileTotals' field.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantileMigrationResults.Builder clearQuantileTotals() {
      quantileTotals = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public quantileMigrationResults build() {
      try {
        quantileMigrationResults record = new quantileMigrationResults();
        record.timePeriod = fieldSetFlags()[0] ? this.timePeriod : (java.lang.Integer) defaultValue(fields()[0]);
        record.anchorDate = fieldSetFlags()[1] ? this.anchorDate : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.migrationData = fieldSetFlags()[2] ? this.migrationData : (java.util.List<com.brierley.avro.schemas.migrationArray>) defaultValue(fields()[2]);
        record.quantileTotals = fieldSetFlags()[3] ? this.quantileTotals : (java.util.List<com.brierley.avro.schemas.newTotal>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
