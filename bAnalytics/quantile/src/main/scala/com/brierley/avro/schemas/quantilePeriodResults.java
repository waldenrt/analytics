/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** each record represents the results of single period of time */
@org.apache.avro.specific.AvroGenerated
public class quantilePeriodResults extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4676519890110969098L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"quantilePeriodResults\",\"namespace\":\"com.brierley.avro.schemas\",\"doc\":\"each record represents the results of single period of time\",\"fields\":[{\"name\":\"timePeriod\",\"type\":\"int\",\"doc\":\"Quantile Period, calculated ascending\"},{\"name\":\"quantile\",\"type\":\"int\",\"doc\":\"Quantile bucket\"},{\"name\":\"totalCount\",\"type\":\"long\",\"doc\":\"Total distinct count of customers/stores in the group determined by the segment above\"},{\"name\":\"totalVisits\",\"type\":\"long\",\"doc\":\"Total number of visits per customer/store determined by the segment\"},{\"name\":\"totalSpend\",\"type\":\"double\",\"doc\":\"Total spend per customer/store determined by the segment\"},{\"name\":\"totalUnits\",\"type\":\"long\",\"doc\":\"Total number of items per customer/store determined by the segment\"},{\"name\":\"totalDisc\",\"type\":\"double\",\"doc\":\"Total discount per customer/store determined by the segment, if discount is not given this will return 0\"},{\"name\":\"avgVisits\",\"type\":\"double\",\"doc\":\"totalVisits/totalCount\"},{\"name\":\"avgSpend\",\"type\":\"double\",\"doc\":\"totalSpend/totalCount\"},{\"name\":\"avgUnits\",\"type\":\"double\",\"doc\":\"totalUnits/totalCount\"},{\"name\":\"avgDisc\",\"type\":\"double\",\"doc\":\"totalDisc/totalCount, if discount was not given this will return 0\"},{\"name\":\"avgVisitSpend\",\"type\":\"double\",\"doc\":\"totalSpend/totalVisits\"},{\"name\":\"avgVisitUnits\",\"type\":\"double\",\"doc\":\"totalUnits/totalVisits\"},{\"name\":\"avgVisitDisc\",\"type\":\"double\",\"doc\":\"totalDisc/totalVisits\"},{\"name\":\"avgRecency\",\"type\":[\"null\",\"double\"],\"doc\":\"average days of last visit from max date in dataset, CUSTOMER dimension only\"},{\"name\":\"avgItemSales\",\"type\":[\"null\",\"double\"],\"doc\":\"totalSpend/totalUnits, CUSTOMER dimension only\"},{\"name\":\"avgItemDisc\",\"type\":[\"null\",\"double\"],\"doc\":\"totalDisc/totalUnits, CUSTOMER dimension only\"},{\"name\":\"totalCust\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of customers for STORE dimension only\"},{\"name\":\"avgStoreCust\",\"type\":[\"null\",\"double\"],\"doc\":\"totalCust/totalCount, STORE dimension only\"},{\"name\":\"avgCustSales\",\"type\":[\"null\",\"double\"],\"doc\":\"totalSpend/totalCust, STORE dimension only\"},{\"name\":\"avgCustVisits\",\"type\":[\"null\",\"double\"],\"doc\":\"totalVisits/totalCust, STORE dimension only\"},{\"name\":\"avgCustUnits\",\"type\":[\"null\",\"double\"],\"doc\":\"totalUnits/totalCust, STORE dimension only\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Quantile Period, calculated ascending */
  @Deprecated public int timePeriod;
  /** Quantile bucket */
  @Deprecated public int quantile;
  /** Total distinct count of customers/stores in the group determined by the segment above */
  @Deprecated public long totalCount;
  /** Total number of visits per customer/store determined by the segment */
  @Deprecated public long totalVisits;
  /** Total spend per customer/store determined by the segment */
  @Deprecated public double totalSpend;
  /** Total number of items per customer/store determined by the segment */
  @Deprecated public long totalUnits;
  /** Total discount per customer/store determined by the segment, if discount is not given this will return 0 */
  @Deprecated public double totalDisc;
  /** totalVisits/totalCount */
  @Deprecated public double avgVisits;
  /** totalSpend/totalCount */
  @Deprecated public double avgSpend;
  /** totalUnits/totalCount */
  @Deprecated public double avgUnits;
  /** totalDisc/totalCount, if discount was not given this will return 0 */
  @Deprecated public double avgDisc;
  /** totalSpend/totalVisits */
  @Deprecated public double avgVisitSpend;
  /** totalUnits/totalVisits */
  @Deprecated public double avgVisitUnits;
  /** totalDisc/totalVisits */
  @Deprecated public double avgVisitDisc;
  /** average days of last visit from max date in dataset, CUSTOMER dimension only */
  @Deprecated public java.lang.Double avgRecency;
  /** totalSpend/totalUnits, CUSTOMER dimension only */
  @Deprecated public java.lang.Double avgItemSales;
  /** totalDisc/totalUnits, CUSTOMER dimension only */
  @Deprecated public java.lang.Double avgItemDisc;
  /** Total number of customers for STORE dimension only */
  @Deprecated public java.lang.Long totalCust;
  /** totalCust/totalCount, STORE dimension only */
  @Deprecated public java.lang.Double avgStoreCust;
  /** totalSpend/totalCust, STORE dimension only */
  @Deprecated public java.lang.Double avgCustSales;
  /** totalVisits/totalCust, STORE dimension only */
  @Deprecated public java.lang.Double avgCustVisits;
  /** totalUnits/totalCust, STORE dimension only */
  @Deprecated public java.lang.Double avgCustUnits;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public quantilePeriodResults() {}

  /**
   * All-args constructor.
   * @param timePeriod Quantile Period, calculated ascending
   * @param quantile Quantile bucket
   * @param totalCount Total distinct count of customers/stores in the group determined by the segment above
   * @param totalVisits Total number of visits per customer/store determined by the segment
   * @param totalSpend Total spend per customer/store determined by the segment
   * @param totalUnits Total number of items per customer/store determined by the segment
   * @param totalDisc Total discount per customer/store determined by the segment, if discount is not given this will return 0
   * @param avgVisits totalVisits/totalCount
   * @param avgSpend totalSpend/totalCount
   * @param avgUnits totalUnits/totalCount
   * @param avgDisc totalDisc/totalCount, if discount was not given this will return 0
   * @param avgVisitSpend totalSpend/totalVisits
   * @param avgVisitUnits totalUnits/totalVisits
   * @param avgVisitDisc totalDisc/totalVisits
   * @param avgRecency average days of last visit from max date in dataset, CUSTOMER dimension only
   * @param avgItemSales totalSpend/totalUnits, CUSTOMER dimension only
   * @param avgItemDisc totalDisc/totalUnits, CUSTOMER dimension only
   * @param totalCust Total number of customers for STORE dimension only
   * @param avgStoreCust totalCust/totalCount, STORE dimension only
   * @param avgCustSales totalSpend/totalCust, STORE dimension only
   * @param avgCustVisits totalVisits/totalCust, STORE dimension only
   * @param avgCustUnits totalUnits/totalCust, STORE dimension only
   */
  public quantilePeriodResults(java.lang.Integer timePeriod, java.lang.Integer quantile, java.lang.Long totalCount, java.lang.Long totalVisits, java.lang.Double totalSpend, java.lang.Long totalUnits, java.lang.Double totalDisc, java.lang.Double avgVisits, java.lang.Double avgSpend, java.lang.Double avgUnits, java.lang.Double avgDisc, java.lang.Double avgVisitSpend, java.lang.Double avgVisitUnits, java.lang.Double avgVisitDisc, java.lang.Double avgRecency, java.lang.Double avgItemSales, java.lang.Double avgItemDisc, java.lang.Long totalCust, java.lang.Double avgStoreCust, java.lang.Double avgCustSales, java.lang.Double avgCustVisits, java.lang.Double avgCustUnits) {
    this.timePeriod = timePeriod;
    this.quantile = quantile;
    this.totalCount = totalCount;
    this.totalVisits = totalVisits;
    this.totalSpend = totalSpend;
    this.totalUnits = totalUnits;
    this.totalDisc = totalDisc;
    this.avgVisits = avgVisits;
    this.avgSpend = avgSpend;
    this.avgUnits = avgUnits;
    this.avgDisc = avgDisc;
    this.avgVisitSpend = avgVisitSpend;
    this.avgVisitUnits = avgVisitUnits;
    this.avgVisitDisc = avgVisitDisc;
    this.avgRecency = avgRecency;
    this.avgItemSales = avgItemSales;
    this.avgItemDisc = avgItemDisc;
    this.totalCust = totalCust;
    this.avgStoreCust = avgStoreCust;
    this.avgCustSales = avgCustSales;
    this.avgCustVisits = avgCustVisits;
    this.avgCustUnits = avgCustUnits;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timePeriod;
    case 1: return quantile;
    case 2: return totalCount;
    case 3: return totalVisits;
    case 4: return totalSpend;
    case 5: return totalUnits;
    case 6: return totalDisc;
    case 7: return avgVisits;
    case 8: return avgSpend;
    case 9: return avgUnits;
    case 10: return avgDisc;
    case 11: return avgVisitSpend;
    case 12: return avgVisitUnits;
    case 13: return avgVisitDisc;
    case 14: return avgRecency;
    case 15: return avgItemSales;
    case 16: return avgItemDisc;
    case 17: return totalCust;
    case 18: return avgStoreCust;
    case 19: return avgCustSales;
    case 20: return avgCustVisits;
    case 21: return avgCustUnits;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timePeriod = (java.lang.Integer)value$; break;
    case 1: quantile = (java.lang.Integer)value$; break;
    case 2: totalCount = (java.lang.Long)value$; break;
    case 3: totalVisits = (java.lang.Long)value$; break;
    case 4: totalSpend = (java.lang.Double)value$; break;
    case 5: totalUnits = (java.lang.Long)value$; break;
    case 6: totalDisc = (java.lang.Double)value$; break;
    case 7: avgVisits = (java.lang.Double)value$; break;
    case 8: avgSpend = (java.lang.Double)value$; break;
    case 9: avgUnits = (java.lang.Double)value$; break;
    case 10: avgDisc = (java.lang.Double)value$; break;
    case 11: avgVisitSpend = (java.lang.Double)value$; break;
    case 12: avgVisitUnits = (java.lang.Double)value$; break;
    case 13: avgVisitDisc = (java.lang.Double)value$; break;
    case 14: avgRecency = (java.lang.Double)value$; break;
    case 15: avgItemSales = (java.lang.Double)value$; break;
    case 16: avgItemDisc = (java.lang.Double)value$; break;
    case 17: totalCust = (java.lang.Long)value$; break;
    case 18: avgStoreCust = (java.lang.Double)value$; break;
    case 19: avgCustSales = (java.lang.Double)value$; break;
    case 20: avgCustVisits = (java.lang.Double)value$; break;
    case 21: avgCustUnits = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timePeriod' field.
   * @return Quantile Period, calculated ascending
   */
  public java.lang.Integer getTimePeriod() {
    return timePeriod;
  }

  /**
   * Sets the value of the 'timePeriod' field.
   * Quantile Period, calculated ascending
   * @param value the value to set.
   */
  public void setTimePeriod(java.lang.Integer value) {
    this.timePeriod = value;
  }

  /**
   * Gets the value of the 'quantile' field.
   * @return Quantile bucket
   */
  public java.lang.Integer getQuantile() {
    return quantile;
  }

  /**
   * Sets the value of the 'quantile' field.
   * Quantile bucket
   * @param value the value to set.
   */
  public void setQuantile(java.lang.Integer value) {
    this.quantile = value;
  }

  /**
   * Gets the value of the 'totalCount' field.
   * @return Total distinct count of customers/stores in the group determined by the segment above
   */
  public java.lang.Long getTotalCount() {
    return totalCount;
  }

  /**
   * Sets the value of the 'totalCount' field.
   * Total distinct count of customers/stores in the group determined by the segment above
   * @param value the value to set.
   */
  public void setTotalCount(java.lang.Long value) {
    this.totalCount = value;
  }

  /**
   * Gets the value of the 'totalVisits' field.
   * @return Total number of visits per customer/store determined by the segment
   */
  public java.lang.Long getTotalVisits() {
    return totalVisits;
  }

  /**
   * Sets the value of the 'totalVisits' field.
   * Total number of visits per customer/store determined by the segment
   * @param value the value to set.
   */
  public void setTotalVisits(java.lang.Long value) {
    this.totalVisits = value;
  }

  /**
   * Gets the value of the 'totalSpend' field.
   * @return Total spend per customer/store determined by the segment
   */
  public java.lang.Double getTotalSpend() {
    return totalSpend;
  }

  /**
   * Sets the value of the 'totalSpend' field.
   * Total spend per customer/store determined by the segment
   * @param value the value to set.
   */
  public void setTotalSpend(java.lang.Double value) {
    this.totalSpend = value;
  }

  /**
   * Gets the value of the 'totalUnits' field.
   * @return Total number of items per customer/store determined by the segment
   */
  public java.lang.Long getTotalUnits() {
    return totalUnits;
  }

  /**
   * Sets the value of the 'totalUnits' field.
   * Total number of items per customer/store determined by the segment
   * @param value the value to set.
   */
  public void setTotalUnits(java.lang.Long value) {
    this.totalUnits = value;
  }

  /**
   * Gets the value of the 'totalDisc' field.
   * @return Total discount per customer/store determined by the segment, if discount is not given this will return 0
   */
  public java.lang.Double getTotalDisc() {
    return totalDisc;
  }

  /**
   * Sets the value of the 'totalDisc' field.
   * Total discount per customer/store determined by the segment, if discount is not given this will return 0
   * @param value the value to set.
   */
  public void setTotalDisc(java.lang.Double value) {
    this.totalDisc = value;
  }

  /**
   * Gets the value of the 'avgVisits' field.
   * @return totalVisits/totalCount
   */
  public java.lang.Double getAvgVisits() {
    return avgVisits;
  }

  /**
   * Sets the value of the 'avgVisits' field.
   * totalVisits/totalCount
   * @param value the value to set.
   */
  public void setAvgVisits(java.lang.Double value) {
    this.avgVisits = value;
  }

  /**
   * Gets the value of the 'avgSpend' field.
   * @return totalSpend/totalCount
   */
  public java.lang.Double getAvgSpend() {
    return avgSpend;
  }

  /**
   * Sets the value of the 'avgSpend' field.
   * totalSpend/totalCount
   * @param value the value to set.
   */
  public void setAvgSpend(java.lang.Double value) {
    this.avgSpend = value;
  }

  /**
   * Gets the value of the 'avgUnits' field.
   * @return totalUnits/totalCount
   */
  public java.lang.Double getAvgUnits() {
    return avgUnits;
  }

  /**
   * Sets the value of the 'avgUnits' field.
   * totalUnits/totalCount
   * @param value the value to set.
   */
  public void setAvgUnits(java.lang.Double value) {
    this.avgUnits = value;
  }

  /**
   * Gets the value of the 'avgDisc' field.
   * @return totalDisc/totalCount, if discount was not given this will return 0
   */
  public java.lang.Double getAvgDisc() {
    return avgDisc;
  }

  /**
   * Sets the value of the 'avgDisc' field.
   * totalDisc/totalCount, if discount was not given this will return 0
   * @param value the value to set.
   */
  public void setAvgDisc(java.lang.Double value) {
    this.avgDisc = value;
  }

  /**
   * Gets the value of the 'avgVisitSpend' field.
   * @return totalSpend/totalVisits
   */
  public java.lang.Double getAvgVisitSpend() {
    return avgVisitSpend;
  }

  /**
   * Sets the value of the 'avgVisitSpend' field.
   * totalSpend/totalVisits
   * @param value the value to set.
   */
  public void setAvgVisitSpend(java.lang.Double value) {
    this.avgVisitSpend = value;
  }

  /**
   * Gets the value of the 'avgVisitUnits' field.
   * @return totalUnits/totalVisits
   */
  public java.lang.Double getAvgVisitUnits() {
    return avgVisitUnits;
  }

  /**
   * Sets the value of the 'avgVisitUnits' field.
   * totalUnits/totalVisits
   * @param value the value to set.
   */
  public void setAvgVisitUnits(java.lang.Double value) {
    this.avgVisitUnits = value;
  }

  /**
   * Gets the value of the 'avgVisitDisc' field.
   * @return totalDisc/totalVisits
   */
  public java.lang.Double getAvgVisitDisc() {
    return avgVisitDisc;
  }

  /**
   * Sets the value of the 'avgVisitDisc' field.
   * totalDisc/totalVisits
   * @param value the value to set.
   */
  public void setAvgVisitDisc(java.lang.Double value) {
    this.avgVisitDisc = value;
  }

  /**
   * Gets the value of the 'avgRecency' field.
   * @return average days of last visit from max date in dataset, CUSTOMER dimension only
   */
  public java.lang.Double getAvgRecency() {
    return avgRecency;
  }

  /**
   * Sets the value of the 'avgRecency' field.
   * average days of last visit from max date in dataset, CUSTOMER dimension only
   * @param value the value to set.
   */
  public void setAvgRecency(java.lang.Double value) {
    this.avgRecency = value;
  }

  /**
   * Gets the value of the 'avgItemSales' field.
   * @return totalSpend/totalUnits, CUSTOMER dimension only
   */
  public java.lang.Double getAvgItemSales() {
    return avgItemSales;
  }

  /**
   * Sets the value of the 'avgItemSales' field.
   * totalSpend/totalUnits, CUSTOMER dimension only
   * @param value the value to set.
   */
  public void setAvgItemSales(java.lang.Double value) {
    this.avgItemSales = value;
  }

  /**
   * Gets the value of the 'avgItemDisc' field.
   * @return totalDisc/totalUnits, CUSTOMER dimension only
   */
  public java.lang.Double getAvgItemDisc() {
    return avgItemDisc;
  }

  /**
   * Sets the value of the 'avgItemDisc' field.
   * totalDisc/totalUnits, CUSTOMER dimension only
   * @param value the value to set.
   */
  public void setAvgItemDisc(java.lang.Double value) {
    this.avgItemDisc = value;
  }

  /**
   * Gets the value of the 'totalCust' field.
   * @return Total number of customers for STORE dimension only
   */
  public java.lang.Long getTotalCust() {
    return totalCust;
  }

  /**
   * Sets the value of the 'totalCust' field.
   * Total number of customers for STORE dimension only
   * @param value the value to set.
   */
  public void setTotalCust(java.lang.Long value) {
    this.totalCust = value;
  }

  /**
   * Gets the value of the 'avgStoreCust' field.
   * @return totalCust/totalCount, STORE dimension only
   */
  public java.lang.Double getAvgStoreCust() {
    return avgStoreCust;
  }

  /**
   * Sets the value of the 'avgStoreCust' field.
   * totalCust/totalCount, STORE dimension only
   * @param value the value to set.
   */
  public void setAvgStoreCust(java.lang.Double value) {
    this.avgStoreCust = value;
  }

  /**
   * Gets the value of the 'avgCustSales' field.
   * @return totalSpend/totalCust, STORE dimension only
   */
  public java.lang.Double getAvgCustSales() {
    return avgCustSales;
  }

  /**
   * Sets the value of the 'avgCustSales' field.
   * totalSpend/totalCust, STORE dimension only
   * @param value the value to set.
   */
  public void setAvgCustSales(java.lang.Double value) {
    this.avgCustSales = value;
  }

  /**
   * Gets the value of the 'avgCustVisits' field.
   * @return totalVisits/totalCust, STORE dimension only
   */
  public java.lang.Double getAvgCustVisits() {
    return avgCustVisits;
  }

  /**
   * Sets the value of the 'avgCustVisits' field.
   * totalVisits/totalCust, STORE dimension only
   * @param value the value to set.
   */
  public void setAvgCustVisits(java.lang.Double value) {
    this.avgCustVisits = value;
  }

  /**
   * Gets the value of the 'avgCustUnits' field.
   * @return totalUnits/totalCust, STORE dimension only
   */
  public java.lang.Double getAvgCustUnits() {
    return avgCustUnits;
  }

  /**
   * Sets the value of the 'avgCustUnits' field.
   * totalUnits/totalCust, STORE dimension only
   * @param value the value to set.
   */
  public void setAvgCustUnits(java.lang.Double value) {
    this.avgCustUnits = value;
  }

  /**
   * Creates a new quantilePeriodResults RecordBuilder.
   * @return A new quantilePeriodResults RecordBuilder
   */
  public static com.brierley.avro.schemas.quantilePeriodResults.Builder newBuilder() {
    return new com.brierley.avro.schemas.quantilePeriodResults.Builder();
  }

  /**
   * Creates a new quantilePeriodResults RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new quantilePeriodResults RecordBuilder
   */
  public static com.brierley.avro.schemas.quantilePeriodResults.Builder newBuilder(com.brierley.avro.schemas.quantilePeriodResults.Builder other) {
    return new com.brierley.avro.schemas.quantilePeriodResults.Builder(other);
  }

  /**
   * Creates a new quantilePeriodResults RecordBuilder by copying an existing quantilePeriodResults instance.
   * @param other The existing instance to copy.
   * @return A new quantilePeriodResults RecordBuilder
   */
  public static com.brierley.avro.schemas.quantilePeriodResults.Builder newBuilder(com.brierley.avro.schemas.quantilePeriodResults other) {
    return new com.brierley.avro.schemas.quantilePeriodResults.Builder(other);
  }

  /**
   * RecordBuilder for quantilePeriodResults instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<quantilePeriodResults>
    implements org.apache.avro.data.RecordBuilder<quantilePeriodResults> {

    /** Quantile Period, calculated ascending */
    private int timePeriod;
    /** Quantile bucket */
    private int quantile;
    /** Total distinct count of customers/stores in the group determined by the segment above */
    private long totalCount;
    /** Total number of visits per customer/store determined by the segment */
    private long totalVisits;
    /** Total spend per customer/store determined by the segment */
    private double totalSpend;
    /** Total number of items per customer/store determined by the segment */
    private long totalUnits;
    /** Total discount per customer/store determined by the segment, if discount is not given this will return 0 */
    private double totalDisc;
    /** totalVisits/totalCount */
    private double avgVisits;
    /** totalSpend/totalCount */
    private double avgSpend;
    /** totalUnits/totalCount */
    private double avgUnits;
    /** totalDisc/totalCount, if discount was not given this will return 0 */
    private double avgDisc;
    /** totalSpend/totalVisits */
    private double avgVisitSpend;
    /** totalUnits/totalVisits */
    private double avgVisitUnits;
    /** totalDisc/totalVisits */
    private double avgVisitDisc;
    /** average days of last visit from max date in dataset, CUSTOMER dimension only */
    private java.lang.Double avgRecency;
    /** totalSpend/totalUnits, CUSTOMER dimension only */
    private java.lang.Double avgItemSales;
    /** totalDisc/totalUnits, CUSTOMER dimension only */
    private java.lang.Double avgItemDisc;
    /** Total number of customers for STORE dimension only */
    private java.lang.Long totalCust;
    /** totalCust/totalCount, STORE dimension only */
    private java.lang.Double avgStoreCust;
    /** totalSpend/totalCust, STORE dimension only */
    private java.lang.Double avgCustSales;
    /** totalVisits/totalCust, STORE dimension only */
    private java.lang.Double avgCustVisits;
    /** totalUnits/totalCust, STORE dimension only */
    private java.lang.Double avgCustUnits;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.quantilePeriodResults.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantile)) {
        this.quantile = data().deepCopy(fields()[1].schema(), other.quantile);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalCount)) {
        this.totalCount = data().deepCopy(fields()[2].schema(), other.totalCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalVisits)) {
        this.totalVisits = data().deepCopy(fields()[3].schema(), other.totalVisits);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalSpend)) {
        this.totalSpend = data().deepCopy(fields()[4].schema(), other.totalSpend);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalUnits)) {
        this.totalUnits = data().deepCopy(fields()[5].schema(), other.totalUnits);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.totalDisc)) {
        this.totalDisc = data().deepCopy(fields()[6].schema(), other.totalDisc);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.avgVisits)) {
        this.avgVisits = data().deepCopy(fields()[7].schema(), other.avgVisits);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.avgSpend)) {
        this.avgSpend = data().deepCopy(fields()[8].schema(), other.avgSpend);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.avgUnits)) {
        this.avgUnits = data().deepCopy(fields()[9].schema(), other.avgUnits);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.avgDisc)) {
        this.avgDisc = data().deepCopy(fields()[10].schema(), other.avgDisc);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.avgVisitSpend)) {
        this.avgVisitSpend = data().deepCopy(fields()[11].schema(), other.avgVisitSpend);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.avgVisitUnits)) {
        this.avgVisitUnits = data().deepCopy(fields()[12].schema(), other.avgVisitUnits);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.avgVisitDisc)) {
        this.avgVisitDisc = data().deepCopy(fields()[13].schema(), other.avgVisitDisc);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.avgRecency)) {
        this.avgRecency = data().deepCopy(fields()[14].schema(), other.avgRecency);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.avgItemSales)) {
        this.avgItemSales = data().deepCopy(fields()[15].schema(), other.avgItemSales);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.avgItemDisc)) {
        this.avgItemDisc = data().deepCopy(fields()[16].schema(), other.avgItemDisc);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.totalCust)) {
        this.totalCust = data().deepCopy(fields()[17].schema(), other.totalCust);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.avgStoreCust)) {
        this.avgStoreCust = data().deepCopy(fields()[18].schema(), other.avgStoreCust);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.avgCustSales)) {
        this.avgCustSales = data().deepCopy(fields()[19].schema(), other.avgCustSales);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.avgCustVisits)) {
        this.avgCustVisits = data().deepCopy(fields()[20].schema(), other.avgCustVisits);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.avgCustUnits)) {
        this.avgCustUnits = data().deepCopy(fields()[21].schema(), other.avgCustUnits);
        fieldSetFlags()[21] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing quantilePeriodResults instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.quantilePeriodResults other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantile)) {
        this.quantile = data().deepCopy(fields()[1].schema(), other.quantile);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalCount)) {
        this.totalCount = data().deepCopy(fields()[2].schema(), other.totalCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalVisits)) {
        this.totalVisits = data().deepCopy(fields()[3].schema(), other.totalVisits);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalSpend)) {
        this.totalSpend = data().deepCopy(fields()[4].schema(), other.totalSpend);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalUnits)) {
        this.totalUnits = data().deepCopy(fields()[5].schema(), other.totalUnits);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.totalDisc)) {
        this.totalDisc = data().deepCopy(fields()[6].schema(), other.totalDisc);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.avgVisits)) {
        this.avgVisits = data().deepCopy(fields()[7].schema(), other.avgVisits);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.avgSpend)) {
        this.avgSpend = data().deepCopy(fields()[8].schema(), other.avgSpend);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.avgUnits)) {
        this.avgUnits = data().deepCopy(fields()[9].schema(), other.avgUnits);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.avgDisc)) {
        this.avgDisc = data().deepCopy(fields()[10].schema(), other.avgDisc);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.avgVisitSpend)) {
        this.avgVisitSpend = data().deepCopy(fields()[11].schema(), other.avgVisitSpend);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.avgVisitUnits)) {
        this.avgVisitUnits = data().deepCopy(fields()[12].schema(), other.avgVisitUnits);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.avgVisitDisc)) {
        this.avgVisitDisc = data().deepCopy(fields()[13].schema(), other.avgVisitDisc);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.avgRecency)) {
        this.avgRecency = data().deepCopy(fields()[14].schema(), other.avgRecency);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.avgItemSales)) {
        this.avgItemSales = data().deepCopy(fields()[15].schema(), other.avgItemSales);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.avgItemDisc)) {
        this.avgItemDisc = data().deepCopy(fields()[16].schema(), other.avgItemDisc);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.totalCust)) {
        this.totalCust = data().deepCopy(fields()[17].schema(), other.totalCust);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.avgStoreCust)) {
        this.avgStoreCust = data().deepCopy(fields()[18].schema(), other.avgStoreCust);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.avgCustSales)) {
        this.avgCustSales = data().deepCopy(fields()[19].schema(), other.avgCustSales);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.avgCustVisits)) {
        this.avgCustVisits = data().deepCopy(fields()[20].schema(), other.avgCustVisits);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.avgCustUnits)) {
        this.avgCustUnits = data().deepCopy(fields()[21].schema(), other.avgCustUnits);
        fieldSetFlags()[21] = true;
      }
    }

    /**
      * Gets the value of the 'timePeriod' field.
      * Quantile Period, calculated ascending
      * @return The value.
      */
    public java.lang.Integer getTimePeriod() {
      return timePeriod;
    }

    /**
      * Sets the value of the 'timePeriod' field.
      * Quantile Period, calculated ascending
      * @param value The value of 'timePeriod'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setTimePeriod(int value) {
      validate(fields()[0], value);
      this.timePeriod = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timePeriod' field has been set.
      * Quantile Period, calculated ascending
      * @return True if the 'timePeriod' field has been set, false otherwise.
      */
    public boolean hasTimePeriod() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timePeriod' field.
      * Quantile Period, calculated ascending
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearTimePeriod() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantile' field.
      * Quantile bucket
      * @return The value.
      */
    public java.lang.Integer getQuantile() {
      return quantile;
    }

    /**
      * Sets the value of the 'quantile' field.
      * Quantile bucket
      * @param value The value of 'quantile'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setQuantile(int value) {
      validate(fields()[1], value);
      this.quantile = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantile' field has been set.
      * Quantile bucket
      * @return True if the 'quantile' field has been set, false otherwise.
      */
    public boolean hasQuantile() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantile' field.
      * Quantile bucket
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearQuantile() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalCount' field.
      * Total distinct count of customers/stores in the group determined by the segment above
      * @return The value.
      */
    public java.lang.Long getTotalCount() {
      return totalCount;
    }

    /**
      * Sets the value of the 'totalCount' field.
      * Total distinct count of customers/stores in the group determined by the segment above
      * @param value The value of 'totalCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setTotalCount(long value) {
      validate(fields()[2], value);
      this.totalCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'totalCount' field has been set.
      * Total distinct count of customers/stores in the group determined by the segment above
      * @return True if the 'totalCount' field has been set, false otherwise.
      */
    public boolean hasTotalCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'totalCount' field.
      * Total distinct count of customers/stores in the group determined by the segment above
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearTotalCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalVisits' field.
      * Total number of visits per customer/store determined by the segment
      * @return The value.
      */
    public java.lang.Long getTotalVisits() {
      return totalVisits;
    }

    /**
      * Sets the value of the 'totalVisits' field.
      * Total number of visits per customer/store determined by the segment
      * @param value The value of 'totalVisits'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setTotalVisits(long value) {
      validate(fields()[3], value);
      this.totalVisits = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalVisits' field has been set.
      * Total number of visits per customer/store determined by the segment
      * @return True if the 'totalVisits' field has been set, false otherwise.
      */
    public boolean hasTotalVisits() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalVisits' field.
      * Total number of visits per customer/store determined by the segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearTotalVisits() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSpend' field.
      * Total spend per customer/store determined by the segment
      * @return The value.
      */
    public java.lang.Double getTotalSpend() {
      return totalSpend;
    }

    /**
      * Sets the value of the 'totalSpend' field.
      * Total spend per customer/store determined by the segment
      * @param value The value of 'totalSpend'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setTotalSpend(double value) {
      validate(fields()[4], value);
      this.totalSpend = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSpend' field has been set.
      * Total spend per customer/store determined by the segment
      * @return True if the 'totalSpend' field has been set, false otherwise.
      */
    public boolean hasTotalSpend() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'totalSpend' field.
      * Total spend per customer/store determined by the segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearTotalSpend() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalUnits' field.
      * Total number of items per customer/store determined by the segment
      * @return The value.
      */
    public java.lang.Long getTotalUnits() {
      return totalUnits;
    }

    /**
      * Sets the value of the 'totalUnits' field.
      * Total number of items per customer/store determined by the segment
      * @param value The value of 'totalUnits'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setTotalUnits(long value) {
      validate(fields()[5], value);
      this.totalUnits = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'totalUnits' field has been set.
      * Total number of items per customer/store determined by the segment
      * @return True if the 'totalUnits' field has been set, false otherwise.
      */
    public boolean hasTotalUnits() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'totalUnits' field.
      * Total number of items per customer/store determined by the segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearTotalUnits() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDisc' field.
      * Total discount per customer/store determined by the segment, if discount is not given this will return 0
      * @return The value.
      */
    public java.lang.Double getTotalDisc() {
      return totalDisc;
    }

    /**
      * Sets the value of the 'totalDisc' field.
      * Total discount per customer/store determined by the segment, if discount is not given this will return 0
      * @param value The value of 'totalDisc'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setTotalDisc(double value) {
      validate(fields()[6], value);
      this.totalDisc = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDisc' field has been set.
      * Total discount per customer/store determined by the segment, if discount is not given this will return 0
      * @return True if the 'totalDisc' field has been set, false otherwise.
      */
    public boolean hasTotalDisc() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'totalDisc' field.
      * Total discount per customer/store determined by the segment, if discount is not given this will return 0
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearTotalDisc() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgVisits' field.
      * totalVisits/totalCount
      * @return The value.
      */
    public java.lang.Double getAvgVisits() {
      return avgVisits;
    }

    /**
      * Sets the value of the 'avgVisits' field.
      * totalVisits/totalCount
      * @param value The value of 'avgVisits'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgVisits(double value) {
      validate(fields()[7], value);
      this.avgVisits = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'avgVisits' field has been set.
      * totalVisits/totalCount
      * @return True if the 'avgVisits' field has been set, false otherwise.
      */
    public boolean hasAvgVisits() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'avgVisits' field.
      * totalVisits/totalCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgVisits() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgSpend' field.
      * totalSpend/totalCount
      * @return The value.
      */
    public java.lang.Double getAvgSpend() {
      return avgSpend;
    }

    /**
      * Sets the value of the 'avgSpend' field.
      * totalSpend/totalCount
      * @param value The value of 'avgSpend'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgSpend(double value) {
      validate(fields()[8], value);
      this.avgSpend = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'avgSpend' field has been set.
      * totalSpend/totalCount
      * @return True if the 'avgSpend' field has been set, false otherwise.
      */
    public boolean hasAvgSpend() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'avgSpend' field.
      * totalSpend/totalCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgSpend() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgUnits' field.
      * totalUnits/totalCount
      * @return The value.
      */
    public java.lang.Double getAvgUnits() {
      return avgUnits;
    }

    /**
      * Sets the value of the 'avgUnits' field.
      * totalUnits/totalCount
      * @param value The value of 'avgUnits'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgUnits(double value) {
      validate(fields()[9], value);
      this.avgUnits = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'avgUnits' field has been set.
      * totalUnits/totalCount
      * @return True if the 'avgUnits' field has been set, false otherwise.
      */
    public boolean hasAvgUnits() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'avgUnits' field.
      * totalUnits/totalCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgUnits() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgDisc' field.
      * totalDisc/totalCount, if discount was not given this will return 0
      * @return The value.
      */
    public java.lang.Double getAvgDisc() {
      return avgDisc;
    }

    /**
      * Sets the value of the 'avgDisc' field.
      * totalDisc/totalCount, if discount was not given this will return 0
      * @param value The value of 'avgDisc'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgDisc(double value) {
      validate(fields()[10], value);
      this.avgDisc = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'avgDisc' field has been set.
      * totalDisc/totalCount, if discount was not given this will return 0
      * @return True if the 'avgDisc' field has been set, false otherwise.
      */
    public boolean hasAvgDisc() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'avgDisc' field.
      * totalDisc/totalCount, if discount was not given this will return 0
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgDisc() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgVisitSpend' field.
      * totalSpend/totalVisits
      * @return The value.
      */
    public java.lang.Double getAvgVisitSpend() {
      return avgVisitSpend;
    }

    /**
      * Sets the value of the 'avgVisitSpend' field.
      * totalSpend/totalVisits
      * @param value The value of 'avgVisitSpend'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgVisitSpend(double value) {
      validate(fields()[11], value);
      this.avgVisitSpend = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'avgVisitSpend' field has been set.
      * totalSpend/totalVisits
      * @return True if the 'avgVisitSpend' field has been set, false otherwise.
      */
    public boolean hasAvgVisitSpend() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'avgVisitSpend' field.
      * totalSpend/totalVisits
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgVisitSpend() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgVisitUnits' field.
      * totalUnits/totalVisits
      * @return The value.
      */
    public java.lang.Double getAvgVisitUnits() {
      return avgVisitUnits;
    }

    /**
      * Sets the value of the 'avgVisitUnits' field.
      * totalUnits/totalVisits
      * @param value The value of 'avgVisitUnits'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgVisitUnits(double value) {
      validate(fields()[12], value);
      this.avgVisitUnits = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'avgVisitUnits' field has been set.
      * totalUnits/totalVisits
      * @return True if the 'avgVisitUnits' field has been set, false otherwise.
      */
    public boolean hasAvgVisitUnits() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'avgVisitUnits' field.
      * totalUnits/totalVisits
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgVisitUnits() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgVisitDisc' field.
      * totalDisc/totalVisits
      * @return The value.
      */
    public java.lang.Double getAvgVisitDisc() {
      return avgVisitDisc;
    }

    /**
      * Sets the value of the 'avgVisitDisc' field.
      * totalDisc/totalVisits
      * @param value The value of 'avgVisitDisc'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgVisitDisc(double value) {
      validate(fields()[13], value);
      this.avgVisitDisc = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'avgVisitDisc' field has been set.
      * totalDisc/totalVisits
      * @return True if the 'avgVisitDisc' field has been set, false otherwise.
      */
    public boolean hasAvgVisitDisc() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'avgVisitDisc' field.
      * totalDisc/totalVisits
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgVisitDisc() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgRecency' field.
      * average days of last visit from max date in dataset, CUSTOMER dimension only
      * @return The value.
      */
    public java.lang.Double getAvgRecency() {
      return avgRecency;
    }

    /**
      * Sets the value of the 'avgRecency' field.
      * average days of last visit from max date in dataset, CUSTOMER dimension only
      * @param value The value of 'avgRecency'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgRecency(java.lang.Double value) {
      validate(fields()[14], value);
      this.avgRecency = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'avgRecency' field has been set.
      * average days of last visit from max date in dataset, CUSTOMER dimension only
      * @return True if the 'avgRecency' field has been set, false otherwise.
      */
    public boolean hasAvgRecency() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'avgRecency' field.
      * average days of last visit from max date in dataset, CUSTOMER dimension only
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgRecency() {
      avgRecency = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgItemSales' field.
      * totalSpend/totalUnits, CUSTOMER dimension only
      * @return The value.
      */
    public java.lang.Double getAvgItemSales() {
      return avgItemSales;
    }

    /**
      * Sets the value of the 'avgItemSales' field.
      * totalSpend/totalUnits, CUSTOMER dimension only
      * @param value The value of 'avgItemSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgItemSales(java.lang.Double value) {
      validate(fields()[15], value);
      this.avgItemSales = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'avgItemSales' field has been set.
      * totalSpend/totalUnits, CUSTOMER dimension only
      * @return True if the 'avgItemSales' field has been set, false otherwise.
      */
    public boolean hasAvgItemSales() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'avgItemSales' field.
      * totalSpend/totalUnits, CUSTOMER dimension only
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgItemSales() {
      avgItemSales = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgItemDisc' field.
      * totalDisc/totalUnits, CUSTOMER dimension only
      * @return The value.
      */
    public java.lang.Double getAvgItemDisc() {
      return avgItemDisc;
    }

    /**
      * Sets the value of the 'avgItemDisc' field.
      * totalDisc/totalUnits, CUSTOMER dimension only
      * @param value The value of 'avgItemDisc'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgItemDisc(java.lang.Double value) {
      validate(fields()[16], value);
      this.avgItemDisc = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'avgItemDisc' field has been set.
      * totalDisc/totalUnits, CUSTOMER dimension only
      * @return True if the 'avgItemDisc' field has been set, false otherwise.
      */
    public boolean hasAvgItemDisc() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'avgItemDisc' field.
      * totalDisc/totalUnits, CUSTOMER dimension only
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgItemDisc() {
      avgItemDisc = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalCust' field.
      * Total number of customers for STORE dimension only
      * @return The value.
      */
    public java.lang.Long getTotalCust() {
      return totalCust;
    }

    /**
      * Sets the value of the 'totalCust' field.
      * Total number of customers for STORE dimension only
      * @param value The value of 'totalCust'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setTotalCust(java.lang.Long value) {
      validate(fields()[17], value);
      this.totalCust = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'totalCust' field has been set.
      * Total number of customers for STORE dimension only
      * @return True if the 'totalCust' field has been set, false otherwise.
      */
    public boolean hasTotalCust() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'totalCust' field.
      * Total number of customers for STORE dimension only
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearTotalCust() {
      totalCust = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgStoreCust' field.
      * totalCust/totalCount, STORE dimension only
      * @return The value.
      */
    public java.lang.Double getAvgStoreCust() {
      return avgStoreCust;
    }

    /**
      * Sets the value of the 'avgStoreCust' field.
      * totalCust/totalCount, STORE dimension only
      * @param value The value of 'avgStoreCust'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgStoreCust(java.lang.Double value) {
      validate(fields()[18], value);
      this.avgStoreCust = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'avgStoreCust' field has been set.
      * totalCust/totalCount, STORE dimension only
      * @return True if the 'avgStoreCust' field has been set, false otherwise.
      */
    public boolean hasAvgStoreCust() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'avgStoreCust' field.
      * totalCust/totalCount, STORE dimension only
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgStoreCust() {
      avgStoreCust = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgCustSales' field.
      * totalSpend/totalCust, STORE dimension only
      * @return The value.
      */
    public java.lang.Double getAvgCustSales() {
      return avgCustSales;
    }

    /**
      * Sets the value of the 'avgCustSales' field.
      * totalSpend/totalCust, STORE dimension only
      * @param value The value of 'avgCustSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgCustSales(java.lang.Double value) {
      validate(fields()[19], value);
      this.avgCustSales = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'avgCustSales' field has been set.
      * totalSpend/totalCust, STORE dimension only
      * @return True if the 'avgCustSales' field has been set, false otherwise.
      */
    public boolean hasAvgCustSales() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'avgCustSales' field.
      * totalSpend/totalCust, STORE dimension only
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgCustSales() {
      avgCustSales = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgCustVisits' field.
      * totalVisits/totalCust, STORE dimension only
      * @return The value.
      */
    public java.lang.Double getAvgCustVisits() {
      return avgCustVisits;
    }

    /**
      * Sets the value of the 'avgCustVisits' field.
      * totalVisits/totalCust, STORE dimension only
      * @param value The value of 'avgCustVisits'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgCustVisits(java.lang.Double value) {
      validate(fields()[20], value);
      this.avgCustVisits = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'avgCustVisits' field has been set.
      * totalVisits/totalCust, STORE dimension only
      * @return True if the 'avgCustVisits' field has been set, false otherwise.
      */
    public boolean hasAvgCustVisits() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'avgCustVisits' field.
      * totalVisits/totalCust, STORE dimension only
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgCustVisits() {
      avgCustVisits = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgCustUnits' field.
      * totalUnits/totalCust, STORE dimension only
      * @return The value.
      */
    public java.lang.Double getAvgCustUnits() {
      return avgCustUnits;
    }

    /**
      * Sets the value of the 'avgCustUnits' field.
      * totalUnits/totalCust, STORE dimension only
      * @param value The value of 'avgCustUnits'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder setAvgCustUnits(java.lang.Double value) {
      validate(fields()[21], value);
      this.avgCustUnits = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'avgCustUnits' field has been set.
      * totalUnits/totalCust, STORE dimension only
      * @return True if the 'avgCustUnits' field has been set, false otherwise.
      */
    public boolean hasAvgCustUnits() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'avgCustUnits' field.
      * totalUnits/totalCust, STORE dimension only
      * @return This builder.
      */
    public com.brierley.avro.schemas.quantilePeriodResults.Builder clearAvgCustUnits() {
      avgCustUnits = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    @Override
    public quantilePeriodResults build() {
      try {
        quantilePeriodResults record = new quantilePeriodResults();
        record.timePeriod = fieldSetFlags()[0] ? this.timePeriod : (java.lang.Integer) defaultValue(fields()[0]);
        record.quantile = fieldSetFlags()[1] ? this.quantile : (java.lang.Integer) defaultValue(fields()[1]);
        record.totalCount = fieldSetFlags()[2] ? this.totalCount : (java.lang.Long) defaultValue(fields()[2]);
        record.totalVisits = fieldSetFlags()[3] ? this.totalVisits : (java.lang.Long) defaultValue(fields()[3]);
        record.totalSpend = fieldSetFlags()[4] ? this.totalSpend : (java.lang.Double) defaultValue(fields()[4]);
        record.totalUnits = fieldSetFlags()[5] ? this.totalUnits : (java.lang.Long) defaultValue(fields()[5]);
        record.totalDisc = fieldSetFlags()[6] ? this.totalDisc : (java.lang.Double) defaultValue(fields()[6]);
        record.avgVisits = fieldSetFlags()[7] ? this.avgVisits : (java.lang.Double) defaultValue(fields()[7]);
        record.avgSpend = fieldSetFlags()[8] ? this.avgSpend : (java.lang.Double) defaultValue(fields()[8]);
        record.avgUnits = fieldSetFlags()[9] ? this.avgUnits : (java.lang.Double) defaultValue(fields()[9]);
        record.avgDisc = fieldSetFlags()[10] ? this.avgDisc : (java.lang.Double) defaultValue(fields()[10]);
        record.avgVisitSpend = fieldSetFlags()[11] ? this.avgVisitSpend : (java.lang.Double) defaultValue(fields()[11]);
        record.avgVisitUnits = fieldSetFlags()[12] ? this.avgVisitUnits : (java.lang.Double) defaultValue(fields()[12]);
        record.avgVisitDisc = fieldSetFlags()[13] ? this.avgVisitDisc : (java.lang.Double) defaultValue(fields()[13]);
        record.avgRecency = fieldSetFlags()[14] ? this.avgRecency : (java.lang.Double) defaultValue(fields()[14]);
        record.avgItemSales = fieldSetFlags()[15] ? this.avgItemSales : (java.lang.Double) defaultValue(fields()[15]);
        record.avgItemDisc = fieldSetFlags()[16] ? this.avgItemDisc : (java.lang.Double) defaultValue(fields()[16]);
        record.totalCust = fieldSetFlags()[17] ? this.totalCust : (java.lang.Long) defaultValue(fields()[17]);
        record.avgStoreCust = fieldSetFlags()[18] ? this.avgStoreCust : (java.lang.Double) defaultValue(fields()[18]);
        record.avgCustSales = fieldSetFlags()[19] ? this.avgCustSales : (java.lang.Double) defaultValue(fields()[19]);
        record.avgCustVisits = fieldSetFlags()[20] ? this.avgCustVisits : (java.lang.Double) defaultValue(fields()[20]);
        record.avgCustUnits = fieldSetFlags()[21] ? this.avgCustUnits : (java.lang.Double) defaultValue(fields()[21]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
