/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class newTotal extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7169693417136863489L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"newTotal\",\"namespace\":\"com.brierley.avro.schemas\",\"fields\":[{\"name\":\"quantile\",\"type\":\"int\",\"doc\":\"quantile for which totals apply to in the current time period\"},{\"name\":\"newCount\",\"type\":\"long\",\"doc\":\"Count of those not seen in PREVIOUS period, those not represented in migrationArray\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** quantile for which totals apply to in the current time period */
  @Deprecated public int quantile;
  /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
  @Deprecated public long newCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public newTotal() {}

  /**
   * All-args constructor.
   * @param quantile quantile for which totals apply to in the current time period
   * @param newCount Count of those not seen in PREVIOUS period, those not represented in migrationArray
   */
  public newTotal(java.lang.Integer quantile, java.lang.Long newCount) {
    this.quantile = quantile;
    this.newCount = newCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return quantile;
    case 1: return newCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: quantile = (java.lang.Integer)value$; break;
    case 1: newCount = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'quantile' field.
   * @return quantile for which totals apply to in the current time period
   */
  public java.lang.Integer getQuantile() {
    return quantile;
  }

  /**
   * Sets the value of the 'quantile' field.
   * quantile for which totals apply to in the current time period
   * @param value the value to set.
   */
  public void setQuantile(java.lang.Integer value) {
    this.quantile = value;
  }

  /**
   * Gets the value of the 'newCount' field.
   * @return Count of those not seen in PREVIOUS period, those not represented in migrationArray
   */
  public java.lang.Long getNewCount() {
    return newCount;
  }

  /**
   * Sets the value of the 'newCount' field.
   * Count of those not seen in PREVIOUS period, those not represented in migrationArray
   * @param value the value to set.
   */
  public void setNewCount(java.lang.Long value) {
    this.newCount = value;
  }

  /**
   * Creates a new newTotal RecordBuilder.
   * @return A new newTotal RecordBuilder
   */
  public static com.brierley.avro.schemas.newTotal.Builder newBuilder() {
    return new com.brierley.avro.schemas.newTotal.Builder();
  }

  /**
   * Creates a new newTotal RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new newTotal RecordBuilder
   */
  public static com.brierley.avro.schemas.newTotal.Builder newBuilder(com.brierley.avro.schemas.newTotal.Builder other) {
    return new com.brierley.avro.schemas.newTotal.Builder(other);
  }

  /**
   * Creates a new newTotal RecordBuilder by copying an existing newTotal instance.
   * @param other The existing instance to copy.
   * @return A new newTotal RecordBuilder
   */
  public static com.brierley.avro.schemas.newTotal.Builder newBuilder(com.brierley.avro.schemas.newTotal other) {
    return new com.brierley.avro.schemas.newTotal.Builder(other);
  }

  /**
   * RecordBuilder for newTotal instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<newTotal>
    implements org.apache.avro.data.RecordBuilder<newTotal> {

    /** quantile for which totals apply to in the current time period */
    private int quantile;
    /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
    private long newCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.newTotal.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.quantile)) {
        this.quantile = data().deepCopy(fields()[0].schema(), other.quantile);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.newCount)) {
        this.newCount = data().deepCopy(fields()[1].schema(), other.newCount);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing newTotal instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.newTotal other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.quantile)) {
        this.quantile = data().deepCopy(fields()[0].schema(), other.quantile);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.newCount)) {
        this.newCount = data().deepCopy(fields()[1].schema(), other.newCount);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'quantile' field.
      * quantile for which totals apply to in the current time period
      * @return The value.
      */
    public java.lang.Integer getQuantile() {
      return quantile;
    }

    /**
      * Sets the value of the 'quantile' field.
      * quantile for which totals apply to in the current time period
      * @param value The value of 'quantile'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.newTotal.Builder setQuantile(int value) {
      validate(fields()[0], value);
      this.quantile = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'quantile' field has been set.
      * quantile for which totals apply to in the current time period
      * @return True if the 'quantile' field has been set, false otherwise.
      */
    public boolean hasQuantile() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'quantile' field.
      * quantile for which totals apply to in the current time period
      * @return This builder.
      */
    public com.brierley.avro.schemas.newTotal.Builder clearQuantile() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'newCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return The value.
      */
    public java.lang.Long getNewCount() {
      return newCount;
    }

    /**
      * Sets the value of the 'newCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @param value The value of 'newCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.newTotal.Builder setNewCount(long value) {
      validate(fields()[1], value);
      this.newCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'newCount' field has been set.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return True if the 'newCount' field has been set, false otherwise.
      */
    public boolean hasNewCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'newCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return This builder.
      */
    public com.brierley.avro.schemas.newTotal.Builder clearNewCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public newTotal build() {
      try {
        newTotal record = new newTotal();
        record.quantile = fieldSetFlags()[0] ? this.quantile : (java.lang.Integer) defaultValue(fields()[0]);
        record.newCount = fieldSetFlags()[1] ? this.newCount : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
