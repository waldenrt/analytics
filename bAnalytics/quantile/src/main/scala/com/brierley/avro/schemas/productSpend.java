/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class productSpend extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -673850917751684620L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"productSpend\",\"namespace\":\"com.brierley.avro.schemas\",\"fields\":[{\"name\":\"product\",\"type\":\"string\"},{\"name\":\"rank\",\"type\":\"int\"},{\"name\":\"spend\",\"type\":\"double\"},{\"name\":\"position\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence product;
  @Deprecated public int rank;
  @Deprecated public double spend;
  @Deprecated public java.lang.CharSequence position;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public productSpend() {}

  /**
   * All-args constructor.
   * @param product The new value for product
   * @param rank The new value for rank
   * @param spend The new value for spend
   * @param position The new value for position
   */
  public productSpend(java.lang.CharSequence product, java.lang.Integer rank, java.lang.Double spend, java.lang.CharSequence position) {
    this.product = product;
    this.rank = rank;
    this.spend = spend;
    this.position = position;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return product;
    case 1: return rank;
    case 2: return spend;
    case 3: return position;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: product = (java.lang.CharSequence)value$; break;
    case 1: rank = (java.lang.Integer)value$; break;
    case 2: spend = (java.lang.Double)value$; break;
    case 3: position = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'product' field.
   * @return The value of the 'product' field.
   */
  public java.lang.CharSequence getProduct() {
    return product;
  }

  /**
   * Sets the value of the 'product' field.
   * @param value the value to set.
   */
  public void setProduct(java.lang.CharSequence value) {
    this.product = value;
  }

  /**
   * Gets the value of the 'rank' field.
   * @return The value of the 'rank' field.
   */
  public java.lang.Integer getRank() {
    return rank;
  }

  /**
   * Sets the value of the 'rank' field.
   * @param value the value to set.
   */
  public void setRank(java.lang.Integer value) {
    this.rank = value;
  }

  /**
   * Gets the value of the 'spend' field.
   * @return The value of the 'spend' field.
   */
  public java.lang.Double getSpend() {
    return spend;
  }

  /**
   * Sets the value of the 'spend' field.
   * @param value the value to set.
   */
  public void setSpend(java.lang.Double value) {
    this.spend = value;
  }

  /**
   * Gets the value of the 'position' field.
   * @return The value of the 'position' field.
   */
  public java.lang.CharSequence getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(java.lang.CharSequence value) {
    this.position = value;
  }

  /**
   * Creates a new productSpend RecordBuilder.
   * @return A new productSpend RecordBuilder
   */
  public static com.brierley.avro.schemas.productSpend.Builder newBuilder() {
    return new com.brierley.avro.schemas.productSpend.Builder();
  }

  /**
   * Creates a new productSpend RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new productSpend RecordBuilder
   */
  public static com.brierley.avro.schemas.productSpend.Builder newBuilder(com.brierley.avro.schemas.productSpend.Builder other) {
    return new com.brierley.avro.schemas.productSpend.Builder(other);
  }

  /**
   * Creates a new productSpend RecordBuilder by copying an existing productSpend instance.
   * @param other The existing instance to copy.
   * @return A new productSpend RecordBuilder
   */
  public static com.brierley.avro.schemas.productSpend.Builder newBuilder(com.brierley.avro.schemas.productSpend other) {
    return new com.brierley.avro.schemas.productSpend.Builder(other);
  }

  /**
   * RecordBuilder for productSpend instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<productSpend>
    implements org.apache.avro.data.RecordBuilder<productSpend> {

    private java.lang.CharSequence product;
    private int rank;
    private double spend;
    private java.lang.CharSequence position;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.productSpend.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rank)) {
        this.rank = data().deepCopy(fields()[1].schema(), other.rank);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.spend)) {
        this.spend = data().deepCopy(fields()[2].schema(), other.spend);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.position)) {
        this.position = data().deepCopy(fields()[3].schema(), other.position);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing productSpend instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.productSpend other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rank)) {
        this.rank = data().deepCopy(fields()[1].schema(), other.rank);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.spend)) {
        this.spend = data().deepCopy(fields()[2].schema(), other.spend);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.position)) {
        this.position = data().deepCopy(fields()[3].schema(), other.position);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'product' field.
      * @return The value.
      */
    public java.lang.CharSequence getProduct() {
      return product;
    }

    /**
      * Sets the value of the 'product' field.
      * @param value The value of 'product'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.productSpend.Builder setProduct(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.product = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'product' field has been set.
      * @return True if the 'product' field has been set, false otherwise.
      */
    public boolean hasProduct() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'product' field.
      * @return This builder.
      */
    public com.brierley.avro.schemas.productSpend.Builder clearProduct() {
      product = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'rank' field.
      * @return The value.
      */
    public java.lang.Integer getRank() {
      return rank;
    }

    /**
      * Sets the value of the 'rank' field.
      * @param value The value of 'rank'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.productSpend.Builder setRank(int value) {
      validate(fields()[1], value);
      this.rank = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'rank' field has been set.
      * @return True if the 'rank' field has been set, false otherwise.
      */
    public boolean hasRank() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'rank' field.
      * @return This builder.
      */
    public com.brierley.avro.schemas.productSpend.Builder clearRank() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'spend' field.
      * @return The value.
      */
    public java.lang.Double getSpend() {
      return spend;
    }

    /**
      * Sets the value of the 'spend' field.
      * @param value The value of 'spend'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.productSpend.Builder setSpend(double value) {
      validate(fields()[2], value);
      this.spend = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'spend' field has been set.
      * @return True if the 'spend' field has been set, false otherwise.
      */
    public boolean hasSpend() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'spend' field.
      * @return This builder.
      */
    public com.brierley.avro.schemas.productSpend.Builder clearSpend() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * @return The value.
      */
    public java.lang.CharSequence getPosition() {
      return position;
    }

    /**
      * Sets the value of the 'position' field.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.productSpend.Builder setPosition(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.position = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'position' field.
      * @return This builder.
      */
    public com.brierley.avro.schemas.productSpend.Builder clearPosition() {
      position = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public productSpend build() {
      try {
        productSpend record = new productSpend();
        record.product = fieldSetFlags()[0] ? this.product : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.rank = fieldSetFlags()[1] ? this.rank : (java.lang.Integer) defaultValue(fields()[1]);
        record.spend = fieldSetFlags()[2] ? this.spend : (java.lang.Double) defaultValue(fields()[2]);
        record.position = fieldSetFlags()[3] ? this.position : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
