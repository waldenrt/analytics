/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Profile metrics for each time period, all metrics for a time period are on a single row */
@org.apache.avro.specific.AvroGenerated
public class lifecyleProfileResults extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3569522438673005427L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"lifecyleProfileResults\",\"namespace\":\"com.brierley.avro.schemas\",\"doc\":\"Profile metrics for each time period, all metrics for a time period are on a single row\",\"fields\":[{\"name\":\"timePeriod\",\"type\":\"int\",\"doc\":\"number of time period, most recent dates = 1\"},{\"name\":\"totalCustCount\",\"type\":\"long\",\"doc\":\"Total number of customers across all segments in given timePeriod\"},{\"name\":\"totalTxnCount\",\"type\":\"long\",\"doc\":\"Total number of transactions across all segments in given timePeriod\"},{\"name\":\"totalSales\",\"type\":\"double\",\"doc\":\"Total amount in sales across all segments in given timePeriod\"},{\"name\":\"totalItems\",\"type\":\"long\",\"doc\":\"total number of items purchased across all segments for given timePeriod\"},{\"name\":\"bestCustTotal\",\"type\":\"long\",\"doc\":\"Total number of customers in Best in Class segment in given timePeriod\"},{\"name\":\"bestTxnTotal\",\"type\":\"long\",\"doc\":\"Total number of transactions in Best in Class segment in given timePeriod\"},{\"name\":\"bestSalesTotal\",\"type\":\"double\",\"doc\":\"Total amount of sales in Best in Class segment in given timePeriod\"},{\"name\":\"bestRecencyTotal\",\"type\":\"long\",\"doc\":\"Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs\"},{\"name\":\"bestItemTotal\",\"type\":\"long\",\"doc\":\"Total number of items purchased by Best in Class segment in given timePeriod\"},{\"name\":\"bestPercentCustBase\",\"type\":\"double\",\"doc\":\"bestCustTotal divided by totalCustCount\"},{\"name\":\"bestPercentTxnBase\",\"type\":\"double\",\"doc\":\"bestTxnTotal divided by totalTxnCount\"},{\"name\":\"bestPercentSalesBase\",\"type\":\"double\",\"doc\":\"bestSalesTotal divided by totalSales\"},{\"name\":\"bestAvgFreq\",\"type\":\"double\",\"doc\":\"bestFreqTotal divided by bestCustTotal\"},{\"name\":\"bestAvgRecency\",\"type\":\"double\",\"doc\":\"bestRecencyTotal divided by bestCustTotal\"},{\"name\":\"bestAvgSales\",\"type\":\"double\",\"doc\":\"bestSalesTotal divided by bestCustTotal\"},{\"name\":\"bestAvgItems\",\"type\":\"double\",\"doc\":\"bestItemTotal divided by bestCustTotal\"},{\"name\":\"bestVisitSpend\",\"type\":\"double\",\"doc\":\"bestSalesTotal divided by bestTxnTotal\"},{\"name\":\"risingCustTotal\",\"type\":\"long\",\"doc\":\"Total number of customers in Rising Stars segment in given timePeriod\"},{\"name\":\"risingTxnTotal\",\"type\":\"long\",\"doc\":\"Total number of transactions in Rising Stars segment in given timePeriod\"},{\"name\":\"risingSalesTotal\",\"type\":\"double\",\"doc\":\"Total amount of sales in Rising Stars segment in given timePeriod\"},{\"name\":\"risingRecencyTotal\",\"type\":\"long\",\"doc\":\"Sum of all recency values in Rising Stars segment in given timePeriod, used to calc avgs\"},{\"name\":\"risingItemTotal\",\"type\":\"long\",\"doc\":\"Total number of items purchased by Rising Stars segment in given timePeriod\"},{\"name\":\"risingPercentCustBase\",\"type\":\"double\",\"doc\":\"risingCustTotal divided by totalCustCount\"},{\"name\":\"risingPercentTxnBase\",\"type\":\"double\",\"doc\":\"risingTxnTotal divided by totalTxnCount\"},{\"name\":\"risingPercentSalesBase\",\"type\":\"double\",\"doc\":\"risingSalesTotal divided by totalSales\"},{\"name\":\"risingAvgFreq\",\"type\":\"double\",\"doc\":\"risingFreqTotal divided by risingCustTotal\"},{\"name\":\"risingAvgRecency\",\"type\":\"double\",\"doc\":\"risingRecencyTotal divided by risingCustTotal\"},{\"name\":\"risingAvgSales\",\"type\":\"double\",\"doc\":\"risingSalesTotal divided by risingCustTotal\"},{\"name\":\"risingAvgItems\",\"type\":\"double\",\"doc\":\"risingItemTotal divided by risingCustTotal\"},{\"name\":\"risingVisitSpend\",\"type\":\"double\",\"doc\":\"risingSalesTotal divided by risingTxnTotal\"},{\"name\":\"middleCustTotal\",\"type\":\"long\",\"doc\":\"Total number of customers in Middle of the Road segment in given timePeriod\"},{\"name\":\"middleTxnTotal\",\"type\":\"long\",\"doc\":\"Total number of transactions in Middle of the Road segment in given timePeriod\"},{\"name\":\"middleSalesTotal\",\"type\":\"double\",\"doc\":\"Total amount of sales in Middle of the Road segment in given timePeriod\"},{\"name\":\"middleRecencyTotal\",\"type\":\"long\",\"doc\":\"Sum of all recency values in Middle of the Road segment in given timePeriod, used to calc avgs\"},{\"name\":\"middleItemTotal\",\"type\":\"long\",\"doc\":\"Total number of items purchased by Middle of the Road segment in given timePeriod\"},{\"name\":\"middlePercentCustBase\",\"type\":\"double\",\"doc\":\"middleCustTotal divided by totalCustCount\"},{\"name\":\"middlePercentTxnBase\",\"type\":\"double\",\"doc\":\"middleTxnTotal divided by totalTxnCount\"},{\"name\":\"middlePercentSalesBase\",\"type\":\"double\",\"doc\":\"middleSalesTotal divided by totalSales\"},{\"name\":\"middleAvgFreq\",\"type\":\"double\",\"doc\":\"middleFreqTotal divided by middleCustTotal\"},{\"name\":\"middleAvgRecency\",\"type\":\"double\",\"doc\":\"middleRecencyTotal divided by middleCustTotal\"},{\"name\":\"middleAvgSales\",\"type\":\"double\",\"doc\":\"middleSalesTotal divided by middleCustTotal\"},{\"name\":\"middleAvgItems\",\"type\":\"double\",\"doc\":\"middleItemTotal divided by middleCustTotal\"},{\"name\":\"middleVisitSpend\",\"type\":\"double\",\"doc\":\"middleSalesTotal divided by middleTxnTotal\"},{\"name\":\"lapsingCustTotal\",\"type\":\"long\",\"doc\":\"Total number of customers in Lapsing in given timePeriod\"},{\"name\":\"lapsingTxnTotal\",\"type\":\"long\",\"doc\":\"Total number of transactions in Lapsing segment in given timePeriod\"},{\"name\":\"lapsingSalesTotal\",\"type\":\"double\",\"doc\":\"Total amount of sales in Lapsing segment in given timePeriod\"},{\"name\":\"lapsingRecencyTotal\",\"type\":\"long\",\"doc\":\"Sum of all recency values in Lapsing segment in given timePeriod, used to calc avgs\"},{\"name\":\"lapsingItemTotal\",\"type\":\"long\",\"doc\":\"Total number of items purchased by Lapsing segment in given timePeriod\"},{\"name\":\"lapsingPercentCustBase\",\"type\":\"double\",\"doc\":\"lapsingCustTotal divided by totalCustCount\"},{\"name\":\"lapsingPercentTxnBase\",\"type\":\"double\",\"doc\":\"lapsingTxnTotal divided by totalTxnCount\"},{\"name\":\"lapsingPercentSalesBase\",\"type\":\"double\",\"doc\":\"lapsingSalesTotal divided by totalSales\"},{\"name\":\"lapsingAvgFreq\",\"type\":\"double\",\"doc\":\"lapsingFreqTotal divided by lapsingCustTotal\"},{\"name\":\"lapsingAvgRecency\",\"type\":\"double\",\"doc\":\"lapsingRecencyTotal divided by lapsingCustTotal\"},{\"name\":\"lapsingAvgSales\",\"type\":\"double\",\"doc\":\"lapsingSalesTotal divided by lapsingCustTotal\"},{\"name\":\"lapsingAvgItems\",\"type\":\"double\",\"doc\":\"lapsingItemTotal divided by lapsingCustTotal\"},{\"name\":\"lapsingVisitSpend\",\"type\":\"double\",\"doc\":\"lapsingSalesTotal divided by lapsingTxnTotal\"},{\"name\":\"deeplyCustTotal\",\"type\":\"long\",\"doc\":\"Total number of customers in Best in Class segment in given timePeriod\"},{\"name\":\"deeplyTxnTotal\",\"type\":\"long\",\"doc\":\"Total number of transactions in Best in Class segment in given timePeriod\"},{\"name\":\"deeplySalesTotal\",\"type\":\"double\",\"doc\":\"Total amount of sales in Best in Class segment in given timePeriod\"},{\"name\":\"deeplyRecencyTotal\",\"type\":\"long\",\"doc\":\"Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs\"},{\"name\":\"deeplyItemTotal\",\"type\":\"long\",\"doc\":\"Total number of items purchased by Best in Class segment in given timePeriod\"},{\"name\":\"deeplyPercentCustBase\",\"type\":\"double\",\"doc\":\"deeplyCustTotal divided by totalCustCount\"},{\"name\":\"deeplyPercentTxnBase\",\"type\":\"double\",\"doc\":\"deeplyTxnTotal divided by totalTxnCount\"},{\"name\":\"deeplyPercentSalesBase\",\"type\":\"double\",\"doc\":\"deeplySalesTotal divided by totalSales\"},{\"name\":\"deeplyAvgFreq\",\"type\":\"double\",\"doc\":\"deeplyFreqTotal divided by deeplyCustTotal\"},{\"name\":\"deeplyAvgRecency\",\"type\":\"double\",\"doc\":\"deeplyRecencyTotal divided by deeplyCustTotal\"},{\"name\":\"deeplyAvgSales\",\"type\":\"double\",\"doc\":\"deeplySalesTotal divided by deeplyCustTotal\"},{\"name\":\"deeplyAvgItems\",\"type\":\"double\",\"doc\":\"deeplyItemTotal divided by deeplyCustTotal\"},{\"name\":\"deeplyVisitSpend\",\"type\":\"double\",\"doc\":\"deeplySalesTotal divided by deeplyTxnTotal\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** number of time period, most recent dates = 1 */
  @Deprecated public int timePeriod;
  /** Total number of customers across all segments in given timePeriod */
  @Deprecated public long totalCustCount;
  /** Total number of transactions across all segments in given timePeriod */
  @Deprecated public long totalTxnCount;
  /** Total amount in sales across all segments in given timePeriod */
  @Deprecated public double totalSales;
  /** total number of items purchased across all segments for given timePeriod */
  @Deprecated public long totalItems;
  /** Total number of customers in Best in Class segment in given timePeriod */
  @Deprecated public long bestCustTotal;
  /** Total number of transactions in Best in Class segment in given timePeriod */
  @Deprecated public long bestTxnTotal;
  /** Total amount of sales in Best in Class segment in given timePeriod */
  @Deprecated public double bestSalesTotal;
  /** Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs */
  @Deprecated public long bestRecencyTotal;
  /** Total number of items purchased by Best in Class segment in given timePeriod */
  @Deprecated public long bestItemTotal;
  /** bestCustTotal divided by totalCustCount */
  @Deprecated public double bestPercentCustBase;
  /** bestTxnTotal divided by totalTxnCount */
  @Deprecated public double bestPercentTxnBase;
  /** bestSalesTotal divided by totalSales */
  @Deprecated public double bestPercentSalesBase;
  /** bestFreqTotal divided by bestCustTotal */
  @Deprecated public double bestAvgFreq;
  /** bestRecencyTotal divided by bestCustTotal */
  @Deprecated public double bestAvgRecency;
  /** bestSalesTotal divided by bestCustTotal */
  @Deprecated public double bestAvgSales;
  /** bestItemTotal divided by bestCustTotal */
  @Deprecated public double bestAvgItems;
  /** bestSalesTotal divided by bestTxnTotal */
  @Deprecated public double bestVisitSpend;
  /** Total number of customers in Rising Stars segment in given timePeriod */
  @Deprecated public long risingCustTotal;
  /** Total number of transactions in Rising Stars segment in given timePeriod */
  @Deprecated public long risingTxnTotal;
  /** Total amount of sales in Rising Stars segment in given timePeriod */
  @Deprecated public double risingSalesTotal;
  /** Sum of all recency values in Rising Stars segment in given timePeriod, used to calc avgs */
  @Deprecated public long risingRecencyTotal;
  /** Total number of items purchased by Rising Stars segment in given timePeriod */
  @Deprecated public long risingItemTotal;
  /** risingCustTotal divided by totalCustCount */
  @Deprecated public double risingPercentCustBase;
  /** risingTxnTotal divided by totalTxnCount */
  @Deprecated public double risingPercentTxnBase;
  /** risingSalesTotal divided by totalSales */
  @Deprecated public double risingPercentSalesBase;
  /** risingFreqTotal divided by risingCustTotal */
  @Deprecated public double risingAvgFreq;
  /** risingRecencyTotal divided by risingCustTotal */
  @Deprecated public double risingAvgRecency;
  /** risingSalesTotal divided by risingCustTotal */
  @Deprecated public double risingAvgSales;
  /** risingItemTotal divided by risingCustTotal */
  @Deprecated public double risingAvgItems;
  /** risingSalesTotal divided by risingTxnTotal */
  @Deprecated public double risingVisitSpend;
  /** Total number of customers in Middle of the Road segment in given timePeriod */
  @Deprecated public long middleCustTotal;
  /** Total number of transactions in Middle of the Road segment in given timePeriod */
  @Deprecated public long middleTxnTotal;
  /** Total amount of sales in Middle of the Road segment in given timePeriod */
  @Deprecated public double middleSalesTotal;
  /** Sum of all recency values in Middle of the Road segment in given timePeriod, used to calc avgs */
  @Deprecated public long middleRecencyTotal;
  /** Total number of items purchased by Middle of the Road segment in given timePeriod */
  @Deprecated public long middleItemTotal;
  /** middleCustTotal divided by totalCustCount */
  @Deprecated public double middlePercentCustBase;
  /** middleTxnTotal divided by totalTxnCount */
  @Deprecated public double middlePercentTxnBase;
  /** middleSalesTotal divided by totalSales */
  @Deprecated public double middlePercentSalesBase;
  /** middleFreqTotal divided by middleCustTotal */
  @Deprecated public double middleAvgFreq;
  /** middleRecencyTotal divided by middleCustTotal */
  @Deprecated public double middleAvgRecency;
  /** middleSalesTotal divided by middleCustTotal */
  @Deprecated public double middleAvgSales;
  /** middleItemTotal divided by middleCustTotal */
  @Deprecated public double middleAvgItems;
  /** middleSalesTotal divided by middleTxnTotal */
  @Deprecated public double middleVisitSpend;
  /** Total number of customers in Lapsing in given timePeriod */
  @Deprecated public long lapsingCustTotal;
  /** Total number of transactions in Lapsing segment in given timePeriod */
  @Deprecated public long lapsingTxnTotal;
  /** Total amount of sales in Lapsing segment in given timePeriod */
  @Deprecated public double lapsingSalesTotal;
  /** Sum of all recency values in Lapsing segment in given timePeriod, used to calc avgs */
  @Deprecated public long lapsingRecencyTotal;
  /** Total number of items purchased by Lapsing segment in given timePeriod */
  @Deprecated public long lapsingItemTotal;
  /** lapsingCustTotal divided by totalCustCount */
  @Deprecated public double lapsingPercentCustBase;
  /** lapsingTxnTotal divided by totalTxnCount */
  @Deprecated public double lapsingPercentTxnBase;
  /** lapsingSalesTotal divided by totalSales */
  @Deprecated public double lapsingPercentSalesBase;
  /** lapsingFreqTotal divided by lapsingCustTotal */
  @Deprecated public double lapsingAvgFreq;
  /** lapsingRecencyTotal divided by lapsingCustTotal */
  @Deprecated public double lapsingAvgRecency;
  /** lapsingSalesTotal divided by lapsingCustTotal */
  @Deprecated public double lapsingAvgSales;
  /** lapsingItemTotal divided by lapsingCustTotal */
  @Deprecated public double lapsingAvgItems;
  /** lapsingSalesTotal divided by lapsingTxnTotal */
  @Deprecated public double lapsingVisitSpend;
  /** Total number of customers in Best in Class segment in given timePeriod */
  @Deprecated public long deeplyCustTotal;
  /** Total number of transactions in Best in Class segment in given timePeriod */
  @Deprecated public long deeplyTxnTotal;
  /** Total amount of sales in Best in Class segment in given timePeriod */
  @Deprecated public double deeplySalesTotal;
  /** Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs */
  @Deprecated public long deeplyRecencyTotal;
  /** Total number of items purchased by Best in Class segment in given timePeriod */
  @Deprecated public long deeplyItemTotal;
  /** deeplyCustTotal divided by totalCustCount */
  @Deprecated public double deeplyPercentCustBase;
  /** deeplyTxnTotal divided by totalTxnCount */
  @Deprecated public double deeplyPercentTxnBase;
  /** deeplySalesTotal divided by totalSales */
  @Deprecated public double deeplyPercentSalesBase;
  /** deeplyFreqTotal divided by deeplyCustTotal */
  @Deprecated public double deeplyAvgFreq;
  /** deeplyRecencyTotal divided by deeplyCustTotal */
  @Deprecated public double deeplyAvgRecency;
  /** deeplySalesTotal divided by deeplyCustTotal */
  @Deprecated public double deeplyAvgSales;
  /** deeplyItemTotal divided by deeplyCustTotal */
  @Deprecated public double deeplyAvgItems;
  /** deeplySalesTotal divided by deeplyTxnTotal */
  @Deprecated public double deeplyVisitSpend;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public lifecyleProfileResults() {}

  /**
   * All-args constructor.
   * @param timePeriod number of time period, most recent dates = 1
   * @param totalCustCount Total number of customers across all segments in given timePeriod
   * @param totalTxnCount Total number of transactions across all segments in given timePeriod
   * @param totalSales Total amount in sales across all segments in given timePeriod
   * @param totalItems total number of items purchased across all segments for given timePeriod
   * @param bestCustTotal Total number of customers in Best in Class segment in given timePeriod
   * @param bestTxnTotal Total number of transactions in Best in Class segment in given timePeriod
   * @param bestSalesTotal Total amount of sales in Best in Class segment in given timePeriod
   * @param bestRecencyTotal Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
   * @param bestItemTotal Total number of items purchased by Best in Class segment in given timePeriod
   * @param bestPercentCustBase bestCustTotal divided by totalCustCount
   * @param bestPercentTxnBase bestTxnTotal divided by totalTxnCount
   * @param bestPercentSalesBase bestSalesTotal divided by totalSales
   * @param bestAvgFreq bestFreqTotal divided by bestCustTotal
   * @param bestAvgRecency bestRecencyTotal divided by bestCustTotal
   * @param bestAvgSales bestSalesTotal divided by bestCustTotal
   * @param bestAvgItems bestItemTotal divided by bestCustTotal
   * @param bestVisitSpend bestSalesTotal divided by bestTxnTotal
   * @param risingCustTotal Total number of customers in Rising Stars segment in given timePeriod
   * @param risingTxnTotal Total number of transactions in Rising Stars segment in given timePeriod
   * @param risingSalesTotal Total amount of sales in Rising Stars segment in given timePeriod
   * @param risingRecencyTotal Sum of all recency values in Rising Stars segment in given timePeriod, used to calc avgs
   * @param risingItemTotal Total number of items purchased by Rising Stars segment in given timePeriod
   * @param risingPercentCustBase risingCustTotal divided by totalCustCount
   * @param risingPercentTxnBase risingTxnTotal divided by totalTxnCount
   * @param risingPercentSalesBase risingSalesTotal divided by totalSales
   * @param risingAvgFreq risingFreqTotal divided by risingCustTotal
   * @param risingAvgRecency risingRecencyTotal divided by risingCustTotal
   * @param risingAvgSales risingSalesTotal divided by risingCustTotal
   * @param risingAvgItems risingItemTotal divided by risingCustTotal
   * @param risingVisitSpend risingSalesTotal divided by risingTxnTotal
   * @param middleCustTotal Total number of customers in Middle of the Road segment in given timePeriod
   * @param middleTxnTotal Total number of transactions in Middle of the Road segment in given timePeriod
   * @param middleSalesTotal Total amount of sales in Middle of the Road segment in given timePeriod
   * @param middleRecencyTotal Sum of all recency values in Middle of the Road segment in given timePeriod, used to calc avgs
   * @param middleItemTotal Total number of items purchased by Middle of the Road segment in given timePeriod
   * @param middlePercentCustBase middleCustTotal divided by totalCustCount
   * @param middlePercentTxnBase middleTxnTotal divided by totalTxnCount
   * @param middlePercentSalesBase middleSalesTotal divided by totalSales
   * @param middleAvgFreq middleFreqTotal divided by middleCustTotal
   * @param middleAvgRecency middleRecencyTotal divided by middleCustTotal
   * @param middleAvgSales middleSalesTotal divided by middleCustTotal
   * @param middleAvgItems middleItemTotal divided by middleCustTotal
   * @param middleVisitSpend middleSalesTotal divided by middleTxnTotal
   * @param lapsingCustTotal Total number of customers in Lapsing in given timePeriod
   * @param lapsingTxnTotal Total number of transactions in Lapsing segment in given timePeriod
   * @param lapsingSalesTotal Total amount of sales in Lapsing segment in given timePeriod
   * @param lapsingRecencyTotal Sum of all recency values in Lapsing segment in given timePeriod, used to calc avgs
   * @param lapsingItemTotal Total number of items purchased by Lapsing segment in given timePeriod
   * @param lapsingPercentCustBase lapsingCustTotal divided by totalCustCount
   * @param lapsingPercentTxnBase lapsingTxnTotal divided by totalTxnCount
   * @param lapsingPercentSalesBase lapsingSalesTotal divided by totalSales
   * @param lapsingAvgFreq lapsingFreqTotal divided by lapsingCustTotal
   * @param lapsingAvgRecency lapsingRecencyTotal divided by lapsingCustTotal
   * @param lapsingAvgSales lapsingSalesTotal divided by lapsingCustTotal
   * @param lapsingAvgItems lapsingItemTotal divided by lapsingCustTotal
   * @param lapsingVisitSpend lapsingSalesTotal divided by lapsingTxnTotal
   * @param deeplyCustTotal Total number of customers in Best in Class segment in given timePeriod
   * @param deeplyTxnTotal Total number of transactions in Best in Class segment in given timePeriod
   * @param deeplySalesTotal Total amount of sales in Best in Class segment in given timePeriod
   * @param deeplyRecencyTotal Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
   * @param deeplyItemTotal Total number of items purchased by Best in Class segment in given timePeriod
   * @param deeplyPercentCustBase deeplyCustTotal divided by totalCustCount
   * @param deeplyPercentTxnBase deeplyTxnTotal divided by totalTxnCount
   * @param deeplyPercentSalesBase deeplySalesTotal divided by totalSales
   * @param deeplyAvgFreq deeplyFreqTotal divided by deeplyCustTotal
   * @param deeplyAvgRecency deeplyRecencyTotal divided by deeplyCustTotal
   * @param deeplyAvgSales deeplySalesTotal divided by deeplyCustTotal
   * @param deeplyAvgItems deeplyItemTotal divided by deeplyCustTotal
   * @param deeplyVisitSpend deeplySalesTotal divided by deeplyTxnTotal
   */
  public lifecyleProfileResults(java.lang.Integer timePeriod, java.lang.Long totalCustCount, java.lang.Long totalTxnCount, java.lang.Double totalSales, java.lang.Long totalItems, java.lang.Long bestCustTotal, java.lang.Long bestTxnTotal, java.lang.Double bestSalesTotal, java.lang.Long bestRecencyTotal, java.lang.Long bestItemTotal, java.lang.Double bestPercentCustBase, java.lang.Double bestPercentTxnBase, java.lang.Double bestPercentSalesBase, java.lang.Double bestAvgFreq, java.lang.Double bestAvgRecency, java.lang.Double bestAvgSales, java.lang.Double bestAvgItems, java.lang.Double bestVisitSpend, java.lang.Long risingCustTotal, java.lang.Long risingTxnTotal, java.lang.Double risingSalesTotal, java.lang.Long risingRecencyTotal, java.lang.Long risingItemTotal, java.lang.Double risingPercentCustBase, java.lang.Double risingPercentTxnBase, java.lang.Double risingPercentSalesBase, java.lang.Double risingAvgFreq, java.lang.Double risingAvgRecency, java.lang.Double risingAvgSales, java.lang.Double risingAvgItems, java.lang.Double risingVisitSpend, java.lang.Long middleCustTotal, java.lang.Long middleTxnTotal, java.lang.Double middleSalesTotal, java.lang.Long middleRecencyTotal, java.lang.Long middleItemTotal, java.lang.Double middlePercentCustBase, java.lang.Double middlePercentTxnBase, java.lang.Double middlePercentSalesBase, java.lang.Double middleAvgFreq, java.lang.Double middleAvgRecency, java.lang.Double middleAvgSales, java.lang.Double middleAvgItems, java.lang.Double middleVisitSpend, java.lang.Long lapsingCustTotal, java.lang.Long lapsingTxnTotal, java.lang.Double lapsingSalesTotal, java.lang.Long lapsingRecencyTotal, java.lang.Long lapsingItemTotal, java.lang.Double lapsingPercentCustBase, java.lang.Double lapsingPercentTxnBase, java.lang.Double lapsingPercentSalesBase, java.lang.Double lapsingAvgFreq, java.lang.Double lapsingAvgRecency, java.lang.Double lapsingAvgSales, java.lang.Double lapsingAvgItems, java.lang.Double lapsingVisitSpend, java.lang.Long deeplyCustTotal, java.lang.Long deeplyTxnTotal, java.lang.Double deeplySalesTotal, java.lang.Long deeplyRecencyTotal, java.lang.Long deeplyItemTotal, java.lang.Double deeplyPercentCustBase, java.lang.Double deeplyPercentTxnBase, java.lang.Double deeplyPercentSalesBase, java.lang.Double deeplyAvgFreq, java.lang.Double deeplyAvgRecency, java.lang.Double deeplyAvgSales, java.lang.Double deeplyAvgItems, java.lang.Double deeplyVisitSpend) {
    this.timePeriod = timePeriod;
    this.totalCustCount = totalCustCount;
    this.totalTxnCount = totalTxnCount;
    this.totalSales = totalSales;
    this.totalItems = totalItems;
    this.bestCustTotal = bestCustTotal;
    this.bestTxnTotal = bestTxnTotal;
    this.bestSalesTotal = bestSalesTotal;
    this.bestRecencyTotal = bestRecencyTotal;
    this.bestItemTotal = bestItemTotal;
    this.bestPercentCustBase = bestPercentCustBase;
    this.bestPercentTxnBase = bestPercentTxnBase;
    this.bestPercentSalesBase = bestPercentSalesBase;
    this.bestAvgFreq = bestAvgFreq;
    this.bestAvgRecency = bestAvgRecency;
    this.bestAvgSales = bestAvgSales;
    this.bestAvgItems = bestAvgItems;
    this.bestVisitSpend = bestVisitSpend;
    this.risingCustTotal = risingCustTotal;
    this.risingTxnTotal = risingTxnTotal;
    this.risingSalesTotal = risingSalesTotal;
    this.risingRecencyTotal = risingRecencyTotal;
    this.risingItemTotal = risingItemTotal;
    this.risingPercentCustBase = risingPercentCustBase;
    this.risingPercentTxnBase = risingPercentTxnBase;
    this.risingPercentSalesBase = risingPercentSalesBase;
    this.risingAvgFreq = risingAvgFreq;
    this.risingAvgRecency = risingAvgRecency;
    this.risingAvgSales = risingAvgSales;
    this.risingAvgItems = risingAvgItems;
    this.risingVisitSpend = risingVisitSpend;
    this.middleCustTotal = middleCustTotal;
    this.middleTxnTotal = middleTxnTotal;
    this.middleSalesTotal = middleSalesTotal;
    this.middleRecencyTotal = middleRecencyTotal;
    this.middleItemTotal = middleItemTotal;
    this.middlePercentCustBase = middlePercentCustBase;
    this.middlePercentTxnBase = middlePercentTxnBase;
    this.middlePercentSalesBase = middlePercentSalesBase;
    this.middleAvgFreq = middleAvgFreq;
    this.middleAvgRecency = middleAvgRecency;
    this.middleAvgSales = middleAvgSales;
    this.middleAvgItems = middleAvgItems;
    this.middleVisitSpend = middleVisitSpend;
    this.lapsingCustTotal = lapsingCustTotal;
    this.lapsingTxnTotal = lapsingTxnTotal;
    this.lapsingSalesTotal = lapsingSalesTotal;
    this.lapsingRecencyTotal = lapsingRecencyTotal;
    this.lapsingItemTotal = lapsingItemTotal;
    this.lapsingPercentCustBase = lapsingPercentCustBase;
    this.lapsingPercentTxnBase = lapsingPercentTxnBase;
    this.lapsingPercentSalesBase = lapsingPercentSalesBase;
    this.lapsingAvgFreq = lapsingAvgFreq;
    this.lapsingAvgRecency = lapsingAvgRecency;
    this.lapsingAvgSales = lapsingAvgSales;
    this.lapsingAvgItems = lapsingAvgItems;
    this.lapsingVisitSpend = lapsingVisitSpend;
    this.deeplyCustTotal = deeplyCustTotal;
    this.deeplyTxnTotal = deeplyTxnTotal;
    this.deeplySalesTotal = deeplySalesTotal;
    this.deeplyRecencyTotal = deeplyRecencyTotal;
    this.deeplyItemTotal = deeplyItemTotal;
    this.deeplyPercentCustBase = deeplyPercentCustBase;
    this.deeplyPercentTxnBase = deeplyPercentTxnBase;
    this.deeplyPercentSalesBase = deeplyPercentSalesBase;
    this.deeplyAvgFreq = deeplyAvgFreq;
    this.deeplyAvgRecency = deeplyAvgRecency;
    this.deeplyAvgSales = deeplyAvgSales;
    this.deeplyAvgItems = deeplyAvgItems;
    this.deeplyVisitSpend = deeplyVisitSpend;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timePeriod;
    case 1: return totalCustCount;
    case 2: return totalTxnCount;
    case 3: return totalSales;
    case 4: return totalItems;
    case 5: return bestCustTotal;
    case 6: return bestTxnTotal;
    case 7: return bestSalesTotal;
    case 8: return bestRecencyTotal;
    case 9: return bestItemTotal;
    case 10: return bestPercentCustBase;
    case 11: return bestPercentTxnBase;
    case 12: return bestPercentSalesBase;
    case 13: return bestAvgFreq;
    case 14: return bestAvgRecency;
    case 15: return bestAvgSales;
    case 16: return bestAvgItems;
    case 17: return bestVisitSpend;
    case 18: return risingCustTotal;
    case 19: return risingTxnTotal;
    case 20: return risingSalesTotal;
    case 21: return risingRecencyTotal;
    case 22: return risingItemTotal;
    case 23: return risingPercentCustBase;
    case 24: return risingPercentTxnBase;
    case 25: return risingPercentSalesBase;
    case 26: return risingAvgFreq;
    case 27: return risingAvgRecency;
    case 28: return risingAvgSales;
    case 29: return risingAvgItems;
    case 30: return risingVisitSpend;
    case 31: return middleCustTotal;
    case 32: return middleTxnTotal;
    case 33: return middleSalesTotal;
    case 34: return middleRecencyTotal;
    case 35: return middleItemTotal;
    case 36: return middlePercentCustBase;
    case 37: return middlePercentTxnBase;
    case 38: return middlePercentSalesBase;
    case 39: return middleAvgFreq;
    case 40: return middleAvgRecency;
    case 41: return middleAvgSales;
    case 42: return middleAvgItems;
    case 43: return middleVisitSpend;
    case 44: return lapsingCustTotal;
    case 45: return lapsingTxnTotal;
    case 46: return lapsingSalesTotal;
    case 47: return lapsingRecencyTotal;
    case 48: return lapsingItemTotal;
    case 49: return lapsingPercentCustBase;
    case 50: return lapsingPercentTxnBase;
    case 51: return lapsingPercentSalesBase;
    case 52: return lapsingAvgFreq;
    case 53: return lapsingAvgRecency;
    case 54: return lapsingAvgSales;
    case 55: return lapsingAvgItems;
    case 56: return lapsingVisitSpend;
    case 57: return deeplyCustTotal;
    case 58: return deeplyTxnTotal;
    case 59: return deeplySalesTotal;
    case 60: return deeplyRecencyTotal;
    case 61: return deeplyItemTotal;
    case 62: return deeplyPercentCustBase;
    case 63: return deeplyPercentTxnBase;
    case 64: return deeplyPercentSalesBase;
    case 65: return deeplyAvgFreq;
    case 66: return deeplyAvgRecency;
    case 67: return deeplyAvgSales;
    case 68: return deeplyAvgItems;
    case 69: return deeplyVisitSpend;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timePeriod = (java.lang.Integer)value$; break;
    case 1: totalCustCount = (java.lang.Long)value$; break;
    case 2: totalTxnCount = (java.lang.Long)value$; break;
    case 3: totalSales = (java.lang.Double)value$; break;
    case 4: totalItems = (java.lang.Long)value$; break;
    case 5: bestCustTotal = (java.lang.Long)value$; break;
    case 6: bestTxnTotal = (java.lang.Long)value$; break;
    case 7: bestSalesTotal = (java.lang.Double)value$; break;
    case 8: bestRecencyTotal = (java.lang.Long)value$; break;
    case 9: bestItemTotal = (java.lang.Long)value$; break;
    case 10: bestPercentCustBase = (java.lang.Double)value$; break;
    case 11: bestPercentTxnBase = (java.lang.Double)value$; break;
    case 12: bestPercentSalesBase = (java.lang.Double)value$; break;
    case 13: bestAvgFreq = (java.lang.Double)value$; break;
    case 14: bestAvgRecency = (java.lang.Double)value$; break;
    case 15: bestAvgSales = (java.lang.Double)value$; break;
    case 16: bestAvgItems = (java.lang.Double)value$; break;
    case 17: bestVisitSpend = (java.lang.Double)value$; break;
    case 18: risingCustTotal = (java.lang.Long)value$; break;
    case 19: risingTxnTotal = (java.lang.Long)value$; break;
    case 20: risingSalesTotal = (java.lang.Double)value$; break;
    case 21: risingRecencyTotal = (java.lang.Long)value$; break;
    case 22: risingItemTotal = (java.lang.Long)value$; break;
    case 23: risingPercentCustBase = (java.lang.Double)value$; break;
    case 24: risingPercentTxnBase = (java.lang.Double)value$; break;
    case 25: risingPercentSalesBase = (java.lang.Double)value$; break;
    case 26: risingAvgFreq = (java.lang.Double)value$; break;
    case 27: risingAvgRecency = (java.lang.Double)value$; break;
    case 28: risingAvgSales = (java.lang.Double)value$; break;
    case 29: risingAvgItems = (java.lang.Double)value$; break;
    case 30: risingVisitSpend = (java.lang.Double)value$; break;
    case 31: middleCustTotal = (java.lang.Long)value$; break;
    case 32: middleTxnTotal = (java.lang.Long)value$; break;
    case 33: middleSalesTotal = (java.lang.Double)value$; break;
    case 34: middleRecencyTotal = (java.lang.Long)value$; break;
    case 35: middleItemTotal = (java.lang.Long)value$; break;
    case 36: middlePercentCustBase = (java.lang.Double)value$; break;
    case 37: middlePercentTxnBase = (java.lang.Double)value$; break;
    case 38: middlePercentSalesBase = (java.lang.Double)value$; break;
    case 39: middleAvgFreq = (java.lang.Double)value$; break;
    case 40: middleAvgRecency = (java.lang.Double)value$; break;
    case 41: middleAvgSales = (java.lang.Double)value$; break;
    case 42: middleAvgItems = (java.lang.Double)value$; break;
    case 43: middleVisitSpend = (java.lang.Double)value$; break;
    case 44: lapsingCustTotal = (java.lang.Long)value$; break;
    case 45: lapsingTxnTotal = (java.lang.Long)value$; break;
    case 46: lapsingSalesTotal = (java.lang.Double)value$; break;
    case 47: lapsingRecencyTotal = (java.lang.Long)value$; break;
    case 48: lapsingItemTotal = (java.lang.Long)value$; break;
    case 49: lapsingPercentCustBase = (java.lang.Double)value$; break;
    case 50: lapsingPercentTxnBase = (java.lang.Double)value$; break;
    case 51: lapsingPercentSalesBase = (java.lang.Double)value$; break;
    case 52: lapsingAvgFreq = (java.lang.Double)value$; break;
    case 53: lapsingAvgRecency = (java.lang.Double)value$; break;
    case 54: lapsingAvgSales = (java.lang.Double)value$; break;
    case 55: lapsingAvgItems = (java.lang.Double)value$; break;
    case 56: lapsingVisitSpend = (java.lang.Double)value$; break;
    case 57: deeplyCustTotal = (java.lang.Long)value$; break;
    case 58: deeplyTxnTotal = (java.lang.Long)value$; break;
    case 59: deeplySalesTotal = (java.lang.Double)value$; break;
    case 60: deeplyRecencyTotal = (java.lang.Long)value$; break;
    case 61: deeplyItemTotal = (java.lang.Long)value$; break;
    case 62: deeplyPercentCustBase = (java.lang.Double)value$; break;
    case 63: deeplyPercentTxnBase = (java.lang.Double)value$; break;
    case 64: deeplyPercentSalesBase = (java.lang.Double)value$; break;
    case 65: deeplyAvgFreq = (java.lang.Double)value$; break;
    case 66: deeplyAvgRecency = (java.lang.Double)value$; break;
    case 67: deeplyAvgSales = (java.lang.Double)value$; break;
    case 68: deeplyAvgItems = (java.lang.Double)value$; break;
    case 69: deeplyVisitSpend = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timePeriod' field.
   * @return number of time period, most recent dates = 1
   */
  public java.lang.Integer getTimePeriod() {
    return timePeriod;
  }

  /**
   * Sets the value of the 'timePeriod' field.
   * number of time period, most recent dates = 1
   * @param value the value to set.
   */
  public void setTimePeriod(java.lang.Integer value) {
    this.timePeriod = value;
  }

  /**
   * Gets the value of the 'totalCustCount' field.
   * @return Total number of customers across all segments in given timePeriod
   */
  public java.lang.Long getTotalCustCount() {
    return totalCustCount;
  }

  /**
   * Sets the value of the 'totalCustCount' field.
   * Total number of customers across all segments in given timePeriod
   * @param value the value to set.
   */
  public void setTotalCustCount(java.lang.Long value) {
    this.totalCustCount = value;
  }

  /**
   * Gets the value of the 'totalTxnCount' field.
   * @return Total number of transactions across all segments in given timePeriod
   */
  public java.lang.Long getTotalTxnCount() {
    return totalTxnCount;
  }

  /**
   * Sets the value of the 'totalTxnCount' field.
   * Total number of transactions across all segments in given timePeriod
   * @param value the value to set.
   */
  public void setTotalTxnCount(java.lang.Long value) {
    this.totalTxnCount = value;
  }

  /**
   * Gets the value of the 'totalSales' field.
   * @return Total amount in sales across all segments in given timePeriod
   */
  public java.lang.Double getTotalSales() {
    return totalSales;
  }

  /**
   * Sets the value of the 'totalSales' field.
   * Total amount in sales across all segments in given timePeriod
   * @param value the value to set.
   */
  public void setTotalSales(java.lang.Double value) {
    this.totalSales = value;
  }

  /**
   * Gets the value of the 'totalItems' field.
   * @return total number of items purchased across all segments for given timePeriod
   */
  public java.lang.Long getTotalItems() {
    return totalItems;
  }

  /**
   * Sets the value of the 'totalItems' field.
   * total number of items purchased across all segments for given timePeriod
   * @param value the value to set.
   */
  public void setTotalItems(java.lang.Long value) {
    this.totalItems = value;
  }

  /**
   * Gets the value of the 'bestCustTotal' field.
   * @return Total number of customers in Best in Class segment in given timePeriod
   */
  public java.lang.Long getBestCustTotal() {
    return bestCustTotal;
  }

  /**
   * Sets the value of the 'bestCustTotal' field.
   * Total number of customers in Best in Class segment in given timePeriod
   * @param value the value to set.
   */
  public void setBestCustTotal(java.lang.Long value) {
    this.bestCustTotal = value;
  }

  /**
   * Gets the value of the 'bestTxnTotal' field.
   * @return Total number of transactions in Best in Class segment in given timePeriod
   */
  public java.lang.Long getBestTxnTotal() {
    return bestTxnTotal;
  }

  /**
   * Sets the value of the 'bestTxnTotal' field.
   * Total number of transactions in Best in Class segment in given timePeriod
   * @param value the value to set.
   */
  public void setBestTxnTotal(java.lang.Long value) {
    this.bestTxnTotal = value;
  }

  /**
   * Gets the value of the 'bestSalesTotal' field.
   * @return Total amount of sales in Best in Class segment in given timePeriod
   */
  public java.lang.Double getBestSalesTotal() {
    return bestSalesTotal;
  }

  /**
   * Sets the value of the 'bestSalesTotal' field.
   * Total amount of sales in Best in Class segment in given timePeriod
   * @param value the value to set.
   */
  public void setBestSalesTotal(java.lang.Double value) {
    this.bestSalesTotal = value;
  }

  /**
   * Gets the value of the 'bestRecencyTotal' field.
   * @return Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
   */
  public java.lang.Long getBestRecencyTotal() {
    return bestRecencyTotal;
  }

  /**
   * Sets the value of the 'bestRecencyTotal' field.
   * Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
   * @param value the value to set.
   */
  public void setBestRecencyTotal(java.lang.Long value) {
    this.bestRecencyTotal = value;
  }

  /**
   * Gets the value of the 'bestItemTotal' field.
   * @return Total number of items purchased by Best in Class segment in given timePeriod
   */
  public java.lang.Long getBestItemTotal() {
    return bestItemTotal;
  }

  /**
   * Sets the value of the 'bestItemTotal' field.
   * Total number of items purchased by Best in Class segment in given timePeriod
   * @param value the value to set.
   */
  public void setBestItemTotal(java.lang.Long value) {
    this.bestItemTotal = value;
  }

  /**
   * Gets the value of the 'bestPercentCustBase' field.
   * @return bestCustTotal divided by totalCustCount
   */
  public java.lang.Double getBestPercentCustBase() {
    return bestPercentCustBase;
  }

  /**
   * Sets the value of the 'bestPercentCustBase' field.
   * bestCustTotal divided by totalCustCount
   * @param value the value to set.
   */
  public void setBestPercentCustBase(java.lang.Double value) {
    this.bestPercentCustBase = value;
  }

  /**
   * Gets the value of the 'bestPercentTxnBase' field.
   * @return bestTxnTotal divided by totalTxnCount
   */
  public java.lang.Double getBestPercentTxnBase() {
    return bestPercentTxnBase;
  }

  /**
   * Sets the value of the 'bestPercentTxnBase' field.
   * bestTxnTotal divided by totalTxnCount
   * @param value the value to set.
   */
  public void setBestPercentTxnBase(java.lang.Double value) {
    this.bestPercentTxnBase = value;
  }

  /**
   * Gets the value of the 'bestPercentSalesBase' field.
   * @return bestSalesTotal divided by totalSales
   */
  public java.lang.Double getBestPercentSalesBase() {
    return bestPercentSalesBase;
  }

  /**
   * Sets the value of the 'bestPercentSalesBase' field.
   * bestSalesTotal divided by totalSales
   * @param value the value to set.
   */
  public void setBestPercentSalesBase(java.lang.Double value) {
    this.bestPercentSalesBase = value;
  }

  /**
   * Gets the value of the 'bestAvgFreq' field.
   * @return bestFreqTotal divided by bestCustTotal
   */
  public java.lang.Double getBestAvgFreq() {
    return bestAvgFreq;
  }

  /**
   * Sets the value of the 'bestAvgFreq' field.
   * bestFreqTotal divided by bestCustTotal
   * @param value the value to set.
   */
  public void setBestAvgFreq(java.lang.Double value) {
    this.bestAvgFreq = value;
  }

  /**
   * Gets the value of the 'bestAvgRecency' field.
   * @return bestRecencyTotal divided by bestCustTotal
   */
  public java.lang.Double getBestAvgRecency() {
    return bestAvgRecency;
  }

  /**
   * Sets the value of the 'bestAvgRecency' field.
   * bestRecencyTotal divided by bestCustTotal
   * @param value the value to set.
   */
  public void setBestAvgRecency(java.lang.Double value) {
    this.bestAvgRecency = value;
  }

  /**
   * Gets the value of the 'bestAvgSales' field.
   * @return bestSalesTotal divided by bestCustTotal
   */
  public java.lang.Double getBestAvgSales() {
    return bestAvgSales;
  }

  /**
   * Sets the value of the 'bestAvgSales' field.
   * bestSalesTotal divided by bestCustTotal
   * @param value the value to set.
   */
  public void setBestAvgSales(java.lang.Double value) {
    this.bestAvgSales = value;
  }

  /**
   * Gets the value of the 'bestAvgItems' field.
   * @return bestItemTotal divided by bestCustTotal
   */
  public java.lang.Double getBestAvgItems() {
    return bestAvgItems;
  }

  /**
   * Sets the value of the 'bestAvgItems' field.
   * bestItemTotal divided by bestCustTotal
   * @param value the value to set.
   */
  public void setBestAvgItems(java.lang.Double value) {
    this.bestAvgItems = value;
  }

  /**
   * Gets the value of the 'bestVisitSpend' field.
   * @return bestSalesTotal divided by bestTxnTotal
   */
  public java.lang.Double getBestVisitSpend() {
    return bestVisitSpend;
  }

  /**
   * Sets the value of the 'bestVisitSpend' field.
   * bestSalesTotal divided by bestTxnTotal
   * @param value the value to set.
   */
  public void setBestVisitSpend(java.lang.Double value) {
    this.bestVisitSpend = value;
  }

  /**
   * Gets the value of the 'risingCustTotal' field.
   * @return Total number of customers in Rising Stars segment in given timePeriod
   */
  public java.lang.Long getRisingCustTotal() {
    return risingCustTotal;
  }

  /**
   * Sets the value of the 'risingCustTotal' field.
   * Total number of customers in Rising Stars segment in given timePeriod
   * @param value the value to set.
   */
  public void setRisingCustTotal(java.lang.Long value) {
    this.risingCustTotal = value;
  }

  /**
   * Gets the value of the 'risingTxnTotal' field.
   * @return Total number of transactions in Rising Stars segment in given timePeriod
   */
  public java.lang.Long getRisingTxnTotal() {
    return risingTxnTotal;
  }

  /**
   * Sets the value of the 'risingTxnTotal' field.
   * Total number of transactions in Rising Stars segment in given timePeriod
   * @param value the value to set.
   */
  public void setRisingTxnTotal(java.lang.Long value) {
    this.risingTxnTotal = value;
  }

  /**
   * Gets the value of the 'risingSalesTotal' field.
   * @return Total amount of sales in Rising Stars segment in given timePeriod
   */
  public java.lang.Double getRisingSalesTotal() {
    return risingSalesTotal;
  }

  /**
   * Sets the value of the 'risingSalesTotal' field.
   * Total amount of sales in Rising Stars segment in given timePeriod
   * @param value the value to set.
   */
  public void setRisingSalesTotal(java.lang.Double value) {
    this.risingSalesTotal = value;
  }

  /**
   * Gets the value of the 'risingRecencyTotal' field.
   * @return Sum of all recency values in Rising Stars segment in given timePeriod, used to calc avgs
   */
  public java.lang.Long getRisingRecencyTotal() {
    return risingRecencyTotal;
  }

  /**
   * Sets the value of the 'risingRecencyTotal' field.
   * Sum of all recency values in Rising Stars segment in given timePeriod, used to calc avgs
   * @param value the value to set.
   */
  public void setRisingRecencyTotal(java.lang.Long value) {
    this.risingRecencyTotal = value;
  }

  /**
   * Gets the value of the 'risingItemTotal' field.
   * @return Total number of items purchased by Rising Stars segment in given timePeriod
   */
  public java.lang.Long getRisingItemTotal() {
    return risingItemTotal;
  }

  /**
   * Sets the value of the 'risingItemTotal' field.
   * Total number of items purchased by Rising Stars segment in given timePeriod
   * @param value the value to set.
   */
  public void setRisingItemTotal(java.lang.Long value) {
    this.risingItemTotal = value;
  }

  /**
   * Gets the value of the 'risingPercentCustBase' field.
   * @return risingCustTotal divided by totalCustCount
   */
  public java.lang.Double getRisingPercentCustBase() {
    return risingPercentCustBase;
  }

  /**
   * Sets the value of the 'risingPercentCustBase' field.
   * risingCustTotal divided by totalCustCount
   * @param value the value to set.
   */
  public void setRisingPercentCustBase(java.lang.Double value) {
    this.risingPercentCustBase = value;
  }

  /**
   * Gets the value of the 'risingPercentTxnBase' field.
   * @return risingTxnTotal divided by totalTxnCount
   */
  public java.lang.Double getRisingPercentTxnBase() {
    return risingPercentTxnBase;
  }

  /**
   * Sets the value of the 'risingPercentTxnBase' field.
   * risingTxnTotal divided by totalTxnCount
   * @param value the value to set.
   */
  public void setRisingPercentTxnBase(java.lang.Double value) {
    this.risingPercentTxnBase = value;
  }

  /**
   * Gets the value of the 'risingPercentSalesBase' field.
   * @return risingSalesTotal divided by totalSales
   */
  public java.lang.Double getRisingPercentSalesBase() {
    return risingPercentSalesBase;
  }

  /**
   * Sets the value of the 'risingPercentSalesBase' field.
   * risingSalesTotal divided by totalSales
   * @param value the value to set.
   */
  public void setRisingPercentSalesBase(java.lang.Double value) {
    this.risingPercentSalesBase = value;
  }

  /**
   * Gets the value of the 'risingAvgFreq' field.
   * @return risingFreqTotal divided by risingCustTotal
   */
  public java.lang.Double getRisingAvgFreq() {
    return risingAvgFreq;
  }

  /**
   * Sets the value of the 'risingAvgFreq' field.
   * risingFreqTotal divided by risingCustTotal
   * @param value the value to set.
   */
  public void setRisingAvgFreq(java.lang.Double value) {
    this.risingAvgFreq = value;
  }

  /**
   * Gets the value of the 'risingAvgRecency' field.
   * @return risingRecencyTotal divided by risingCustTotal
   */
  public java.lang.Double getRisingAvgRecency() {
    return risingAvgRecency;
  }

  /**
   * Sets the value of the 'risingAvgRecency' field.
   * risingRecencyTotal divided by risingCustTotal
   * @param value the value to set.
   */
  public void setRisingAvgRecency(java.lang.Double value) {
    this.risingAvgRecency = value;
  }

  /**
   * Gets the value of the 'risingAvgSales' field.
   * @return risingSalesTotal divided by risingCustTotal
   */
  public java.lang.Double getRisingAvgSales() {
    return risingAvgSales;
  }

  /**
   * Sets the value of the 'risingAvgSales' field.
   * risingSalesTotal divided by risingCustTotal
   * @param value the value to set.
   */
  public void setRisingAvgSales(java.lang.Double value) {
    this.risingAvgSales = value;
  }

  /**
   * Gets the value of the 'risingAvgItems' field.
   * @return risingItemTotal divided by risingCustTotal
   */
  public java.lang.Double getRisingAvgItems() {
    return risingAvgItems;
  }

  /**
   * Sets the value of the 'risingAvgItems' field.
   * risingItemTotal divided by risingCustTotal
   * @param value the value to set.
   */
  public void setRisingAvgItems(java.lang.Double value) {
    this.risingAvgItems = value;
  }

  /**
   * Gets the value of the 'risingVisitSpend' field.
   * @return risingSalesTotal divided by risingTxnTotal
   */
  public java.lang.Double getRisingVisitSpend() {
    return risingVisitSpend;
  }

  /**
   * Sets the value of the 'risingVisitSpend' field.
   * risingSalesTotal divided by risingTxnTotal
   * @param value the value to set.
   */
  public void setRisingVisitSpend(java.lang.Double value) {
    this.risingVisitSpend = value;
  }

  /**
   * Gets the value of the 'middleCustTotal' field.
   * @return Total number of customers in Middle of the Road segment in given timePeriod
   */
  public java.lang.Long getMiddleCustTotal() {
    return middleCustTotal;
  }

  /**
   * Sets the value of the 'middleCustTotal' field.
   * Total number of customers in Middle of the Road segment in given timePeriod
   * @param value the value to set.
   */
  public void setMiddleCustTotal(java.lang.Long value) {
    this.middleCustTotal = value;
  }

  /**
   * Gets the value of the 'middleTxnTotal' field.
   * @return Total number of transactions in Middle of the Road segment in given timePeriod
   */
  public java.lang.Long getMiddleTxnTotal() {
    return middleTxnTotal;
  }

  /**
   * Sets the value of the 'middleTxnTotal' field.
   * Total number of transactions in Middle of the Road segment in given timePeriod
   * @param value the value to set.
   */
  public void setMiddleTxnTotal(java.lang.Long value) {
    this.middleTxnTotal = value;
  }

  /**
   * Gets the value of the 'middleSalesTotal' field.
   * @return Total amount of sales in Middle of the Road segment in given timePeriod
   */
  public java.lang.Double getMiddleSalesTotal() {
    return middleSalesTotal;
  }

  /**
   * Sets the value of the 'middleSalesTotal' field.
   * Total amount of sales in Middle of the Road segment in given timePeriod
   * @param value the value to set.
   */
  public void setMiddleSalesTotal(java.lang.Double value) {
    this.middleSalesTotal = value;
  }

  /**
   * Gets the value of the 'middleRecencyTotal' field.
   * @return Sum of all recency values in Middle of the Road segment in given timePeriod, used to calc avgs
   */
  public java.lang.Long getMiddleRecencyTotal() {
    return middleRecencyTotal;
  }

  /**
   * Sets the value of the 'middleRecencyTotal' field.
   * Sum of all recency values in Middle of the Road segment in given timePeriod, used to calc avgs
   * @param value the value to set.
   */
  public void setMiddleRecencyTotal(java.lang.Long value) {
    this.middleRecencyTotal = value;
  }

  /**
   * Gets the value of the 'middleItemTotal' field.
   * @return Total number of items purchased by Middle of the Road segment in given timePeriod
   */
  public java.lang.Long getMiddleItemTotal() {
    return middleItemTotal;
  }

  /**
   * Sets the value of the 'middleItemTotal' field.
   * Total number of items purchased by Middle of the Road segment in given timePeriod
   * @param value the value to set.
   */
  public void setMiddleItemTotal(java.lang.Long value) {
    this.middleItemTotal = value;
  }

  /**
   * Gets the value of the 'middlePercentCustBase' field.
   * @return middleCustTotal divided by totalCustCount
   */
  public java.lang.Double getMiddlePercentCustBase() {
    return middlePercentCustBase;
  }

  /**
   * Sets the value of the 'middlePercentCustBase' field.
   * middleCustTotal divided by totalCustCount
   * @param value the value to set.
   */
  public void setMiddlePercentCustBase(java.lang.Double value) {
    this.middlePercentCustBase = value;
  }

  /**
   * Gets the value of the 'middlePercentTxnBase' field.
   * @return middleTxnTotal divided by totalTxnCount
   */
  public java.lang.Double getMiddlePercentTxnBase() {
    return middlePercentTxnBase;
  }

  /**
   * Sets the value of the 'middlePercentTxnBase' field.
   * middleTxnTotal divided by totalTxnCount
   * @param value the value to set.
   */
  public void setMiddlePercentTxnBase(java.lang.Double value) {
    this.middlePercentTxnBase = value;
  }

  /**
   * Gets the value of the 'middlePercentSalesBase' field.
   * @return middleSalesTotal divided by totalSales
   */
  public java.lang.Double getMiddlePercentSalesBase() {
    return middlePercentSalesBase;
  }

  /**
   * Sets the value of the 'middlePercentSalesBase' field.
   * middleSalesTotal divided by totalSales
   * @param value the value to set.
   */
  public void setMiddlePercentSalesBase(java.lang.Double value) {
    this.middlePercentSalesBase = value;
  }

  /**
   * Gets the value of the 'middleAvgFreq' field.
   * @return middleFreqTotal divided by middleCustTotal
   */
  public java.lang.Double getMiddleAvgFreq() {
    return middleAvgFreq;
  }

  /**
   * Sets the value of the 'middleAvgFreq' field.
   * middleFreqTotal divided by middleCustTotal
   * @param value the value to set.
   */
  public void setMiddleAvgFreq(java.lang.Double value) {
    this.middleAvgFreq = value;
  }

  /**
   * Gets the value of the 'middleAvgRecency' field.
   * @return middleRecencyTotal divided by middleCustTotal
   */
  public java.lang.Double getMiddleAvgRecency() {
    return middleAvgRecency;
  }

  /**
   * Sets the value of the 'middleAvgRecency' field.
   * middleRecencyTotal divided by middleCustTotal
   * @param value the value to set.
   */
  public void setMiddleAvgRecency(java.lang.Double value) {
    this.middleAvgRecency = value;
  }

  /**
   * Gets the value of the 'middleAvgSales' field.
   * @return middleSalesTotal divided by middleCustTotal
   */
  public java.lang.Double getMiddleAvgSales() {
    return middleAvgSales;
  }

  /**
   * Sets the value of the 'middleAvgSales' field.
   * middleSalesTotal divided by middleCustTotal
   * @param value the value to set.
   */
  public void setMiddleAvgSales(java.lang.Double value) {
    this.middleAvgSales = value;
  }

  /**
   * Gets the value of the 'middleAvgItems' field.
   * @return middleItemTotal divided by middleCustTotal
   */
  public java.lang.Double getMiddleAvgItems() {
    return middleAvgItems;
  }

  /**
   * Sets the value of the 'middleAvgItems' field.
   * middleItemTotal divided by middleCustTotal
   * @param value the value to set.
   */
  public void setMiddleAvgItems(java.lang.Double value) {
    this.middleAvgItems = value;
  }

  /**
   * Gets the value of the 'middleVisitSpend' field.
   * @return middleSalesTotal divided by middleTxnTotal
   */
  public java.lang.Double getMiddleVisitSpend() {
    return middleVisitSpend;
  }

  /**
   * Sets the value of the 'middleVisitSpend' field.
   * middleSalesTotal divided by middleTxnTotal
   * @param value the value to set.
   */
  public void setMiddleVisitSpend(java.lang.Double value) {
    this.middleVisitSpend = value;
  }

  /**
   * Gets the value of the 'lapsingCustTotal' field.
   * @return Total number of customers in Lapsing in given timePeriod
   */
  public java.lang.Long getLapsingCustTotal() {
    return lapsingCustTotal;
  }

  /**
   * Sets the value of the 'lapsingCustTotal' field.
   * Total number of customers in Lapsing in given timePeriod
   * @param value the value to set.
   */
  public void setLapsingCustTotal(java.lang.Long value) {
    this.lapsingCustTotal = value;
  }

  /**
   * Gets the value of the 'lapsingTxnTotal' field.
   * @return Total number of transactions in Lapsing segment in given timePeriod
   */
  public java.lang.Long getLapsingTxnTotal() {
    return lapsingTxnTotal;
  }

  /**
   * Sets the value of the 'lapsingTxnTotal' field.
   * Total number of transactions in Lapsing segment in given timePeriod
   * @param value the value to set.
   */
  public void setLapsingTxnTotal(java.lang.Long value) {
    this.lapsingTxnTotal = value;
  }

  /**
   * Gets the value of the 'lapsingSalesTotal' field.
   * @return Total amount of sales in Lapsing segment in given timePeriod
   */
  public java.lang.Double getLapsingSalesTotal() {
    return lapsingSalesTotal;
  }

  /**
   * Sets the value of the 'lapsingSalesTotal' field.
   * Total amount of sales in Lapsing segment in given timePeriod
   * @param value the value to set.
   */
  public void setLapsingSalesTotal(java.lang.Double value) {
    this.lapsingSalesTotal = value;
  }

  /**
   * Gets the value of the 'lapsingRecencyTotal' field.
   * @return Sum of all recency values in Lapsing segment in given timePeriod, used to calc avgs
   */
  public java.lang.Long getLapsingRecencyTotal() {
    return lapsingRecencyTotal;
  }

  /**
   * Sets the value of the 'lapsingRecencyTotal' field.
   * Sum of all recency values in Lapsing segment in given timePeriod, used to calc avgs
   * @param value the value to set.
   */
  public void setLapsingRecencyTotal(java.lang.Long value) {
    this.lapsingRecencyTotal = value;
  }

  /**
   * Gets the value of the 'lapsingItemTotal' field.
   * @return Total number of items purchased by Lapsing segment in given timePeriod
   */
  public java.lang.Long getLapsingItemTotal() {
    return lapsingItemTotal;
  }

  /**
   * Sets the value of the 'lapsingItemTotal' field.
   * Total number of items purchased by Lapsing segment in given timePeriod
   * @param value the value to set.
   */
  public void setLapsingItemTotal(java.lang.Long value) {
    this.lapsingItemTotal = value;
  }

  /**
   * Gets the value of the 'lapsingPercentCustBase' field.
   * @return lapsingCustTotal divided by totalCustCount
   */
  public java.lang.Double getLapsingPercentCustBase() {
    return lapsingPercentCustBase;
  }

  /**
   * Sets the value of the 'lapsingPercentCustBase' field.
   * lapsingCustTotal divided by totalCustCount
   * @param value the value to set.
   */
  public void setLapsingPercentCustBase(java.lang.Double value) {
    this.lapsingPercentCustBase = value;
  }

  /**
   * Gets the value of the 'lapsingPercentTxnBase' field.
   * @return lapsingTxnTotal divided by totalTxnCount
   */
  public java.lang.Double getLapsingPercentTxnBase() {
    return lapsingPercentTxnBase;
  }

  /**
   * Sets the value of the 'lapsingPercentTxnBase' field.
   * lapsingTxnTotal divided by totalTxnCount
   * @param value the value to set.
   */
  public void setLapsingPercentTxnBase(java.lang.Double value) {
    this.lapsingPercentTxnBase = value;
  }

  /**
   * Gets the value of the 'lapsingPercentSalesBase' field.
   * @return lapsingSalesTotal divided by totalSales
   */
  public java.lang.Double getLapsingPercentSalesBase() {
    return lapsingPercentSalesBase;
  }

  /**
   * Sets the value of the 'lapsingPercentSalesBase' field.
   * lapsingSalesTotal divided by totalSales
   * @param value the value to set.
   */
  public void setLapsingPercentSalesBase(java.lang.Double value) {
    this.lapsingPercentSalesBase = value;
  }

  /**
   * Gets the value of the 'lapsingAvgFreq' field.
   * @return lapsingFreqTotal divided by lapsingCustTotal
   */
  public java.lang.Double getLapsingAvgFreq() {
    return lapsingAvgFreq;
  }

  /**
   * Sets the value of the 'lapsingAvgFreq' field.
   * lapsingFreqTotal divided by lapsingCustTotal
   * @param value the value to set.
   */
  public void setLapsingAvgFreq(java.lang.Double value) {
    this.lapsingAvgFreq = value;
  }

  /**
   * Gets the value of the 'lapsingAvgRecency' field.
   * @return lapsingRecencyTotal divided by lapsingCustTotal
   */
  public java.lang.Double getLapsingAvgRecency() {
    return lapsingAvgRecency;
  }

  /**
   * Sets the value of the 'lapsingAvgRecency' field.
   * lapsingRecencyTotal divided by lapsingCustTotal
   * @param value the value to set.
   */
  public void setLapsingAvgRecency(java.lang.Double value) {
    this.lapsingAvgRecency = value;
  }

  /**
   * Gets the value of the 'lapsingAvgSales' field.
   * @return lapsingSalesTotal divided by lapsingCustTotal
   */
  public java.lang.Double getLapsingAvgSales() {
    return lapsingAvgSales;
  }

  /**
   * Sets the value of the 'lapsingAvgSales' field.
   * lapsingSalesTotal divided by lapsingCustTotal
   * @param value the value to set.
   */
  public void setLapsingAvgSales(java.lang.Double value) {
    this.lapsingAvgSales = value;
  }

  /**
   * Gets the value of the 'lapsingAvgItems' field.
   * @return lapsingItemTotal divided by lapsingCustTotal
   */
  public java.lang.Double getLapsingAvgItems() {
    return lapsingAvgItems;
  }

  /**
   * Sets the value of the 'lapsingAvgItems' field.
   * lapsingItemTotal divided by lapsingCustTotal
   * @param value the value to set.
   */
  public void setLapsingAvgItems(java.lang.Double value) {
    this.lapsingAvgItems = value;
  }

  /**
   * Gets the value of the 'lapsingVisitSpend' field.
   * @return lapsingSalesTotal divided by lapsingTxnTotal
   */
  public java.lang.Double getLapsingVisitSpend() {
    return lapsingVisitSpend;
  }

  /**
   * Sets the value of the 'lapsingVisitSpend' field.
   * lapsingSalesTotal divided by lapsingTxnTotal
   * @param value the value to set.
   */
  public void setLapsingVisitSpend(java.lang.Double value) {
    this.lapsingVisitSpend = value;
  }

  /**
   * Gets the value of the 'deeplyCustTotal' field.
   * @return Total number of customers in Best in Class segment in given timePeriod
   */
  public java.lang.Long getDeeplyCustTotal() {
    return deeplyCustTotal;
  }

  /**
   * Sets the value of the 'deeplyCustTotal' field.
   * Total number of customers in Best in Class segment in given timePeriod
   * @param value the value to set.
   */
  public void setDeeplyCustTotal(java.lang.Long value) {
    this.deeplyCustTotal = value;
  }

  /**
   * Gets the value of the 'deeplyTxnTotal' field.
   * @return Total number of transactions in Best in Class segment in given timePeriod
   */
  public java.lang.Long getDeeplyTxnTotal() {
    return deeplyTxnTotal;
  }

  /**
   * Sets the value of the 'deeplyTxnTotal' field.
   * Total number of transactions in Best in Class segment in given timePeriod
   * @param value the value to set.
   */
  public void setDeeplyTxnTotal(java.lang.Long value) {
    this.deeplyTxnTotal = value;
  }

  /**
   * Gets the value of the 'deeplySalesTotal' field.
   * @return Total amount of sales in Best in Class segment in given timePeriod
   */
  public java.lang.Double getDeeplySalesTotal() {
    return deeplySalesTotal;
  }

  /**
   * Sets the value of the 'deeplySalesTotal' field.
   * Total amount of sales in Best in Class segment in given timePeriod
   * @param value the value to set.
   */
  public void setDeeplySalesTotal(java.lang.Double value) {
    this.deeplySalesTotal = value;
  }

  /**
   * Gets the value of the 'deeplyRecencyTotal' field.
   * @return Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
   */
  public java.lang.Long getDeeplyRecencyTotal() {
    return deeplyRecencyTotal;
  }

  /**
   * Sets the value of the 'deeplyRecencyTotal' field.
   * Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
   * @param value the value to set.
   */
  public void setDeeplyRecencyTotal(java.lang.Long value) {
    this.deeplyRecencyTotal = value;
  }

  /**
   * Gets the value of the 'deeplyItemTotal' field.
   * @return Total number of items purchased by Best in Class segment in given timePeriod
   */
  public java.lang.Long getDeeplyItemTotal() {
    return deeplyItemTotal;
  }

  /**
   * Sets the value of the 'deeplyItemTotal' field.
   * Total number of items purchased by Best in Class segment in given timePeriod
   * @param value the value to set.
   */
  public void setDeeplyItemTotal(java.lang.Long value) {
    this.deeplyItemTotal = value;
  }

  /**
   * Gets the value of the 'deeplyPercentCustBase' field.
   * @return deeplyCustTotal divided by totalCustCount
   */
  public java.lang.Double getDeeplyPercentCustBase() {
    return deeplyPercentCustBase;
  }

  /**
   * Sets the value of the 'deeplyPercentCustBase' field.
   * deeplyCustTotal divided by totalCustCount
   * @param value the value to set.
   */
  public void setDeeplyPercentCustBase(java.lang.Double value) {
    this.deeplyPercentCustBase = value;
  }

  /**
   * Gets the value of the 'deeplyPercentTxnBase' field.
   * @return deeplyTxnTotal divided by totalTxnCount
   */
  public java.lang.Double getDeeplyPercentTxnBase() {
    return deeplyPercentTxnBase;
  }

  /**
   * Sets the value of the 'deeplyPercentTxnBase' field.
   * deeplyTxnTotal divided by totalTxnCount
   * @param value the value to set.
   */
  public void setDeeplyPercentTxnBase(java.lang.Double value) {
    this.deeplyPercentTxnBase = value;
  }

  /**
   * Gets the value of the 'deeplyPercentSalesBase' field.
   * @return deeplySalesTotal divided by totalSales
   */
  public java.lang.Double getDeeplyPercentSalesBase() {
    return deeplyPercentSalesBase;
  }

  /**
   * Sets the value of the 'deeplyPercentSalesBase' field.
   * deeplySalesTotal divided by totalSales
   * @param value the value to set.
   */
  public void setDeeplyPercentSalesBase(java.lang.Double value) {
    this.deeplyPercentSalesBase = value;
  }

  /**
   * Gets the value of the 'deeplyAvgFreq' field.
   * @return deeplyFreqTotal divided by deeplyCustTotal
   */
  public java.lang.Double getDeeplyAvgFreq() {
    return deeplyAvgFreq;
  }

  /**
   * Sets the value of the 'deeplyAvgFreq' field.
   * deeplyFreqTotal divided by deeplyCustTotal
   * @param value the value to set.
   */
  public void setDeeplyAvgFreq(java.lang.Double value) {
    this.deeplyAvgFreq = value;
  }

  /**
   * Gets the value of the 'deeplyAvgRecency' field.
   * @return deeplyRecencyTotal divided by deeplyCustTotal
   */
  public java.lang.Double getDeeplyAvgRecency() {
    return deeplyAvgRecency;
  }

  /**
   * Sets the value of the 'deeplyAvgRecency' field.
   * deeplyRecencyTotal divided by deeplyCustTotal
   * @param value the value to set.
   */
  public void setDeeplyAvgRecency(java.lang.Double value) {
    this.deeplyAvgRecency = value;
  }

  /**
   * Gets the value of the 'deeplyAvgSales' field.
   * @return deeplySalesTotal divided by deeplyCustTotal
   */
  public java.lang.Double getDeeplyAvgSales() {
    return deeplyAvgSales;
  }

  /**
   * Sets the value of the 'deeplyAvgSales' field.
   * deeplySalesTotal divided by deeplyCustTotal
   * @param value the value to set.
   */
  public void setDeeplyAvgSales(java.lang.Double value) {
    this.deeplyAvgSales = value;
  }

  /**
   * Gets the value of the 'deeplyAvgItems' field.
   * @return deeplyItemTotal divided by deeplyCustTotal
   */
  public java.lang.Double getDeeplyAvgItems() {
    return deeplyAvgItems;
  }

  /**
   * Sets the value of the 'deeplyAvgItems' field.
   * deeplyItemTotal divided by deeplyCustTotal
   * @param value the value to set.
   */
  public void setDeeplyAvgItems(java.lang.Double value) {
    this.deeplyAvgItems = value;
  }

  /**
   * Gets the value of the 'deeplyVisitSpend' field.
   * @return deeplySalesTotal divided by deeplyTxnTotal
   */
  public java.lang.Double getDeeplyVisitSpend() {
    return deeplyVisitSpend;
  }

  /**
   * Sets the value of the 'deeplyVisitSpend' field.
   * deeplySalesTotal divided by deeplyTxnTotal
   * @param value the value to set.
   */
  public void setDeeplyVisitSpend(java.lang.Double value) {
    this.deeplyVisitSpend = value;
  }

  /**
   * Creates a new lifecyleProfileResults RecordBuilder.
   * @return A new lifecyleProfileResults RecordBuilder
   */
  public static com.brierley.avro.schemas.lifecyleProfileResults.Builder newBuilder() {
    return new com.brierley.avro.schemas.lifecyleProfileResults.Builder();
  }

  /**
   * Creates a new lifecyleProfileResults RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new lifecyleProfileResults RecordBuilder
   */
  public static com.brierley.avro.schemas.lifecyleProfileResults.Builder newBuilder(com.brierley.avro.schemas.lifecyleProfileResults.Builder other) {
    return new com.brierley.avro.schemas.lifecyleProfileResults.Builder(other);
  }

  /**
   * Creates a new lifecyleProfileResults RecordBuilder by copying an existing lifecyleProfileResults instance.
   * @param other The existing instance to copy.
   * @return A new lifecyleProfileResults RecordBuilder
   */
  public static com.brierley.avro.schemas.lifecyleProfileResults.Builder newBuilder(com.brierley.avro.schemas.lifecyleProfileResults other) {
    return new com.brierley.avro.schemas.lifecyleProfileResults.Builder(other);
  }

  /**
   * RecordBuilder for lifecyleProfileResults instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<lifecyleProfileResults>
    implements org.apache.avro.data.RecordBuilder<lifecyleProfileResults> {

    /** number of time period, most recent dates = 1 */
    private int timePeriod;
    /** Total number of customers across all segments in given timePeriod */
    private long totalCustCount;
    /** Total number of transactions across all segments in given timePeriod */
    private long totalTxnCount;
    /** Total amount in sales across all segments in given timePeriod */
    private double totalSales;
    /** total number of items purchased across all segments for given timePeriod */
    private long totalItems;
    /** Total number of customers in Best in Class segment in given timePeriod */
    private long bestCustTotal;
    /** Total number of transactions in Best in Class segment in given timePeriod */
    private long bestTxnTotal;
    /** Total amount of sales in Best in Class segment in given timePeriod */
    private double bestSalesTotal;
    /** Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs */
    private long bestRecencyTotal;
    /** Total number of items purchased by Best in Class segment in given timePeriod */
    private long bestItemTotal;
    /** bestCustTotal divided by totalCustCount */
    private double bestPercentCustBase;
    /** bestTxnTotal divided by totalTxnCount */
    private double bestPercentTxnBase;
    /** bestSalesTotal divided by totalSales */
    private double bestPercentSalesBase;
    /** bestFreqTotal divided by bestCustTotal */
    private double bestAvgFreq;
    /** bestRecencyTotal divided by bestCustTotal */
    private double bestAvgRecency;
    /** bestSalesTotal divided by bestCustTotal */
    private double bestAvgSales;
    /** bestItemTotal divided by bestCustTotal */
    private double bestAvgItems;
    /** bestSalesTotal divided by bestTxnTotal */
    private double bestVisitSpend;
    /** Total number of customers in Rising Stars segment in given timePeriod */
    private long risingCustTotal;
    /** Total number of transactions in Rising Stars segment in given timePeriod */
    private long risingTxnTotal;
    /** Total amount of sales in Rising Stars segment in given timePeriod */
    private double risingSalesTotal;
    /** Sum of all recency values in Rising Stars segment in given timePeriod, used to calc avgs */
    private long risingRecencyTotal;
    /** Total number of items purchased by Rising Stars segment in given timePeriod */
    private long risingItemTotal;
    /** risingCustTotal divided by totalCustCount */
    private double risingPercentCustBase;
    /** risingTxnTotal divided by totalTxnCount */
    private double risingPercentTxnBase;
    /** risingSalesTotal divided by totalSales */
    private double risingPercentSalesBase;
    /** risingFreqTotal divided by risingCustTotal */
    private double risingAvgFreq;
    /** risingRecencyTotal divided by risingCustTotal */
    private double risingAvgRecency;
    /** risingSalesTotal divided by risingCustTotal */
    private double risingAvgSales;
    /** risingItemTotal divided by risingCustTotal */
    private double risingAvgItems;
    /** risingSalesTotal divided by risingTxnTotal */
    private double risingVisitSpend;
    /** Total number of customers in Middle of the Road segment in given timePeriod */
    private long middleCustTotal;
    /** Total number of transactions in Middle of the Road segment in given timePeriod */
    private long middleTxnTotal;
    /** Total amount of sales in Middle of the Road segment in given timePeriod */
    private double middleSalesTotal;
    /** Sum of all recency values in Middle of the Road segment in given timePeriod, used to calc avgs */
    private long middleRecencyTotal;
    /** Total number of items purchased by Middle of the Road segment in given timePeriod */
    private long middleItemTotal;
    /** middleCustTotal divided by totalCustCount */
    private double middlePercentCustBase;
    /** middleTxnTotal divided by totalTxnCount */
    private double middlePercentTxnBase;
    /** middleSalesTotal divided by totalSales */
    private double middlePercentSalesBase;
    /** middleFreqTotal divided by middleCustTotal */
    private double middleAvgFreq;
    /** middleRecencyTotal divided by middleCustTotal */
    private double middleAvgRecency;
    /** middleSalesTotal divided by middleCustTotal */
    private double middleAvgSales;
    /** middleItemTotal divided by middleCustTotal */
    private double middleAvgItems;
    /** middleSalesTotal divided by middleTxnTotal */
    private double middleVisitSpend;
    /** Total number of customers in Lapsing in given timePeriod */
    private long lapsingCustTotal;
    /** Total number of transactions in Lapsing segment in given timePeriod */
    private long lapsingTxnTotal;
    /** Total amount of sales in Lapsing segment in given timePeriod */
    private double lapsingSalesTotal;
    /** Sum of all recency values in Lapsing segment in given timePeriod, used to calc avgs */
    private long lapsingRecencyTotal;
    /** Total number of items purchased by Lapsing segment in given timePeriod */
    private long lapsingItemTotal;
    /** lapsingCustTotal divided by totalCustCount */
    private double lapsingPercentCustBase;
    /** lapsingTxnTotal divided by totalTxnCount */
    private double lapsingPercentTxnBase;
    /** lapsingSalesTotal divided by totalSales */
    private double lapsingPercentSalesBase;
    /** lapsingFreqTotal divided by lapsingCustTotal */
    private double lapsingAvgFreq;
    /** lapsingRecencyTotal divided by lapsingCustTotal */
    private double lapsingAvgRecency;
    /** lapsingSalesTotal divided by lapsingCustTotal */
    private double lapsingAvgSales;
    /** lapsingItemTotal divided by lapsingCustTotal */
    private double lapsingAvgItems;
    /** lapsingSalesTotal divided by lapsingTxnTotal */
    private double lapsingVisitSpend;
    /** Total number of customers in Best in Class segment in given timePeriod */
    private long deeplyCustTotal;
    /** Total number of transactions in Best in Class segment in given timePeriod */
    private long deeplyTxnTotal;
    /** Total amount of sales in Best in Class segment in given timePeriod */
    private double deeplySalesTotal;
    /** Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs */
    private long deeplyRecencyTotal;
    /** Total number of items purchased by Best in Class segment in given timePeriod */
    private long deeplyItemTotal;
    /** deeplyCustTotal divided by totalCustCount */
    private double deeplyPercentCustBase;
    /** deeplyTxnTotal divided by totalTxnCount */
    private double deeplyPercentTxnBase;
    /** deeplySalesTotal divided by totalSales */
    private double deeplyPercentSalesBase;
    /** deeplyFreqTotal divided by deeplyCustTotal */
    private double deeplyAvgFreq;
    /** deeplyRecencyTotal divided by deeplyCustTotal */
    private double deeplyAvgRecency;
    /** deeplySalesTotal divided by deeplyCustTotal */
    private double deeplyAvgSales;
    /** deeplyItemTotal divided by deeplyCustTotal */
    private double deeplyAvgItems;
    /** deeplySalesTotal divided by deeplyTxnTotal */
    private double deeplyVisitSpend;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.lifecyleProfileResults.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.totalCustCount)) {
        this.totalCustCount = data().deepCopy(fields()[1].schema(), other.totalCustCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalTxnCount)) {
        this.totalTxnCount = data().deepCopy(fields()[2].schema(), other.totalTxnCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalSales)) {
        this.totalSales = data().deepCopy(fields()[3].schema(), other.totalSales);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalItems)) {
        this.totalItems = data().deepCopy(fields()[4].schema(), other.totalItems);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bestCustTotal)) {
        this.bestCustTotal = data().deepCopy(fields()[5].schema(), other.bestCustTotal);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bestTxnTotal)) {
        this.bestTxnTotal = data().deepCopy(fields()[6].schema(), other.bestTxnTotal);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bestSalesTotal)) {
        this.bestSalesTotal = data().deepCopy(fields()[7].schema(), other.bestSalesTotal);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bestRecencyTotal)) {
        this.bestRecencyTotal = data().deepCopy(fields()[8].schema(), other.bestRecencyTotal);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bestItemTotal)) {
        this.bestItemTotal = data().deepCopy(fields()[9].schema(), other.bestItemTotal);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.bestPercentCustBase)) {
        this.bestPercentCustBase = data().deepCopy(fields()[10].schema(), other.bestPercentCustBase);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.bestPercentTxnBase)) {
        this.bestPercentTxnBase = data().deepCopy(fields()[11].schema(), other.bestPercentTxnBase);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.bestPercentSalesBase)) {
        this.bestPercentSalesBase = data().deepCopy(fields()[12].schema(), other.bestPercentSalesBase);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.bestAvgFreq)) {
        this.bestAvgFreq = data().deepCopy(fields()[13].schema(), other.bestAvgFreq);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.bestAvgRecency)) {
        this.bestAvgRecency = data().deepCopy(fields()[14].schema(), other.bestAvgRecency);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.bestAvgSales)) {
        this.bestAvgSales = data().deepCopy(fields()[15].schema(), other.bestAvgSales);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.bestAvgItems)) {
        this.bestAvgItems = data().deepCopy(fields()[16].schema(), other.bestAvgItems);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.bestVisitSpend)) {
        this.bestVisitSpend = data().deepCopy(fields()[17].schema(), other.bestVisitSpend);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.risingCustTotal)) {
        this.risingCustTotal = data().deepCopy(fields()[18].schema(), other.risingCustTotal);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.risingTxnTotal)) {
        this.risingTxnTotal = data().deepCopy(fields()[19].schema(), other.risingTxnTotal);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.risingSalesTotal)) {
        this.risingSalesTotal = data().deepCopy(fields()[20].schema(), other.risingSalesTotal);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.risingRecencyTotal)) {
        this.risingRecencyTotal = data().deepCopy(fields()[21].schema(), other.risingRecencyTotal);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.risingItemTotal)) {
        this.risingItemTotal = data().deepCopy(fields()[22].schema(), other.risingItemTotal);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.risingPercentCustBase)) {
        this.risingPercentCustBase = data().deepCopy(fields()[23].schema(), other.risingPercentCustBase);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.risingPercentTxnBase)) {
        this.risingPercentTxnBase = data().deepCopy(fields()[24].schema(), other.risingPercentTxnBase);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.risingPercentSalesBase)) {
        this.risingPercentSalesBase = data().deepCopy(fields()[25].schema(), other.risingPercentSalesBase);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.risingAvgFreq)) {
        this.risingAvgFreq = data().deepCopy(fields()[26].schema(), other.risingAvgFreq);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.risingAvgRecency)) {
        this.risingAvgRecency = data().deepCopy(fields()[27].schema(), other.risingAvgRecency);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.risingAvgSales)) {
        this.risingAvgSales = data().deepCopy(fields()[28].schema(), other.risingAvgSales);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.risingAvgItems)) {
        this.risingAvgItems = data().deepCopy(fields()[29].schema(), other.risingAvgItems);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.risingVisitSpend)) {
        this.risingVisitSpend = data().deepCopy(fields()[30].schema(), other.risingVisitSpend);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.middleCustTotal)) {
        this.middleCustTotal = data().deepCopy(fields()[31].schema(), other.middleCustTotal);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.middleTxnTotal)) {
        this.middleTxnTotal = data().deepCopy(fields()[32].schema(), other.middleTxnTotal);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.middleSalesTotal)) {
        this.middleSalesTotal = data().deepCopy(fields()[33].schema(), other.middleSalesTotal);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.middleRecencyTotal)) {
        this.middleRecencyTotal = data().deepCopy(fields()[34].schema(), other.middleRecencyTotal);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.middleItemTotal)) {
        this.middleItemTotal = data().deepCopy(fields()[35].schema(), other.middleItemTotal);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.middlePercentCustBase)) {
        this.middlePercentCustBase = data().deepCopy(fields()[36].schema(), other.middlePercentCustBase);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.middlePercentTxnBase)) {
        this.middlePercentTxnBase = data().deepCopy(fields()[37].schema(), other.middlePercentTxnBase);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.middlePercentSalesBase)) {
        this.middlePercentSalesBase = data().deepCopy(fields()[38].schema(), other.middlePercentSalesBase);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.middleAvgFreq)) {
        this.middleAvgFreq = data().deepCopy(fields()[39].schema(), other.middleAvgFreq);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.middleAvgRecency)) {
        this.middleAvgRecency = data().deepCopy(fields()[40].schema(), other.middleAvgRecency);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.middleAvgSales)) {
        this.middleAvgSales = data().deepCopy(fields()[41].schema(), other.middleAvgSales);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.middleAvgItems)) {
        this.middleAvgItems = data().deepCopy(fields()[42].schema(), other.middleAvgItems);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.middleVisitSpend)) {
        this.middleVisitSpend = data().deepCopy(fields()[43].schema(), other.middleVisitSpend);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.lapsingCustTotal)) {
        this.lapsingCustTotal = data().deepCopy(fields()[44].schema(), other.lapsingCustTotal);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.lapsingTxnTotal)) {
        this.lapsingTxnTotal = data().deepCopy(fields()[45].schema(), other.lapsingTxnTotal);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.lapsingSalesTotal)) {
        this.lapsingSalesTotal = data().deepCopy(fields()[46].schema(), other.lapsingSalesTotal);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.lapsingRecencyTotal)) {
        this.lapsingRecencyTotal = data().deepCopy(fields()[47].schema(), other.lapsingRecencyTotal);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.lapsingItemTotal)) {
        this.lapsingItemTotal = data().deepCopy(fields()[48].schema(), other.lapsingItemTotal);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.lapsingPercentCustBase)) {
        this.lapsingPercentCustBase = data().deepCopy(fields()[49].schema(), other.lapsingPercentCustBase);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.lapsingPercentTxnBase)) {
        this.lapsingPercentTxnBase = data().deepCopy(fields()[50].schema(), other.lapsingPercentTxnBase);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.lapsingPercentSalesBase)) {
        this.lapsingPercentSalesBase = data().deepCopy(fields()[51].schema(), other.lapsingPercentSalesBase);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.lapsingAvgFreq)) {
        this.lapsingAvgFreq = data().deepCopy(fields()[52].schema(), other.lapsingAvgFreq);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.lapsingAvgRecency)) {
        this.lapsingAvgRecency = data().deepCopy(fields()[53].schema(), other.lapsingAvgRecency);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.lapsingAvgSales)) {
        this.lapsingAvgSales = data().deepCopy(fields()[54].schema(), other.lapsingAvgSales);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.lapsingAvgItems)) {
        this.lapsingAvgItems = data().deepCopy(fields()[55].schema(), other.lapsingAvgItems);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.lapsingVisitSpend)) {
        this.lapsingVisitSpend = data().deepCopy(fields()[56].schema(), other.lapsingVisitSpend);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.deeplyCustTotal)) {
        this.deeplyCustTotal = data().deepCopy(fields()[57].schema(), other.deeplyCustTotal);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.deeplyTxnTotal)) {
        this.deeplyTxnTotal = data().deepCopy(fields()[58].schema(), other.deeplyTxnTotal);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.deeplySalesTotal)) {
        this.deeplySalesTotal = data().deepCopy(fields()[59].schema(), other.deeplySalesTotal);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.deeplyRecencyTotal)) {
        this.deeplyRecencyTotal = data().deepCopy(fields()[60].schema(), other.deeplyRecencyTotal);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.deeplyItemTotal)) {
        this.deeplyItemTotal = data().deepCopy(fields()[61].schema(), other.deeplyItemTotal);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.deeplyPercentCustBase)) {
        this.deeplyPercentCustBase = data().deepCopy(fields()[62].schema(), other.deeplyPercentCustBase);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.deeplyPercentTxnBase)) {
        this.deeplyPercentTxnBase = data().deepCopy(fields()[63].schema(), other.deeplyPercentTxnBase);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.deeplyPercentSalesBase)) {
        this.deeplyPercentSalesBase = data().deepCopy(fields()[64].schema(), other.deeplyPercentSalesBase);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.deeplyAvgFreq)) {
        this.deeplyAvgFreq = data().deepCopy(fields()[65].schema(), other.deeplyAvgFreq);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.deeplyAvgRecency)) {
        this.deeplyAvgRecency = data().deepCopy(fields()[66].schema(), other.deeplyAvgRecency);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.deeplyAvgSales)) {
        this.deeplyAvgSales = data().deepCopy(fields()[67].schema(), other.deeplyAvgSales);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.deeplyAvgItems)) {
        this.deeplyAvgItems = data().deepCopy(fields()[68].schema(), other.deeplyAvgItems);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.deeplyVisitSpend)) {
        this.deeplyVisitSpend = data().deepCopy(fields()[69].schema(), other.deeplyVisitSpend);
        fieldSetFlags()[69] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing lifecyleProfileResults instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.lifecyleProfileResults other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.totalCustCount)) {
        this.totalCustCount = data().deepCopy(fields()[1].schema(), other.totalCustCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalTxnCount)) {
        this.totalTxnCount = data().deepCopy(fields()[2].schema(), other.totalTxnCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalSales)) {
        this.totalSales = data().deepCopy(fields()[3].schema(), other.totalSales);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalItems)) {
        this.totalItems = data().deepCopy(fields()[4].schema(), other.totalItems);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bestCustTotal)) {
        this.bestCustTotal = data().deepCopy(fields()[5].schema(), other.bestCustTotal);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bestTxnTotal)) {
        this.bestTxnTotal = data().deepCopy(fields()[6].schema(), other.bestTxnTotal);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bestSalesTotal)) {
        this.bestSalesTotal = data().deepCopy(fields()[7].schema(), other.bestSalesTotal);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bestRecencyTotal)) {
        this.bestRecencyTotal = data().deepCopy(fields()[8].schema(), other.bestRecencyTotal);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bestItemTotal)) {
        this.bestItemTotal = data().deepCopy(fields()[9].schema(), other.bestItemTotal);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.bestPercentCustBase)) {
        this.bestPercentCustBase = data().deepCopy(fields()[10].schema(), other.bestPercentCustBase);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.bestPercentTxnBase)) {
        this.bestPercentTxnBase = data().deepCopy(fields()[11].schema(), other.bestPercentTxnBase);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.bestPercentSalesBase)) {
        this.bestPercentSalesBase = data().deepCopy(fields()[12].schema(), other.bestPercentSalesBase);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.bestAvgFreq)) {
        this.bestAvgFreq = data().deepCopy(fields()[13].schema(), other.bestAvgFreq);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.bestAvgRecency)) {
        this.bestAvgRecency = data().deepCopy(fields()[14].schema(), other.bestAvgRecency);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.bestAvgSales)) {
        this.bestAvgSales = data().deepCopy(fields()[15].schema(), other.bestAvgSales);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.bestAvgItems)) {
        this.bestAvgItems = data().deepCopy(fields()[16].schema(), other.bestAvgItems);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.bestVisitSpend)) {
        this.bestVisitSpend = data().deepCopy(fields()[17].schema(), other.bestVisitSpend);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.risingCustTotal)) {
        this.risingCustTotal = data().deepCopy(fields()[18].schema(), other.risingCustTotal);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.risingTxnTotal)) {
        this.risingTxnTotal = data().deepCopy(fields()[19].schema(), other.risingTxnTotal);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.risingSalesTotal)) {
        this.risingSalesTotal = data().deepCopy(fields()[20].schema(), other.risingSalesTotal);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.risingRecencyTotal)) {
        this.risingRecencyTotal = data().deepCopy(fields()[21].schema(), other.risingRecencyTotal);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.risingItemTotal)) {
        this.risingItemTotal = data().deepCopy(fields()[22].schema(), other.risingItemTotal);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.risingPercentCustBase)) {
        this.risingPercentCustBase = data().deepCopy(fields()[23].schema(), other.risingPercentCustBase);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.risingPercentTxnBase)) {
        this.risingPercentTxnBase = data().deepCopy(fields()[24].schema(), other.risingPercentTxnBase);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.risingPercentSalesBase)) {
        this.risingPercentSalesBase = data().deepCopy(fields()[25].schema(), other.risingPercentSalesBase);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.risingAvgFreq)) {
        this.risingAvgFreq = data().deepCopy(fields()[26].schema(), other.risingAvgFreq);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.risingAvgRecency)) {
        this.risingAvgRecency = data().deepCopy(fields()[27].schema(), other.risingAvgRecency);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.risingAvgSales)) {
        this.risingAvgSales = data().deepCopy(fields()[28].schema(), other.risingAvgSales);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.risingAvgItems)) {
        this.risingAvgItems = data().deepCopy(fields()[29].schema(), other.risingAvgItems);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.risingVisitSpend)) {
        this.risingVisitSpend = data().deepCopy(fields()[30].schema(), other.risingVisitSpend);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.middleCustTotal)) {
        this.middleCustTotal = data().deepCopy(fields()[31].schema(), other.middleCustTotal);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.middleTxnTotal)) {
        this.middleTxnTotal = data().deepCopy(fields()[32].schema(), other.middleTxnTotal);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.middleSalesTotal)) {
        this.middleSalesTotal = data().deepCopy(fields()[33].schema(), other.middleSalesTotal);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.middleRecencyTotal)) {
        this.middleRecencyTotal = data().deepCopy(fields()[34].schema(), other.middleRecencyTotal);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.middleItemTotal)) {
        this.middleItemTotal = data().deepCopy(fields()[35].schema(), other.middleItemTotal);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.middlePercentCustBase)) {
        this.middlePercentCustBase = data().deepCopy(fields()[36].schema(), other.middlePercentCustBase);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.middlePercentTxnBase)) {
        this.middlePercentTxnBase = data().deepCopy(fields()[37].schema(), other.middlePercentTxnBase);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.middlePercentSalesBase)) {
        this.middlePercentSalesBase = data().deepCopy(fields()[38].schema(), other.middlePercentSalesBase);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.middleAvgFreq)) {
        this.middleAvgFreq = data().deepCopy(fields()[39].schema(), other.middleAvgFreq);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.middleAvgRecency)) {
        this.middleAvgRecency = data().deepCopy(fields()[40].schema(), other.middleAvgRecency);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.middleAvgSales)) {
        this.middleAvgSales = data().deepCopy(fields()[41].schema(), other.middleAvgSales);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.middleAvgItems)) {
        this.middleAvgItems = data().deepCopy(fields()[42].schema(), other.middleAvgItems);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.middleVisitSpend)) {
        this.middleVisitSpend = data().deepCopy(fields()[43].schema(), other.middleVisitSpend);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.lapsingCustTotal)) {
        this.lapsingCustTotal = data().deepCopy(fields()[44].schema(), other.lapsingCustTotal);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.lapsingTxnTotal)) {
        this.lapsingTxnTotal = data().deepCopy(fields()[45].schema(), other.lapsingTxnTotal);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.lapsingSalesTotal)) {
        this.lapsingSalesTotal = data().deepCopy(fields()[46].schema(), other.lapsingSalesTotal);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.lapsingRecencyTotal)) {
        this.lapsingRecencyTotal = data().deepCopy(fields()[47].schema(), other.lapsingRecencyTotal);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.lapsingItemTotal)) {
        this.lapsingItemTotal = data().deepCopy(fields()[48].schema(), other.lapsingItemTotal);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.lapsingPercentCustBase)) {
        this.lapsingPercentCustBase = data().deepCopy(fields()[49].schema(), other.lapsingPercentCustBase);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.lapsingPercentTxnBase)) {
        this.lapsingPercentTxnBase = data().deepCopy(fields()[50].schema(), other.lapsingPercentTxnBase);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.lapsingPercentSalesBase)) {
        this.lapsingPercentSalesBase = data().deepCopy(fields()[51].schema(), other.lapsingPercentSalesBase);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.lapsingAvgFreq)) {
        this.lapsingAvgFreq = data().deepCopy(fields()[52].schema(), other.lapsingAvgFreq);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.lapsingAvgRecency)) {
        this.lapsingAvgRecency = data().deepCopy(fields()[53].schema(), other.lapsingAvgRecency);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.lapsingAvgSales)) {
        this.lapsingAvgSales = data().deepCopy(fields()[54].schema(), other.lapsingAvgSales);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.lapsingAvgItems)) {
        this.lapsingAvgItems = data().deepCopy(fields()[55].schema(), other.lapsingAvgItems);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.lapsingVisitSpend)) {
        this.lapsingVisitSpend = data().deepCopy(fields()[56].schema(), other.lapsingVisitSpend);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.deeplyCustTotal)) {
        this.deeplyCustTotal = data().deepCopy(fields()[57].schema(), other.deeplyCustTotal);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.deeplyTxnTotal)) {
        this.deeplyTxnTotal = data().deepCopy(fields()[58].schema(), other.deeplyTxnTotal);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.deeplySalesTotal)) {
        this.deeplySalesTotal = data().deepCopy(fields()[59].schema(), other.deeplySalesTotal);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.deeplyRecencyTotal)) {
        this.deeplyRecencyTotal = data().deepCopy(fields()[60].schema(), other.deeplyRecencyTotal);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.deeplyItemTotal)) {
        this.deeplyItemTotal = data().deepCopy(fields()[61].schema(), other.deeplyItemTotal);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.deeplyPercentCustBase)) {
        this.deeplyPercentCustBase = data().deepCopy(fields()[62].schema(), other.deeplyPercentCustBase);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.deeplyPercentTxnBase)) {
        this.deeplyPercentTxnBase = data().deepCopy(fields()[63].schema(), other.deeplyPercentTxnBase);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.deeplyPercentSalesBase)) {
        this.deeplyPercentSalesBase = data().deepCopy(fields()[64].schema(), other.deeplyPercentSalesBase);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.deeplyAvgFreq)) {
        this.deeplyAvgFreq = data().deepCopy(fields()[65].schema(), other.deeplyAvgFreq);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.deeplyAvgRecency)) {
        this.deeplyAvgRecency = data().deepCopy(fields()[66].schema(), other.deeplyAvgRecency);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.deeplyAvgSales)) {
        this.deeplyAvgSales = data().deepCopy(fields()[67].schema(), other.deeplyAvgSales);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.deeplyAvgItems)) {
        this.deeplyAvgItems = data().deepCopy(fields()[68].schema(), other.deeplyAvgItems);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.deeplyVisitSpend)) {
        this.deeplyVisitSpend = data().deepCopy(fields()[69].schema(), other.deeplyVisitSpend);
        fieldSetFlags()[69] = true;
      }
    }

    /**
      * Gets the value of the 'timePeriod' field.
      * number of time period, most recent dates = 1
      * @return The value.
      */
    public java.lang.Integer getTimePeriod() {
      return timePeriod;
    }

    /**
      * Sets the value of the 'timePeriod' field.
      * number of time period, most recent dates = 1
      * @param value The value of 'timePeriod'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setTimePeriod(int value) {
      validate(fields()[0], value);
      this.timePeriod = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timePeriod' field has been set.
      * number of time period, most recent dates = 1
      * @return True if the 'timePeriod' field has been set, false otherwise.
      */
    public boolean hasTimePeriod() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timePeriod' field.
      * number of time period, most recent dates = 1
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearTimePeriod() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalCustCount' field.
      * Total number of customers across all segments in given timePeriod
      * @return The value.
      */
    public java.lang.Long getTotalCustCount() {
      return totalCustCount;
    }

    /**
      * Sets the value of the 'totalCustCount' field.
      * Total number of customers across all segments in given timePeriod
      * @param value The value of 'totalCustCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setTotalCustCount(long value) {
      validate(fields()[1], value);
      this.totalCustCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'totalCustCount' field has been set.
      * Total number of customers across all segments in given timePeriod
      * @return True if the 'totalCustCount' field has been set, false otherwise.
      */
    public boolean hasTotalCustCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'totalCustCount' field.
      * Total number of customers across all segments in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearTotalCustCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalTxnCount' field.
      * Total number of transactions across all segments in given timePeriod
      * @return The value.
      */
    public java.lang.Long getTotalTxnCount() {
      return totalTxnCount;
    }

    /**
      * Sets the value of the 'totalTxnCount' field.
      * Total number of transactions across all segments in given timePeriod
      * @param value The value of 'totalTxnCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setTotalTxnCount(long value) {
      validate(fields()[2], value);
      this.totalTxnCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'totalTxnCount' field has been set.
      * Total number of transactions across all segments in given timePeriod
      * @return True if the 'totalTxnCount' field has been set, false otherwise.
      */
    public boolean hasTotalTxnCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'totalTxnCount' field.
      * Total number of transactions across all segments in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearTotalTxnCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSales' field.
      * Total amount in sales across all segments in given timePeriod
      * @return The value.
      */
    public java.lang.Double getTotalSales() {
      return totalSales;
    }

    /**
      * Sets the value of the 'totalSales' field.
      * Total amount in sales across all segments in given timePeriod
      * @param value The value of 'totalSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setTotalSales(double value) {
      validate(fields()[3], value);
      this.totalSales = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSales' field has been set.
      * Total amount in sales across all segments in given timePeriod
      * @return True if the 'totalSales' field has been set, false otherwise.
      */
    public boolean hasTotalSales() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalSales' field.
      * Total amount in sales across all segments in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearTotalSales() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalItems' field.
      * total number of items purchased across all segments for given timePeriod
      * @return The value.
      */
    public java.lang.Long getTotalItems() {
      return totalItems;
    }

    /**
      * Sets the value of the 'totalItems' field.
      * total number of items purchased across all segments for given timePeriod
      * @param value The value of 'totalItems'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setTotalItems(long value) {
      validate(fields()[4], value);
      this.totalItems = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalItems' field has been set.
      * total number of items purchased across all segments for given timePeriod
      * @return True if the 'totalItems' field has been set, false otherwise.
      */
    public boolean hasTotalItems() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'totalItems' field.
      * total number of items purchased across all segments for given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearTotalItems() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestCustTotal' field.
      * Total number of customers in Best in Class segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getBestCustTotal() {
      return bestCustTotal;
    }

    /**
      * Sets the value of the 'bestCustTotal' field.
      * Total number of customers in Best in Class segment in given timePeriod
      * @param value The value of 'bestCustTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestCustTotal(long value) {
      validate(fields()[5], value);
      this.bestCustTotal = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'bestCustTotal' field has been set.
      * Total number of customers in Best in Class segment in given timePeriod
      * @return True if the 'bestCustTotal' field has been set, false otherwise.
      */
    public boolean hasBestCustTotal() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'bestCustTotal' field.
      * Total number of customers in Best in Class segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestCustTotal() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestTxnTotal' field.
      * Total number of transactions in Best in Class segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getBestTxnTotal() {
      return bestTxnTotal;
    }

    /**
      * Sets the value of the 'bestTxnTotal' field.
      * Total number of transactions in Best in Class segment in given timePeriod
      * @param value The value of 'bestTxnTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestTxnTotal(long value) {
      validate(fields()[6], value);
      this.bestTxnTotal = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'bestTxnTotal' field has been set.
      * Total number of transactions in Best in Class segment in given timePeriod
      * @return True if the 'bestTxnTotal' field has been set, false otherwise.
      */
    public boolean hasBestTxnTotal() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'bestTxnTotal' field.
      * Total number of transactions in Best in Class segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestTxnTotal() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestSalesTotal' field.
      * Total amount of sales in Best in Class segment in given timePeriod
      * @return The value.
      */
    public java.lang.Double getBestSalesTotal() {
      return bestSalesTotal;
    }

    /**
      * Sets the value of the 'bestSalesTotal' field.
      * Total amount of sales in Best in Class segment in given timePeriod
      * @param value The value of 'bestSalesTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestSalesTotal(double value) {
      validate(fields()[7], value);
      this.bestSalesTotal = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'bestSalesTotal' field has been set.
      * Total amount of sales in Best in Class segment in given timePeriod
      * @return True if the 'bestSalesTotal' field has been set, false otherwise.
      */
    public boolean hasBestSalesTotal() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'bestSalesTotal' field.
      * Total amount of sales in Best in Class segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestSalesTotal() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestRecencyTotal' field.
      * Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
      * @return The value.
      */
    public java.lang.Long getBestRecencyTotal() {
      return bestRecencyTotal;
    }

    /**
      * Sets the value of the 'bestRecencyTotal' field.
      * Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
      * @param value The value of 'bestRecencyTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestRecencyTotal(long value) {
      validate(fields()[8], value);
      this.bestRecencyTotal = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'bestRecencyTotal' field has been set.
      * Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
      * @return True if the 'bestRecencyTotal' field has been set, false otherwise.
      */
    public boolean hasBestRecencyTotal() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'bestRecencyTotal' field.
      * Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestRecencyTotal() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestItemTotal' field.
      * Total number of items purchased by Best in Class segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getBestItemTotal() {
      return bestItemTotal;
    }

    /**
      * Sets the value of the 'bestItemTotal' field.
      * Total number of items purchased by Best in Class segment in given timePeriod
      * @param value The value of 'bestItemTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestItemTotal(long value) {
      validate(fields()[9], value);
      this.bestItemTotal = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'bestItemTotal' field has been set.
      * Total number of items purchased by Best in Class segment in given timePeriod
      * @return True if the 'bestItemTotal' field has been set, false otherwise.
      */
    public boolean hasBestItemTotal() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'bestItemTotal' field.
      * Total number of items purchased by Best in Class segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestItemTotal() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestPercentCustBase' field.
      * bestCustTotal divided by totalCustCount
      * @return The value.
      */
    public java.lang.Double getBestPercentCustBase() {
      return bestPercentCustBase;
    }

    /**
      * Sets the value of the 'bestPercentCustBase' field.
      * bestCustTotal divided by totalCustCount
      * @param value The value of 'bestPercentCustBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestPercentCustBase(double value) {
      validate(fields()[10], value);
      this.bestPercentCustBase = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'bestPercentCustBase' field has been set.
      * bestCustTotal divided by totalCustCount
      * @return True if the 'bestPercentCustBase' field has been set, false otherwise.
      */
    public boolean hasBestPercentCustBase() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'bestPercentCustBase' field.
      * bestCustTotal divided by totalCustCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestPercentCustBase() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestPercentTxnBase' field.
      * bestTxnTotal divided by totalTxnCount
      * @return The value.
      */
    public java.lang.Double getBestPercentTxnBase() {
      return bestPercentTxnBase;
    }

    /**
      * Sets the value of the 'bestPercentTxnBase' field.
      * bestTxnTotal divided by totalTxnCount
      * @param value The value of 'bestPercentTxnBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestPercentTxnBase(double value) {
      validate(fields()[11], value);
      this.bestPercentTxnBase = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'bestPercentTxnBase' field has been set.
      * bestTxnTotal divided by totalTxnCount
      * @return True if the 'bestPercentTxnBase' field has been set, false otherwise.
      */
    public boolean hasBestPercentTxnBase() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'bestPercentTxnBase' field.
      * bestTxnTotal divided by totalTxnCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestPercentTxnBase() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestPercentSalesBase' field.
      * bestSalesTotal divided by totalSales
      * @return The value.
      */
    public java.lang.Double getBestPercentSalesBase() {
      return bestPercentSalesBase;
    }

    /**
      * Sets the value of the 'bestPercentSalesBase' field.
      * bestSalesTotal divided by totalSales
      * @param value The value of 'bestPercentSalesBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestPercentSalesBase(double value) {
      validate(fields()[12], value);
      this.bestPercentSalesBase = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'bestPercentSalesBase' field has been set.
      * bestSalesTotal divided by totalSales
      * @return True if the 'bestPercentSalesBase' field has been set, false otherwise.
      */
    public boolean hasBestPercentSalesBase() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'bestPercentSalesBase' field.
      * bestSalesTotal divided by totalSales
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestPercentSalesBase() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestAvgFreq' field.
      * bestFreqTotal divided by bestCustTotal
      * @return The value.
      */
    public java.lang.Double getBestAvgFreq() {
      return bestAvgFreq;
    }

    /**
      * Sets the value of the 'bestAvgFreq' field.
      * bestFreqTotal divided by bestCustTotal
      * @param value The value of 'bestAvgFreq'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestAvgFreq(double value) {
      validate(fields()[13], value);
      this.bestAvgFreq = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'bestAvgFreq' field has been set.
      * bestFreqTotal divided by bestCustTotal
      * @return True if the 'bestAvgFreq' field has been set, false otherwise.
      */
    public boolean hasBestAvgFreq() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'bestAvgFreq' field.
      * bestFreqTotal divided by bestCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestAvgFreq() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestAvgRecency' field.
      * bestRecencyTotal divided by bestCustTotal
      * @return The value.
      */
    public java.lang.Double getBestAvgRecency() {
      return bestAvgRecency;
    }

    /**
      * Sets the value of the 'bestAvgRecency' field.
      * bestRecencyTotal divided by bestCustTotal
      * @param value The value of 'bestAvgRecency'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestAvgRecency(double value) {
      validate(fields()[14], value);
      this.bestAvgRecency = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'bestAvgRecency' field has been set.
      * bestRecencyTotal divided by bestCustTotal
      * @return True if the 'bestAvgRecency' field has been set, false otherwise.
      */
    public boolean hasBestAvgRecency() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'bestAvgRecency' field.
      * bestRecencyTotal divided by bestCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestAvgRecency() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestAvgSales' field.
      * bestSalesTotal divided by bestCustTotal
      * @return The value.
      */
    public java.lang.Double getBestAvgSales() {
      return bestAvgSales;
    }

    /**
      * Sets the value of the 'bestAvgSales' field.
      * bestSalesTotal divided by bestCustTotal
      * @param value The value of 'bestAvgSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestAvgSales(double value) {
      validate(fields()[15], value);
      this.bestAvgSales = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'bestAvgSales' field has been set.
      * bestSalesTotal divided by bestCustTotal
      * @return True if the 'bestAvgSales' field has been set, false otherwise.
      */
    public boolean hasBestAvgSales() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'bestAvgSales' field.
      * bestSalesTotal divided by bestCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestAvgSales() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestAvgItems' field.
      * bestItemTotal divided by bestCustTotal
      * @return The value.
      */
    public java.lang.Double getBestAvgItems() {
      return bestAvgItems;
    }

    /**
      * Sets the value of the 'bestAvgItems' field.
      * bestItemTotal divided by bestCustTotal
      * @param value The value of 'bestAvgItems'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestAvgItems(double value) {
      validate(fields()[16], value);
      this.bestAvgItems = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'bestAvgItems' field has been set.
      * bestItemTotal divided by bestCustTotal
      * @return True if the 'bestAvgItems' field has been set, false otherwise.
      */
    public boolean hasBestAvgItems() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'bestAvgItems' field.
      * bestItemTotal divided by bestCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestAvgItems() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestVisitSpend' field.
      * bestSalesTotal divided by bestTxnTotal
      * @return The value.
      */
    public java.lang.Double getBestVisitSpend() {
      return bestVisitSpend;
    }

    /**
      * Sets the value of the 'bestVisitSpend' field.
      * bestSalesTotal divided by bestTxnTotal
      * @param value The value of 'bestVisitSpend'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setBestVisitSpend(double value) {
      validate(fields()[17], value);
      this.bestVisitSpend = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'bestVisitSpend' field has been set.
      * bestSalesTotal divided by bestTxnTotal
      * @return True if the 'bestVisitSpend' field has been set, false otherwise.
      */
    public boolean hasBestVisitSpend() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'bestVisitSpend' field.
      * bestSalesTotal divided by bestTxnTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearBestVisitSpend() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingCustTotal' field.
      * Total number of customers in Rising Stars segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getRisingCustTotal() {
      return risingCustTotal;
    }

    /**
      * Sets the value of the 'risingCustTotal' field.
      * Total number of customers in Rising Stars segment in given timePeriod
      * @param value The value of 'risingCustTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingCustTotal(long value) {
      validate(fields()[18], value);
      this.risingCustTotal = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'risingCustTotal' field has been set.
      * Total number of customers in Rising Stars segment in given timePeriod
      * @return True if the 'risingCustTotal' field has been set, false otherwise.
      */
    public boolean hasRisingCustTotal() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'risingCustTotal' field.
      * Total number of customers in Rising Stars segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingCustTotal() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingTxnTotal' field.
      * Total number of transactions in Rising Stars segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getRisingTxnTotal() {
      return risingTxnTotal;
    }

    /**
      * Sets the value of the 'risingTxnTotal' field.
      * Total number of transactions in Rising Stars segment in given timePeriod
      * @param value The value of 'risingTxnTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingTxnTotal(long value) {
      validate(fields()[19], value);
      this.risingTxnTotal = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'risingTxnTotal' field has been set.
      * Total number of transactions in Rising Stars segment in given timePeriod
      * @return True if the 'risingTxnTotal' field has been set, false otherwise.
      */
    public boolean hasRisingTxnTotal() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'risingTxnTotal' field.
      * Total number of transactions in Rising Stars segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingTxnTotal() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingSalesTotal' field.
      * Total amount of sales in Rising Stars segment in given timePeriod
      * @return The value.
      */
    public java.lang.Double getRisingSalesTotal() {
      return risingSalesTotal;
    }

    /**
      * Sets the value of the 'risingSalesTotal' field.
      * Total amount of sales in Rising Stars segment in given timePeriod
      * @param value The value of 'risingSalesTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingSalesTotal(double value) {
      validate(fields()[20], value);
      this.risingSalesTotal = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'risingSalesTotal' field has been set.
      * Total amount of sales in Rising Stars segment in given timePeriod
      * @return True if the 'risingSalesTotal' field has been set, false otherwise.
      */
    public boolean hasRisingSalesTotal() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'risingSalesTotal' field.
      * Total amount of sales in Rising Stars segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingSalesTotal() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingRecencyTotal' field.
      * Sum of all recency values in Rising Stars segment in given timePeriod, used to calc avgs
      * @return The value.
      */
    public java.lang.Long getRisingRecencyTotal() {
      return risingRecencyTotal;
    }

    /**
      * Sets the value of the 'risingRecencyTotal' field.
      * Sum of all recency values in Rising Stars segment in given timePeriod, used to calc avgs
      * @param value The value of 'risingRecencyTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingRecencyTotal(long value) {
      validate(fields()[21], value);
      this.risingRecencyTotal = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'risingRecencyTotal' field has been set.
      * Sum of all recency values in Rising Stars segment in given timePeriod, used to calc avgs
      * @return True if the 'risingRecencyTotal' field has been set, false otherwise.
      */
    public boolean hasRisingRecencyTotal() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'risingRecencyTotal' field.
      * Sum of all recency values in Rising Stars segment in given timePeriod, used to calc avgs
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingRecencyTotal() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingItemTotal' field.
      * Total number of items purchased by Rising Stars segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getRisingItemTotal() {
      return risingItemTotal;
    }

    /**
      * Sets the value of the 'risingItemTotal' field.
      * Total number of items purchased by Rising Stars segment in given timePeriod
      * @param value The value of 'risingItemTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingItemTotal(long value) {
      validate(fields()[22], value);
      this.risingItemTotal = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'risingItemTotal' field has been set.
      * Total number of items purchased by Rising Stars segment in given timePeriod
      * @return True if the 'risingItemTotal' field has been set, false otherwise.
      */
    public boolean hasRisingItemTotal() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'risingItemTotal' field.
      * Total number of items purchased by Rising Stars segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingItemTotal() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingPercentCustBase' field.
      * risingCustTotal divided by totalCustCount
      * @return The value.
      */
    public java.lang.Double getRisingPercentCustBase() {
      return risingPercentCustBase;
    }

    /**
      * Sets the value of the 'risingPercentCustBase' field.
      * risingCustTotal divided by totalCustCount
      * @param value The value of 'risingPercentCustBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingPercentCustBase(double value) {
      validate(fields()[23], value);
      this.risingPercentCustBase = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'risingPercentCustBase' field has been set.
      * risingCustTotal divided by totalCustCount
      * @return True if the 'risingPercentCustBase' field has been set, false otherwise.
      */
    public boolean hasRisingPercentCustBase() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'risingPercentCustBase' field.
      * risingCustTotal divided by totalCustCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingPercentCustBase() {
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingPercentTxnBase' field.
      * risingTxnTotal divided by totalTxnCount
      * @return The value.
      */
    public java.lang.Double getRisingPercentTxnBase() {
      return risingPercentTxnBase;
    }

    /**
      * Sets the value of the 'risingPercentTxnBase' field.
      * risingTxnTotal divided by totalTxnCount
      * @param value The value of 'risingPercentTxnBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingPercentTxnBase(double value) {
      validate(fields()[24], value);
      this.risingPercentTxnBase = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'risingPercentTxnBase' field has been set.
      * risingTxnTotal divided by totalTxnCount
      * @return True if the 'risingPercentTxnBase' field has been set, false otherwise.
      */
    public boolean hasRisingPercentTxnBase() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'risingPercentTxnBase' field.
      * risingTxnTotal divided by totalTxnCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingPercentTxnBase() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingPercentSalesBase' field.
      * risingSalesTotal divided by totalSales
      * @return The value.
      */
    public java.lang.Double getRisingPercentSalesBase() {
      return risingPercentSalesBase;
    }

    /**
      * Sets the value of the 'risingPercentSalesBase' field.
      * risingSalesTotal divided by totalSales
      * @param value The value of 'risingPercentSalesBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingPercentSalesBase(double value) {
      validate(fields()[25], value);
      this.risingPercentSalesBase = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'risingPercentSalesBase' field has been set.
      * risingSalesTotal divided by totalSales
      * @return True if the 'risingPercentSalesBase' field has been set, false otherwise.
      */
    public boolean hasRisingPercentSalesBase() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'risingPercentSalesBase' field.
      * risingSalesTotal divided by totalSales
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingPercentSalesBase() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingAvgFreq' field.
      * risingFreqTotal divided by risingCustTotal
      * @return The value.
      */
    public java.lang.Double getRisingAvgFreq() {
      return risingAvgFreq;
    }

    /**
      * Sets the value of the 'risingAvgFreq' field.
      * risingFreqTotal divided by risingCustTotal
      * @param value The value of 'risingAvgFreq'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingAvgFreq(double value) {
      validate(fields()[26], value);
      this.risingAvgFreq = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'risingAvgFreq' field has been set.
      * risingFreqTotal divided by risingCustTotal
      * @return True if the 'risingAvgFreq' field has been set, false otherwise.
      */
    public boolean hasRisingAvgFreq() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'risingAvgFreq' field.
      * risingFreqTotal divided by risingCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingAvgFreq() {
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingAvgRecency' field.
      * risingRecencyTotal divided by risingCustTotal
      * @return The value.
      */
    public java.lang.Double getRisingAvgRecency() {
      return risingAvgRecency;
    }

    /**
      * Sets the value of the 'risingAvgRecency' field.
      * risingRecencyTotal divided by risingCustTotal
      * @param value The value of 'risingAvgRecency'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingAvgRecency(double value) {
      validate(fields()[27], value);
      this.risingAvgRecency = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'risingAvgRecency' field has been set.
      * risingRecencyTotal divided by risingCustTotal
      * @return True if the 'risingAvgRecency' field has been set, false otherwise.
      */
    public boolean hasRisingAvgRecency() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'risingAvgRecency' field.
      * risingRecencyTotal divided by risingCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingAvgRecency() {
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingAvgSales' field.
      * risingSalesTotal divided by risingCustTotal
      * @return The value.
      */
    public java.lang.Double getRisingAvgSales() {
      return risingAvgSales;
    }

    /**
      * Sets the value of the 'risingAvgSales' field.
      * risingSalesTotal divided by risingCustTotal
      * @param value The value of 'risingAvgSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingAvgSales(double value) {
      validate(fields()[28], value);
      this.risingAvgSales = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'risingAvgSales' field has been set.
      * risingSalesTotal divided by risingCustTotal
      * @return True if the 'risingAvgSales' field has been set, false otherwise.
      */
    public boolean hasRisingAvgSales() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'risingAvgSales' field.
      * risingSalesTotal divided by risingCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingAvgSales() {
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingAvgItems' field.
      * risingItemTotal divided by risingCustTotal
      * @return The value.
      */
    public java.lang.Double getRisingAvgItems() {
      return risingAvgItems;
    }

    /**
      * Sets the value of the 'risingAvgItems' field.
      * risingItemTotal divided by risingCustTotal
      * @param value The value of 'risingAvgItems'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingAvgItems(double value) {
      validate(fields()[29], value);
      this.risingAvgItems = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'risingAvgItems' field has been set.
      * risingItemTotal divided by risingCustTotal
      * @return True if the 'risingAvgItems' field has been set, false otherwise.
      */
    public boolean hasRisingAvgItems() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'risingAvgItems' field.
      * risingItemTotal divided by risingCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingAvgItems() {
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingVisitSpend' field.
      * risingSalesTotal divided by risingTxnTotal
      * @return The value.
      */
    public java.lang.Double getRisingVisitSpend() {
      return risingVisitSpend;
    }

    /**
      * Sets the value of the 'risingVisitSpend' field.
      * risingSalesTotal divided by risingTxnTotal
      * @param value The value of 'risingVisitSpend'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setRisingVisitSpend(double value) {
      validate(fields()[30], value);
      this.risingVisitSpend = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'risingVisitSpend' field has been set.
      * risingSalesTotal divided by risingTxnTotal
      * @return True if the 'risingVisitSpend' field has been set, false otherwise.
      */
    public boolean hasRisingVisitSpend() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'risingVisitSpend' field.
      * risingSalesTotal divided by risingTxnTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearRisingVisitSpend() {
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleCustTotal' field.
      * Total number of customers in Middle of the Road segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getMiddleCustTotal() {
      return middleCustTotal;
    }

    /**
      * Sets the value of the 'middleCustTotal' field.
      * Total number of customers in Middle of the Road segment in given timePeriod
      * @param value The value of 'middleCustTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddleCustTotal(long value) {
      validate(fields()[31], value);
      this.middleCustTotal = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'middleCustTotal' field has been set.
      * Total number of customers in Middle of the Road segment in given timePeriod
      * @return True if the 'middleCustTotal' field has been set, false otherwise.
      */
    public boolean hasMiddleCustTotal() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'middleCustTotal' field.
      * Total number of customers in Middle of the Road segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddleCustTotal() {
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleTxnTotal' field.
      * Total number of transactions in Middle of the Road segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getMiddleTxnTotal() {
      return middleTxnTotal;
    }

    /**
      * Sets the value of the 'middleTxnTotal' field.
      * Total number of transactions in Middle of the Road segment in given timePeriod
      * @param value The value of 'middleTxnTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddleTxnTotal(long value) {
      validate(fields()[32], value);
      this.middleTxnTotal = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'middleTxnTotal' field has been set.
      * Total number of transactions in Middle of the Road segment in given timePeriod
      * @return True if the 'middleTxnTotal' field has been set, false otherwise.
      */
    public boolean hasMiddleTxnTotal() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'middleTxnTotal' field.
      * Total number of transactions in Middle of the Road segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddleTxnTotal() {
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleSalesTotal' field.
      * Total amount of sales in Middle of the Road segment in given timePeriod
      * @return The value.
      */
    public java.lang.Double getMiddleSalesTotal() {
      return middleSalesTotal;
    }

    /**
      * Sets the value of the 'middleSalesTotal' field.
      * Total amount of sales in Middle of the Road segment in given timePeriod
      * @param value The value of 'middleSalesTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddleSalesTotal(double value) {
      validate(fields()[33], value);
      this.middleSalesTotal = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'middleSalesTotal' field has been set.
      * Total amount of sales in Middle of the Road segment in given timePeriod
      * @return True if the 'middleSalesTotal' field has been set, false otherwise.
      */
    public boolean hasMiddleSalesTotal() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'middleSalesTotal' field.
      * Total amount of sales in Middle of the Road segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddleSalesTotal() {
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleRecencyTotal' field.
      * Sum of all recency values in Middle of the Road segment in given timePeriod, used to calc avgs
      * @return The value.
      */
    public java.lang.Long getMiddleRecencyTotal() {
      return middleRecencyTotal;
    }

    /**
      * Sets the value of the 'middleRecencyTotal' field.
      * Sum of all recency values in Middle of the Road segment in given timePeriod, used to calc avgs
      * @param value The value of 'middleRecencyTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddleRecencyTotal(long value) {
      validate(fields()[34], value);
      this.middleRecencyTotal = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'middleRecencyTotal' field has been set.
      * Sum of all recency values in Middle of the Road segment in given timePeriod, used to calc avgs
      * @return True if the 'middleRecencyTotal' field has been set, false otherwise.
      */
    public boolean hasMiddleRecencyTotal() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'middleRecencyTotal' field.
      * Sum of all recency values in Middle of the Road segment in given timePeriod, used to calc avgs
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddleRecencyTotal() {
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleItemTotal' field.
      * Total number of items purchased by Middle of the Road segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getMiddleItemTotal() {
      return middleItemTotal;
    }

    /**
      * Sets the value of the 'middleItemTotal' field.
      * Total number of items purchased by Middle of the Road segment in given timePeriod
      * @param value The value of 'middleItemTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddleItemTotal(long value) {
      validate(fields()[35], value);
      this.middleItemTotal = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'middleItemTotal' field has been set.
      * Total number of items purchased by Middle of the Road segment in given timePeriod
      * @return True if the 'middleItemTotal' field has been set, false otherwise.
      */
    public boolean hasMiddleItemTotal() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'middleItemTotal' field.
      * Total number of items purchased by Middle of the Road segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddleItemTotal() {
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'middlePercentCustBase' field.
      * middleCustTotal divided by totalCustCount
      * @return The value.
      */
    public java.lang.Double getMiddlePercentCustBase() {
      return middlePercentCustBase;
    }

    /**
      * Sets the value of the 'middlePercentCustBase' field.
      * middleCustTotal divided by totalCustCount
      * @param value The value of 'middlePercentCustBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddlePercentCustBase(double value) {
      validate(fields()[36], value);
      this.middlePercentCustBase = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'middlePercentCustBase' field has been set.
      * middleCustTotal divided by totalCustCount
      * @return True if the 'middlePercentCustBase' field has been set, false otherwise.
      */
    public boolean hasMiddlePercentCustBase() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'middlePercentCustBase' field.
      * middleCustTotal divided by totalCustCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddlePercentCustBase() {
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'middlePercentTxnBase' field.
      * middleTxnTotal divided by totalTxnCount
      * @return The value.
      */
    public java.lang.Double getMiddlePercentTxnBase() {
      return middlePercentTxnBase;
    }

    /**
      * Sets the value of the 'middlePercentTxnBase' field.
      * middleTxnTotal divided by totalTxnCount
      * @param value The value of 'middlePercentTxnBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddlePercentTxnBase(double value) {
      validate(fields()[37], value);
      this.middlePercentTxnBase = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'middlePercentTxnBase' field has been set.
      * middleTxnTotal divided by totalTxnCount
      * @return True if the 'middlePercentTxnBase' field has been set, false otherwise.
      */
    public boolean hasMiddlePercentTxnBase() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'middlePercentTxnBase' field.
      * middleTxnTotal divided by totalTxnCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddlePercentTxnBase() {
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'middlePercentSalesBase' field.
      * middleSalesTotal divided by totalSales
      * @return The value.
      */
    public java.lang.Double getMiddlePercentSalesBase() {
      return middlePercentSalesBase;
    }

    /**
      * Sets the value of the 'middlePercentSalesBase' field.
      * middleSalesTotal divided by totalSales
      * @param value The value of 'middlePercentSalesBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddlePercentSalesBase(double value) {
      validate(fields()[38], value);
      this.middlePercentSalesBase = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'middlePercentSalesBase' field has been set.
      * middleSalesTotal divided by totalSales
      * @return True if the 'middlePercentSalesBase' field has been set, false otherwise.
      */
    public boolean hasMiddlePercentSalesBase() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'middlePercentSalesBase' field.
      * middleSalesTotal divided by totalSales
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddlePercentSalesBase() {
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleAvgFreq' field.
      * middleFreqTotal divided by middleCustTotal
      * @return The value.
      */
    public java.lang.Double getMiddleAvgFreq() {
      return middleAvgFreq;
    }

    /**
      * Sets the value of the 'middleAvgFreq' field.
      * middleFreqTotal divided by middleCustTotal
      * @param value The value of 'middleAvgFreq'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddleAvgFreq(double value) {
      validate(fields()[39], value);
      this.middleAvgFreq = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'middleAvgFreq' field has been set.
      * middleFreqTotal divided by middleCustTotal
      * @return True if the 'middleAvgFreq' field has been set, false otherwise.
      */
    public boolean hasMiddleAvgFreq() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'middleAvgFreq' field.
      * middleFreqTotal divided by middleCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddleAvgFreq() {
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleAvgRecency' field.
      * middleRecencyTotal divided by middleCustTotal
      * @return The value.
      */
    public java.lang.Double getMiddleAvgRecency() {
      return middleAvgRecency;
    }

    /**
      * Sets the value of the 'middleAvgRecency' field.
      * middleRecencyTotal divided by middleCustTotal
      * @param value The value of 'middleAvgRecency'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddleAvgRecency(double value) {
      validate(fields()[40], value);
      this.middleAvgRecency = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'middleAvgRecency' field has been set.
      * middleRecencyTotal divided by middleCustTotal
      * @return True if the 'middleAvgRecency' field has been set, false otherwise.
      */
    public boolean hasMiddleAvgRecency() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'middleAvgRecency' field.
      * middleRecencyTotal divided by middleCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddleAvgRecency() {
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleAvgSales' field.
      * middleSalesTotal divided by middleCustTotal
      * @return The value.
      */
    public java.lang.Double getMiddleAvgSales() {
      return middleAvgSales;
    }

    /**
      * Sets the value of the 'middleAvgSales' field.
      * middleSalesTotal divided by middleCustTotal
      * @param value The value of 'middleAvgSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddleAvgSales(double value) {
      validate(fields()[41], value);
      this.middleAvgSales = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'middleAvgSales' field has been set.
      * middleSalesTotal divided by middleCustTotal
      * @return True if the 'middleAvgSales' field has been set, false otherwise.
      */
    public boolean hasMiddleAvgSales() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'middleAvgSales' field.
      * middleSalesTotal divided by middleCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddleAvgSales() {
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleAvgItems' field.
      * middleItemTotal divided by middleCustTotal
      * @return The value.
      */
    public java.lang.Double getMiddleAvgItems() {
      return middleAvgItems;
    }

    /**
      * Sets the value of the 'middleAvgItems' field.
      * middleItemTotal divided by middleCustTotal
      * @param value The value of 'middleAvgItems'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddleAvgItems(double value) {
      validate(fields()[42], value);
      this.middleAvgItems = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'middleAvgItems' field has been set.
      * middleItemTotal divided by middleCustTotal
      * @return True if the 'middleAvgItems' field has been set, false otherwise.
      */
    public boolean hasMiddleAvgItems() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'middleAvgItems' field.
      * middleItemTotal divided by middleCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddleAvgItems() {
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleVisitSpend' field.
      * middleSalesTotal divided by middleTxnTotal
      * @return The value.
      */
    public java.lang.Double getMiddleVisitSpend() {
      return middleVisitSpend;
    }

    /**
      * Sets the value of the 'middleVisitSpend' field.
      * middleSalesTotal divided by middleTxnTotal
      * @param value The value of 'middleVisitSpend'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setMiddleVisitSpend(double value) {
      validate(fields()[43], value);
      this.middleVisitSpend = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'middleVisitSpend' field has been set.
      * middleSalesTotal divided by middleTxnTotal
      * @return True if the 'middleVisitSpend' field has been set, false otherwise.
      */
    public boolean hasMiddleVisitSpend() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'middleVisitSpend' field.
      * middleSalesTotal divided by middleTxnTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearMiddleVisitSpend() {
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingCustTotal' field.
      * Total number of customers in Lapsing in given timePeriod
      * @return The value.
      */
    public java.lang.Long getLapsingCustTotal() {
      return lapsingCustTotal;
    }

    /**
      * Sets the value of the 'lapsingCustTotal' field.
      * Total number of customers in Lapsing in given timePeriod
      * @param value The value of 'lapsingCustTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingCustTotal(long value) {
      validate(fields()[44], value);
      this.lapsingCustTotal = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingCustTotal' field has been set.
      * Total number of customers in Lapsing in given timePeriod
      * @return True if the 'lapsingCustTotal' field has been set, false otherwise.
      */
    public boolean hasLapsingCustTotal() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'lapsingCustTotal' field.
      * Total number of customers in Lapsing in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingCustTotal() {
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingTxnTotal' field.
      * Total number of transactions in Lapsing segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getLapsingTxnTotal() {
      return lapsingTxnTotal;
    }

    /**
      * Sets the value of the 'lapsingTxnTotal' field.
      * Total number of transactions in Lapsing segment in given timePeriod
      * @param value The value of 'lapsingTxnTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingTxnTotal(long value) {
      validate(fields()[45], value);
      this.lapsingTxnTotal = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingTxnTotal' field has been set.
      * Total number of transactions in Lapsing segment in given timePeriod
      * @return True if the 'lapsingTxnTotal' field has been set, false otherwise.
      */
    public boolean hasLapsingTxnTotal() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'lapsingTxnTotal' field.
      * Total number of transactions in Lapsing segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingTxnTotal() {
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingSalesTotal' field.
      * Total amount of sales in Lapsing segment in given timePeriod
      * @return The value.
      */
    public java.lang.Double getLapsingSalesTotal() {
      return lapsingSalesTotal;
    }

    /**
      * Sets the value of the 'lapsingSalesTotal' field.
      * Total amount of sales in Lapsing segment in given timePeriod
      * @param value The value of 'lapsingSalesTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingSalesTotal(double value) {
      validate(fields()[46], value);
      this.lapsingSalesTotal = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingSalesTotal' field has been set.
      * Total amount of sales in Lapsing segment in given timePeriod
      * @return True if the 'lapsingSalesTotal' field has been set, false otherwise.
      */
    public boolean hasLapsingSalesTotal() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'lapsingSalesTotal' field.
      * Total amount of sales in Lapsing segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingSalesTotal() {
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingRecencyTotal' field.
      * Sum of all recency values in Lapsing segment in given timePeriod, used to calc avgs
      * @return The value.
      */
    public java.lang.Long getLapsingRecencyTotal() {
      return lapsingRecencyTotal;
    }

    /**
      * Sets the value of the 'lapsingRecencyTotal' field.
      * Sum of all recency values in Lapsing segment in given timePeriod, used to calc avgs
      * @param value The value of 'lapsingRecencyTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingRecencyTotal(long value) {
      validate(fields()[47], value);
      this.lapsingRecencyTotal = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingRecencyTotal' field has been set.
      * Sum of all recency values in Lapsing segment in given timePeriod, used to calc avgs
      * @return True if the 'lapsingRecencyTotal' field has been set, false otherwise.
      */
    public boolean hasLapsingRecencyTotal() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'lapsingRecencyTotal' field.
      * Sum of all recency values in Lapsing segment in given timePeriod, used to calc avgs
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingRecencyTotal() {
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingItemTotal' field.
      * Total number of items purchased by Lapsing segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getLapsingItemTotal() {
      return lapsingItemTotal;
    }

    /**
      * Sets the value of the 'lapsingItemTotal' field.
      * Total number of items purchased by Lapsing segment in given timePeriod
      * @param value The value of 'lapsingItemTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingItemTotal(long value) {
      validate(fields()[48], value);
      this.lapsingItemTotal = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingItemTotal' field has been set.
      * Total number of items purchased by Lapsing segment in given timePeriod
      * @return True if the 'lapsingItemTotal' field has been set, false otherwise.
      */
    public boolean hasLapsingItemTotal() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'lapsingItemTotal' field.
      * Total number of items purchased by Lapsing segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingItemTotal() {
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingPercentCustBase' field.
      * lapsingCustTotal divided by totalCustCount
      * @return The value.
      */
    public java.lang.Double getLapsingPercentCustBase() {
      return lapsingPercentCustBase;
    }

    /**
      * Sets the value of the 'lapsingPercentCustBase' field.
      * lapsingCustTotal divided by totalCustCount
      * @param value The value of 'lapsingPercentCustBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingPercentCustBase(double value) {
      validate(fields()[49], value);
      this.lapsingPercentCustBase = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingPercentCustBase' field has been set.
      * lapsingCustTotal divided by totalCustCount
      * @return True if the 'lapsingPercentCustBase' field has been set, false otherwise.
      */
    public boolean hasLapsingPercentCustBase() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'lapsingPercentCustBase' field.
      * lapsingCustTotal divided by totalCustCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingPercentCustBase() {
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingPercentTxnBase' field.
      * lapsingTxnTotal divided by totalTxnCount
      * @return The value.
      */
    public java.lang.Double getLapsingPercentTxnBase() {
      return lapsingPercentTxnBase;
    }

    /**
      * Sets the value of the 'lapsingPercentTxnBase' field.
      * lapsingTxnTotal divided by totalTxnCount
      * @param value The value of 'lapsingPercentTxnBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingPercentTxnBase(double value) {
      validate(fields()[50], value);
      this.lapsingPercentTxnBase = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingPercentTxnBase' field has been set.
      * lapsingTxnTotal divided by totalTxnCount
      * @return True if the 'lapsingPercentTxnBase' field has been set, false otherwise.
      */
    public boolean hasLapsingPercentTxnBase() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'lapsingPercentTxnBase' field.
      * lapsingTxnTotal divided by totalTxnCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingPercentTxnBase() {
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingPercentSalesBase' field.
      * lapsingSalesTotal divided by totalSales
      * @return The value.
      */
    public java.lang.Double getLapsingPercentSalesBase() {
      return lapsingPercentSalesBase;
    }

    /**
      * Sets the value of the 'lapsingPercentSalesBase' field.
      * lapsingSalesTotal divided by totalSales
      * @param value The value of 'lapsingPercentSalesBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingPercentSalesBase(double value) {
      validate(fields()[51], value);
      this.lapsingPercentSalesBase = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingPercentSalesBase' field has been set.
      * lapsingSalesTotal divided by totalSales
      * @return True if the 'lapsingPercentSalesBase' field has been set, false otherwise.
      */
    public boolean hasLapsingPercentSalesBase() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'lapsingPercentSalesBase' field.
      * lapsingSalesTotal divided by totalSales
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingPercentSalesBase() {
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingAvgFreq' field.
      * lapsingFreqTotal divided by lapsingCustTotal
      * @return The value.
      */
    public java.lang.Double getLapsingAvgFreq() {
      return lapsingAvgFreq;
    }

    /**
      * Sets the value of the 'lapsingAvgFreq' field.
      * lapsingFreqTotal divided by lapsingCustTotal
      * @param value The value of 'lapsingAvgFreq'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingAvgFreq(double value) {
      validate(fields()[52], value);
      this.lapsingAvgFreq = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingAvgFreq' field has been set.
      * lapsingFreqTotal divided by lapsingCustTotal
      * @return True if the 'lapsingAvgFreq' field has been set, false otherwise.
      */
    public boolean hasLapsingAvgFreq() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'lapsingAvgFreq' field.
      * lapsingFreqTotal divided by lapsingCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingAvgFreq() {
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingAvgRecency' field.
      * lapsingRecencyTotal divided by lapsingCustTotal
      * @return The value.
      */
    public java.lang.Double getLapsingAvgRecency() {
      return lapsingAvgRecency;
    }

    /**
      * Sets the value of the 'lapsingAvgRecency' field.
      * lapsingRecencyTotal divided by lapsingCustTotal
      * @param value The value of 'lapsingAvgRecency'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingAvgRecency(double value) {
      validate(fields()[53], value);
      this.lapsingAvgRecency = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingAvgRecency' field has been set.
      * lapsingRecencyTotal divided by lapsingCustTotal
      * @return True if the 'lapsingAvgRecency' field has been set, false otherwise.
      */
    public boolean hasLapsingAvgRecency() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'lapsingAvgRecency' field.
      * lapsingRecencyTotal divided by lapsingCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingAvgRecency() {
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingAvgSales' field.
      * lapsingSalesTotal divided by lapsingCustTotal
      * @return The value.
      */
    public java.lang.Double getLapsingAvgSales() {
      return lapsingAvgSales;
    }

    /**
      * Sets the value of the 'lapsingAvgSales' field.
      * lapsingSalesTotal divided by lapsingCustTotal
      * @param value The value of 'lapsingAvgSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingAvgSales(double value) {
      validate(fields()[54], value);
      this.lapsingAvgSales = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingAvgSales' field has been set.
      * lapsingSalesTotal divided by lapsingCustTotal
      * @return True if the 'lapsingAvgSales' field has been set, false otherwise.
      */
    public boolean hasLapsingAvgSales() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'lapsingAvgSales' field.
      * lapsingSalesTotal divided by lapsingCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingAvgSales() {
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingAvgItems' field.
      * lapsingItemTotal divided by lapsingCustTotal
      * @return The value.
      */
    public java.lang.Double getLapsingAvgItems() {
      return lapsingAvgItems;
    }

    /**
      * Sets the value of the 'lapsingAvgItems' field.
      * lapsingItemTotal divided by lapsingCustTotal
      * @param value The value of 'lapsingAvgItems'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingAvgItems(double value) {
      validate(fields()[55], value);
      this.lapsingAvgItems = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingAvgItems' field has been set.
      * lapsingItemTotal divided by lapsingCustTotal
      * @return True if the 'lapsingAvgItems' field has been set, false otherwise.
      */
    public boolean hasLapsingAvgItems() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'lapsingAvgItems' field.
      * lapsingItemTotal divided by lapsingCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingAvgItems() {
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingVisitSpend' field.
      * lapsingSalesTotal divided by lapsingTxnTotal
      * @return The value.
      */
    public java.lang.Double getLapsingVisitSpend() {
      return lapsingVisitSpend;
    }

    /**
      * Sets the value of the 'lapsingVisitSpend' field.
      * lapsingSalesTotal divided by lapsingTxnTotal
      * @param value The value of 'lapsingVisitSpend'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setLapsingVisitSpend(double value) {
      validate(fields()[56], value);
      this.lapsingVisitSpend = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingVisitSpend' field has been set.
      * lapsingSalesTotal divided by lapsingTxnTotal
      * @return True if the 'lapsingVisitSpend' field has been set, false otherwise.
      */
    public boolean hasLapsingVisitSpend() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'lapsingVisitSpend' field.
      * lapsingSalesTotal divided by lapsingTxnTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearLapsingVisitSpend() {
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyCustTotal' field.
      * Total number of customers in Best in Class segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getDeeplyCustTotal() {
      return deeplyCustTotal;
    }

    /**
      * Sets the value of the 'deeplyCustTotal' field.
      * Total number of customers in Best in Class segment in given timePeriod
      * @param value The value of 'deeplyCustTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyCustTotal(long value) {
      validate(fields()[57], value);
      this.deeplyCustTotal = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyCustTotal' field has been set.
      * Total number of customers in Best in Class segment in given timePeriod
      * @return True if the 'deeplyCustTotal' field has been set, false otherwise.
      */
    public boolean hasDeeplyCustTotal() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'deeplyCustTotal' field.
      * Total number of customers in Best in Class segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyCustTotal() {
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyTxnTotal' field.
      * Total number of transactions in Best in Class segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getDeeplyTxnTotal() {
      return deeplyTxnTotal;
    }

    /**
      * Sets the value of the 'deeplyTxnTotal' field.
      * Total number of transactions in Best in Class segment in given timePeriod
      * @param value The value of 'deeplyTxnTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyTxnTotal(long value) {
      validate(fields()[58], value);
      this.deeplyTxnTotal = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyTxnTotal' field has been set.
      * Total number of transactions in Best in Class segment in given timePeriod
      * @return True if the 'deeplyTxnTotal' field has been set, false otherwise.
      */
    public boolean hasDeeplyTxnTotal() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'deeplyTxnTotal' field.
      * Total number of transactions in Best in Class segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyTxnTotal() {
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplySalesTotal' field.
      * Total amount of sales in Best in Class segment in given timePeriod
      * @return The value.
      */
    public java.lang.Double getDeeplySalesTotal() {
      return deeplySalesTotal;
    }

    /**
      * Sets the value of the 'deeplySalesTotal' field.
      * Total amount of sales in Best in Class segment in given timePeriod
      * @param value The value of 'deeplySalesTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplySalesTotal(double value) {
      validate(fields()[59], value);
      this.deeplySalesTotal = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplySalesTotal' field has been set.
      * Total amount of sales in Best in Class segment in given timePeriod
      * @return True if the 'deeplySalesTotal' field has been set, false otherwise.
      */
    public boolean hasDeeplySalesTotal() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'deeplySalesTotal' field.
      * Total amount of sales in Best in Class segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplySalesTotal() {
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyRecencyTotal' field.
      * Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
      * @return The value.
      */
    public java.lang.Long getDeeplyRecencyTotal() {
      return deeplyRecencyTotal;
    }

    /**
      * Sets the value of the 'deeplyRecencyTotal' field.
      * Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
      * @param value The value of 'deeplyRecencyTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyRecencyTotal(long value) {
      validate(fields()[60], value);
      this.deeplyRecencyTotal = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyRecencyTotal' field has been set.
      * Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
      * @return True if the 'deeplyRecencyTotal' field has been set, false otherwise.
      */
    public boolean hasDeeplyRecencyTotal() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'deeplyRecencyTotal' field.
      * Sum of all recency values in Best in Class segment in given timePeriod, used to calc avgs
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyRecencyTotal() {
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyItemTotal' field.
      * Total number of items purchased by Best in Class segment in given timePeriod
      * @return The value.
      */
    public java.lang.Long getDeeplyItemTotal() {
      return deeplyItemTotal;
    }

    /**
      * Sets the value of the 'deeplyItemTotal' field.
      * Total number of items purchased by Best in Class segment in given timePeriod
      * @param value The value of 'deeplyItemTotal'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyItemTotal(long value) {
      validate(fields()[61], value);
      this.deeplyItemTotal = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyItemTotal' field has been set.
      * Total number of items purchased by Best in Class segment in given timePeriod
      * @return True if the 'deeplyItemTotal' field has been set, false otherwise.
      */
    public boolean hasDeeplyItemTotal() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'deeplyItemTotal' field.
      * Total number of items purchased by Best in Class segment in given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyItemTotal() {
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyPercentCustBase' field.
      * deeplyCustTotal divided by totalCustCount
      * @return The value.
      */
    public java.lang.Double getDeeplyPercentCustBase() {
      return deeplyPercentCustBase;
    }

    /**
      * Sets the value of the 'deeplyPercentCustBase' field.
      * deeplyCustTotal divided by totalCustCount
      * @param value The value of 'deeplyPercentCustBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyPercentCustBase(double value) {
      validate(fields()[62], value);
      this.deeplyPercentCustBase = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyPercentCustBase' field has been set.
      * deeplyCustTotal divided by totalCustCount
      * @return True if the 'deeplyPercentCustBase' field has been set, false otherwise.
      */
    public boolean hasDeeplyPercentCustBase() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'deeplyPercentCustBase' field.
      * deeplyCustTotal divided by totalCustCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyPercentCustBase() {
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyPercentTxnBase' field.
      * deeplyTxnTotal divided by totalTxnCount
      * @return The value.
      */
    public java.lang.Double getDeeplyPercentTxnBase() {
      return deeplyPercentTxnBase;
    }

    /**
      * Sets the value of the 'deeplyPercentTxnBase' field.
      * deeplyTxnTotal divided by totalTxnCount
      * @param value The value of 'deeplyPercentTxnBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyPercentTxnBase(double value) {
      validate(fields()[63], value);
      this.deeplyPercentTxnBase = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyPercentTxnBase' field has been set.
      * deeplyTxnTotal divided by totalTxnCount
      * @return True if the 'deeplyPercentTxnBase' field has been set, false otherwise.
      */
    public boolean hasDeeplyPercentTxnBase() {
      return fieldSetFlags()[63];
    }


    /**
      * Clears the value of the 'deeplyPercentTxnBase' field.
      * deeplyTxnTotal divided by totalTxnCount
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyPercentTxnBase() {
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyPercentSalesBase' field.
      * deeplySalesTotal divided by totalSales
      * @return The value.
      */
    public java.lang.Double getDeeplyPercentSalesBase() {
      return deeplyPercentSalesBase;
    }

    /**
      * Sets the value of the 'deeplyPercentSalesBase' field.
      * deeplySalesTotal divided by totalSales
      * @param value The value of 'deeplyPercentSalesBase'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyPercentSalesBase(double value) {
      validate(fields()[64], value);
      this.deeplyPercentSalesBase = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyPercentSalesBase' field has been set.
      * deeplySalesTotal divided by totalSales
      * @return True if the 'deeplyPercentSalesBase' field has been set, false otherwise.
      */
    public boolean hasDeeplyPercentSalesBase() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'deeplyPercentSalesBase' field.
      * deeplySalesTotal divided by totalSales
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyPercentSalesBase() {
      fieldSetFlags()[64] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyAvgFreq' field.
      * deeplyFreqTotal divided by deeplyCustTotal
      * @return The value.
      */
    public java.lang.Double getDeeplyAvgFreq() {
      return deeplyAvgFreq;
    }

    /**
      * Sets the value of the 'deeplyAvgFreq' field.
      * deeplyFreqTotal divided by deeplyCustTotal
      * @param value The value of 'deeplyAvgFreq'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyAvgFreq(double value) {
      validate(fields()[65], value);
      this.deeplyAvgFreq = value;
      fieldSetFlags()[65] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyAvgFreq' field has been set.
      * deeplyFreqTotal divided by deeplyCustTotal
      * @return True if the 'deeplyAvgFreq' field has been set, false otherwise.
      */
    public boolean hasDeeplyAvgFreq() {
      return fieldSetFlags()[65];
    }


    /**
      * Clears the value of the 'deeplyAvgFreq' field.
      * deeplyFreqTotal divided by deeplyCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyAvgFreq() {
      fieldSetFlags()[65] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyAvgRecency' field.
      * deeplyRecencyTotal divided by deeplyCustTotal
      * @return The value.
      */
    public java.lang.Double getDeeplyAvgRecency() {
      return deeplyAvgRecency;
    }

    /**
      * Sets the value of the 'deeplyAvgRecency' field.
      * deeplyRecencyTotal divided by deeplyCustTotal
      * @param value The value of 'deeplyAvgRecency'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyAvgRecency(double value) {
      validate(fields()[66], value);
      this.deeplyAvgRecency = value;
      fieldSetFlags()[66] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyAvgRecency' field has been set.
      * deeplyRecencyTotal divided by deeplyCustTotal
      * @return True if the 'deeplyAvgRecency' field has been set, false otherwise.
      */
    public boolean hasDeeplyAvgRecency() {
      return fieldSetFlags()[66];
    }


    /**
      * Clears the value of the 'deeplyAvgRecency' field.
      * deeplyRecencyTotal divided by deeplyCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyAvgRecency() {
      fieldSetFlags()[66] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyAvgSales' field.
      * deeplySalesTotal divided by deeplyCustTotal
      * @return The value.
      */
    public java.lang.Double getDeeplyAvgSales() {
      return deeplyAvgSales;
    }

    /**
      * Sets the value of the 'deeplyAvgSales' field.
      * deeplySalesTotal divided by deeplyCustTotal
      * @param value The value of 'deeplyAvgSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyAvgSales(double value) {
      validate(fields()[67], value);
      this.deeplyAvgSales = value;
      fieldSetFlags()[67] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyAvgSales' field has been set.
      * deeplySalesTotal divided by deeplyCustTotal
      * @return True if the 'deeplyAvgSales' field has been set, false otherwise.
      */
    public boolean hasDeeplyAvgSales() {
      return fieldSetFlags()[67];
    }


    /**
      * Clears the value of the 'deeplyAvgSales' field.
      * deeplySalesTotal divided by deeplyCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyAvgSales() {
      fieldSetFlags()[67] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyAvgItems' field.
      * deeplyItemTotal divided by deeplyCustTotal
      * @return The value.
      */
    public java.lang.Double getDeeplyAvgItems() {
      return deeplyAvgItems;
    }

    /**
      * Sets the value of the 'deeplyAvgItems' field.
      * deeplyItemTotal divided by deeplyCustTotal
      * @param value The value of 'deeplyAvgItems'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyAvgItems(double value) {
      validate(fields()[68], value);
      this.deeplyAvgItems = value;
      fieldSetFlags()[68] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyAvgItems' field has been set.
      * deeplyItemTotal divided by deeplyCustTotal
      * @return True if the 'deeplyAvgItems' field has been set, false otherwise.
      */
    public boolean hasDeeplyAvgItems() {
      return fieldSetFlags()[68];
    }


    /**
      * Clears the value of the 'deeplyAvgItems' field.
      * deeplyItemTotal divided by deeplyCustTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyAvgItems() {
      fieldSetFlags()[68] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyVisitSpend' field.
      * deeplySalesTotal divided by deeplyTxnTotal
      * @return The value.
      */
    public java.lang.Double getDeeplyVisitSpend() {
      return deeplyVisitSpend;
    }

    /**
      * Sets the value of the 'deeplyVisitSpend' field.
      * deeplySalesTotal divided by deeplyTxnTotal
      * @param value The value of 'deeplyVisitSpend'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder setDeeplyVisitSpend(double value) {
      validate(fields()[69], value);
      this.deeplyVisitSpend = value;
      fieldSetFlags()[69] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyVisitSpend' field has been set.
      * deeplySalesTotal divided by deeplyTxnTotal
      * @return True if the 'deeplyVisitSpend' field has been set, false otherwise.
      */
    public boolean hasDeeplyVisitSpend() {
      return fieldSetFlags()[69];
    }


    /**
      * Clears the value of the 'deeplyVisitSpend' field.
      * deeplySalesTotal divided by deeplyTxnTotal
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecyleProfileResults.Builder clearDeeplyVisitSpend() {
      fieldSetFlags()[69] = false;
      return this;
    }

    @Override
    public lifecyleProfileResults build() {
      try {
        lifecyleProfileResults record = new lifecyleProfileResults();
        record.timePeriod = fieldSetFlags()[0] ? this.timePeriod : (java.lang.Integer) defaultValue(fields()[0]);
        record.totalCustCount = fieldSetFlags()[1] ? this.totalCustCount : (java.lang.Long) defaultValue(fields()[1]);
        record.totalTxnCount = fieldSetFlags()[2] ? this.totalTxnCount : (java.lang.Long) defaultValue(fields()[2]);
        record.totalSales = fieldSetFlags()[3] ? this.totalSales : (java.lang.Double) defaultValue(fields()[3]);
        record.totalItems = fieldSetFlags()[4] ? this.totalItems : (java.lang.Long) defaultValue(fields()[4]);
        record.bestCustTotal = fieldSetFlags()[5] ? this.bestCustTotal : (java.lang.Long) defaultValue(fields()[5]);
        record.bestTxnTotal = fieldSetFlags()[6] ? this.bestTxnTotal : (java.lang.Long) defaultValue(fields()[6]);
        record.bestSalesTotal = fieldSetFlags()[7] ? this.bestSalesTotal : (java.lang.Double) defaultValue(fields()[7]);
        record.bestRecencyTotal = fieldSetFlags()[8] ? this.bestRecencyTotal : (java.lang.Long) defaultValue(fields()[8]);
        record.bestItemTotal = fieldSetFlags()[9] ? this.bestItemTotal : (java.lang.Long) defaultValue(fields()[9]);
        record.bestPercentCustBase = fieldSetFlags()[10] ? this.bestPercentCustBase : (java.lang.Double) defaultValue(fields()[10]);
        record.bestPercentTxnBase = fieldSetFlags()[11] ? this.bestPercentTxnBase : (java.lang.Double) defaultValue(fields()[11]);
        record.bestPercentSalesBase = fieldSetFlags()[12] ? this.bestPercentSalesBase : (java.lang.Double) defaultValue(fields()[12]);
        record.bestAvgFreq = fieldSetFlags()[13] ? this.bestAvgFreq : (java.lang.Double) defaultValue(fields()[13]);
        record.bestAvgRecency = fieldSetFlags()[14] ? this.bestAvgRecency : (java.lang.Double) defaultValue(fields()[14]);
        record.bestAvgSales = fieldSetFlags()[15] ? this.bestAvgSales : (java.lang.Double) defaultValue(fields()[15]);
        record.bestAvgItems = fieldSetFlags()[16] ? this.bestAvgItems : (java.lang.Double) defaultValue(fields()[16]);
        record.bestVisitSpend = fieldSetFlags()[17] ? this.bestVisitSpend : (java.lang.Double) defaultValue(fields()[17]);
        record.risingCustTotal = fieldSetFlags()[18] ? this.risingCustTotal : (java.lang.Long) defaultValue(fields()[18]);
        record.risingTxnTotal = fieldSetFlags()[19] ? this.risingTxnTotal : (java.lang.Long) defaultValue(fields()[19]);
        record.risingSalesTotal = fieldSetFlags()[20] ? this.risingSalesTotal : (java.lang.Double) defaultValue(fields()[20]);
        record.risingRecencyTotal = fieldSetFlags()[21] ? this.risingRecencyTotal : (java.lang.Long) defaultValue(fields()[21]);
        record.risingItemTotal = fieldSetFlags()[22] ? this.risingItemTotal : (java.lang.Long) defaultValue(fields()[22]);
        record.risingPercentCustBase = fieldSetFlags()[23] ? this.risingPercentCustBase : (java.lang.Double) defaultValue(fields()[23]);
        record.risingPercentTxnBase = fieldSetFlags()[24] ? this.risingPercentTxnBase : (java.lang.Double) defaultValue(fields()[24]);
        record.risingPercentSalesBase = fieldSetFlags()[25] ? this.risingPercentSalesBase : (java.lang.Double) defaultValue(fields()[25]);
        record.risingAvgFreq = fieldSetFlags()[26] ? this.risingAvgFreq : (java.lang.Double) defaultValue(fields()[26]);
        record.risingAvgRecency = fieldSetFlags()[27] ? this.risingAvgRecency : (java.lang.Double) defaultValue(fields()[27]);
        record.risingAvgSales = fieldSetFlags()[28] ? this.risingAvgSales : (java.lang.Double) defaultValue(fields()[28]);
        record.risingAvgItems = fieldSetFlags()[29] ? this.risingAvgItems : (java.lang.Double) defaultValue(fields()[29]);
        record.risingVisitSpend = fieldSetFlags()[30] ? this.risingVisitSpend : (java.lang.Double) defaultValue(fields()[30]);
        record.middleCustTotal = fieldSetFlags()[31] ? this.middleCustTotal : (java.lang.Long) defaultValue(fields()[31]);
        record.middleTxnTotal = fieldSetFlags()[32] ? this.middleTxnTotal : (java.lang.Long) defaultValue(fields()[32]);
        record.middleSalesTotal = fieldSetFlags()[33] ? this.middleSalesTotal : (java.lang.Double) defaultValue(fields()[33]);
        record.middleRecencyTotal = fieldSetFlags()[34] ? this.middleRecencyTotal : (java.lang.Long) defaultValue(fields()[34]);
        record.middleItemTotal = fieldSetFlags()[35] ? this.middleItemTotal : (java.lang.Long) defaultValue(fields()[35]);
        record.middlePercentCustBase = fieldSetFlags()[36] ? this.middlePercentCustBase : (java.lang.Double) defaultValue(fields()[36]);
        record.middlePercentTxnBase = fieldSetFlags()[37] ? this.middlePercentTxnBase : (java.lang.Double) defaultValue(fields()[37]);
        record.middlePercentSalesBase = fieldSetFlags()[38] ? this.middlePercentSalesBase : (java.lang.Double) defaultValue(fields()[38]);
        record.middleAvgFreq = fieldSetFlags()[39] ? this.middleAvgFreq : (java.lang.Double) defaultValue(fields()[39]);
        record.middleAvgRecency = fieldSetFlags()[40] ? this.middleAvgRecency : (java.lang.Double) defaultValue(fields()[40]);
        record.middleAvgSales = fieldSetFlags()[41] ? this.middleAvgSales : (java.lang.Double) defaultValue(fields()[41]);
        record.middleAvgItems = fieldSetFlags()[42] ? this.middleAvgItems : (java.lang.Double) defaultValue(fields()[42]);
        record.middleVisitSpend = fieldSetFlags()[43] ? this.middleVisitSpend : (java.lang.Double) defaultValue(fields()[43]);
        record.lapsingCustTotal = fieldSetFlags()[44] ? this.lapsingCustTotal : (java.lang.Long) defaultValue(fields()[44]);
        record.lapsingTxnTotal = fieldSetFlags()[45] ? this.lapsingTxnTotal : (java.lang.Long) defaultValue(fields()[45]);
        record.lapsingSalesTotal = fieldSetFlags()[46] ? this.lapsingSalesTotal : (java.lang.Double) defaultValue(fields()[46]);
        record.lapsingRecencyTotal = fieldSetFlags()[47] ? this.lapsingRecencyTotal : (java.lang.Long) defaultValue(fields()[47]);
        record.lapsingItemTotal = fieldSetFlags()[48] ? this.lapsingItemTotal : (java.lang.Long) defaultValue(fields()[48]);
        record.lapsingPercentCustBase = fieldSetFlags()[49] ? this.lapsingPercentCustBase : (java.lang.Double) defaultValue(fields()[49]);
        record.lapsingPercentTxnBase = fieldSetFlags()[50] ? this.lapsingPercentTxnBase : (java.lang.Double) defaultValue(fields()[50]);
        record.lapsingPercentSalesBase = fieldSetFlags()[51] ? this.lapsingPercentSalesBase : (java.lang.Double) defaultValue(fields()[51]);
        record.lapsingAvgFreq = fieldSetFlags()[52] ? this.lapsingAvgFreq : (java.lang.Double) defaultValue(fields()[52]);
        record.lapsingAvgRecency = fieldSetFlags()[53] ? this.lapsingAvgRecency : (java.lang.Double) defaultValue(fields()[53]);
        record.lapsingAvgSales = fieldSetFlags()[54] ? this.lapsingAvgSales : (java.lang.Double) defaultValue(fields()[54]);
        record.lapsingAvgItems = fieldSetFlags()[55] ? this.lapsingAvgItems : (java.lang.Double) defaultValue(fields()[55]);
        record.lapsingVisitSpend = fieldSetFlags()[56] ? this.lapsingVisitSpend : (java.lang.Double) defaultValue(fields()[56]);
        record.deeplyCustTotal = fieldSetFlags()[57] ? this.deeplyCustTotal : (java.lang.Long) defaultValue(fields()[57]);
        record.deeplyTxnTotal = fieldSetFlags()[58] ? this.deeplyTxnTotal : (java.lang.Long) defaultValue(fields()[58]);
        record.deeplySalesTotal = fieldSetFlags()[59] ? this.deeplySalesTotal : (java.lang.Double) defaultValue(fields()[59]);
        record.deeplyRecencyTotal = fieldSetFlags()[60] ? this.deeplyRecencyTotal : (java.lang.Long) defaultValue(fields()[60]);
        record.deeplyItemTotal = fieldSetFlags()[61] ? this.deeplyItemTotal : (java.lang.Long) defaultValue(fields()[61]);
        record.deeplyPercentCustBase = fieldSetFlags()[62] ? this.deeplyPercentCustBase : (java.lang.Double) defaultValue(fields()[62]);
        record.deeplyPercentTxnBase = fieldSetFlags()[63] ? this.deeplyPercentTxnBase : (java.lang.Double) defaultValue(fields()[63]);
        record.deeplyPercentSalesBase = fieldSetFlags()[64] ? this.deeplyPercentSalesBase : (java.lang.Double) defaultValue(fields()[64]);
        record.deeplyAvgFreq = fieldSetFlags()[65] ? this.deeplyAvgFreq : (java.lang.Double) defaultValue(fields()[65]);
        record.deeplyAvgRecency = fieldSetFlags()[66] ? this.deeplyAvgRecency : (java.lang.Double) defaultValue(fields()[66]);
        record.deeplyAvgSales = fieldSetFlags()[67] ? this.deeplyAvgSales : (java.lang.Double) defaultValue(fields()[67]);
        record.deeplyAvgItems = fieldSetFlags()[68] ? this.deeplyAvgItems : (java.lang.Double) defaultValue(fields()[68]);
        record.deeplyVisitSpend = fieldSetFlags()[69] ? this.deeplyVisitSpend : (java.lang.Double) defaultValue(fields()[69]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
