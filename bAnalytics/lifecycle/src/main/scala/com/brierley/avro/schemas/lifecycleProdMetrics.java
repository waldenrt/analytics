/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** each record represents the results of a single product in a single timeperiod across all segments */
@org.apache.avro.specific.AvroGenerated
public class lifecycleProdMetrics extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4020101376485347749L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"lifecycleProdMetrics\",\"namespace\":\"com.brierley.avro.schemas\",\"doc\":\"each record represents the results of a single product in a single timeperiod across all segments\",\"fields\":[{\"name\":\"timePeriod\",\"type\":\"int\",\"doc\":\"TimePeriod array is for\"},{\"name\":\"productCat\",\"type\":\"string\",\"doc\":\"The category identifier for the product (should be one of the top 3 levels of the hierarchy)\"},{\"name\":\"prodTotalSales\",\"type\":\"double\",\"doc\":\"The total sales for the product across all segments for given timePeriod\"},{\"name\":\"prodPercentSales\",\"type\":\"double\",\"doc\":\"Percent of sales this product makes up\"},{\"name\":\"totalSales\",\"type\":\"double\",\"doc\":\"Total sales of all products across all segments for given time period\"},{\"name\":\"bestProdSales\",\"type\":\"double\",\"doc\":\"total sales for given product in Best of Class segment\"},{\"name\":\"bestTotalSales\",\"type\":\"double\",\"doc\":\"total sales for segment across all products\"},{\"name\":\"bestPercentSales\",\"type\":\"double\",\"doc\":\"percent of sales this product makes up from segment\"},{\"name\":\"bestIndex\",\"type\":\"double\",\"doc\":\"index of sales compared to prodPercentSales\"},{\"name\":\"risingProdSales\",\"type\":\"double\",\"doc\":\"total sales for given product in Rising Stars segment\"},{\"name\":\"risingTotalSales\",\"type\":\"double\",\"doc\":\"total sales for segment across all products\"},{\"name\":\"risingPercentSales\",\"type\":\"double\",\"doc\":\"percent of sales this product makes up from segment\"},{\"name\":\"risingIndex\",\"type\":\"double\",\"doc\":\"index of sales compared to prodPercentSales\"},{\"name\":\"middleProdSales\",\"type\":\"double\",\"doc\":\"total sales for given product in Middle of the Road segment\"},{\"name\":\"middleTotalSales\",\"type\":\"double\",\"doc\":\"total sales for segment across all products\"},{\"name\":\"middlePercentSales\",\"type\":\"double\",\"doc\":\"percent of sales this product makes up from segment\"},{\"name\":\"middleIndex\",\"type\":\"double\",\"doc\":\"index of sales compared to prodPercentSales\"},{\"name\":\"lapsingProdSales\",\"type\":\"double\",\"doc\":\"total sales for given product in Lapsing segment\"},{\"name\":\"lapsingTotalSales\",\"type\":\"double\",\"doc\":\"total sales for segment across all products\"},{\"name\":\"lapsingPercentSales\",\"type\":\"double\",\"doc\":\"percent of sales this product makes up from segment\"},{\"name\":\"lapsingIndex\",\"type\":\"double\",\"doc\":\"index of sales compared to prodPercentSales\"},{\"name\":\"deeplyProdSales\",\"type\":\"double\",\"doc\":\"total sales for given product in Deeply Lapsed segment\"},{\"name\":\"deeplyTotalSales\",\"type\":\"double\",\"doc\":\"total sales for segment across all products\"},{\"name\":\"deeplyPercentSales\",\"type\":\"double\",\"doc\":\"percent of sales this product makes up from segment\"},{\"name\":\"deeplyIndex\",\"type\":\"double\",\"doc\":\"index of sales compared to prodPercentSales\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** TimePeriod array is for */
  @Deprecated public int timePeriod;
  /** The category identifier for the product (should be one of the top 3 levels of the hierarchy) */
  @Deprecated public java.lang.CharSequence productCat;
  /** The total sales for the product across all segments for given timePeriod */
  @Deprecated public double prodTotalSales;
  /** Percent of sales this product makes up */
  @Deprecated public double prodPercentSales;
  /** Total sales of all products across all segments for given time period */
  @Deprecated public double totalSales;
  /** total sales for given product in Best of Class segment */
  @Deprecated public double bestProdSales;
  /** total sales for segment across all products */
  @Deprecated public double bestTotalSales;
  /** percent of sales this product makes up from segment */
  @Deprecated public double bestPercentSales;
  /** index of sales compared to prodPercentSales */
  @Deprecated public double bestIndex;
  /** total sales for given product in Rising Stars segment */
  @Deprecated public double risingProdSales;
  /** total sales for segment across all products */
  @Deprecated public double risingTotalSales;
  /** percent of sales this product makes up from segment */
  @Deprecated public double risingPercentSales;
  /** index of sales compared to prodPercentSales */
  @Deprecated public double risingIndex;
  /** total sales for given product in Middle of the Road segment */
  @Deprecated public double middleProdSales;
  /** total sales for segment across all products */
  @Deprecated public double middleTotalSales;
  /** percent of sales this product makes up from segment */
  @Deprecated public double middlePercentSales;
  /** index of sales compared to prodPercentSales */
  @Deprecated public double middleIndex;
  /** total sales for given product in Lapsing segment */
  @Deprecated public double lapsingProdSales;
  /** total sales for segment across all products */
  @Deprecated public double lapsingTotalSales;
  /** percent of sales this product makes up from segment */
  @Deprecated public double lapsingPercentSales;
  /** index of sales compared to prodPercentSales */
  @Deprecated public double lapsingIndex;
  /** total sales for given product in Deeply Lapsed segment */
  @Deprecated public double deeplyProdSales;
  /** total sales for segment across all products */
  @Deprecated public double deeplyTotalSales;
  /** percent of sales this product makes up from segment */
  @Deprecated public double deeplyPercentSales;
  /** index of sales compared to prodPercentSales */
  @Deprecated public double deeplyIndex;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public lifecycleProdMetrics() {}

  /**
   * All-args constructor.
   * @param timePeriod TimePeriod array is for
   * @param productCat The category identifier for the product (should be one of the top 3 levels of the hierarchy)
   * @param prodTotalSales The total sales for the product across all segments for given timePeriod
   * @param prodPercentSales Percent of sales this product makes up
   * @param totalSales Total sales of all products across all segments for given time period
   * @param bestProdSales total sales for given product in Best of Class segment
   * @param bestTotalSales total sales for segment across all products
   * @param bestPercentSales percent of sales this product makes up from segment
   * @param bestIndex index of sales compared to prodPercentSales
   * @param risingProdSales total sales for given product in Rising Stars segment
   * @param risingTotalSales total sales for segment across all products
   * @param risingPercentSales percent of sales this product makes up from segment
   * @param risingIndex index of sales compared to prodPercentSales
   * @param middleProdSales total sales for given product in Middle of the Road segment
   * @param middleTotalSales total sales for segment across all products
   * @param middlePercentSales percent of sales this product makes up from segment
   * @param middleIndex index of sales compared to prodPercentSales
   * @param lapsingProdSales total sales for given product in Lapsing segment
   * @param lapsingTotalSales total sales for segment across all products
   * @param lapsingPercentSales percent of sales this product makes up from segment
   * @param lapsingIndex index of sales compared to prodPercentSales
   * @param deeplyProdSales total sales for given product in Deeply Lapsed segment
   * @param deeplyTotalSales total sales for segment across all products
   * @param deeplyPercentSales percent of sales this product makes up from segment
   * @param deeplyIndex index of sales compared to prodPercentSales
   */
  public lifecycleProdMetrics(java.lang.Integer timePeriod, java.lang.CharSequence productCat, java.lang.Double prodTotalSales, java.lang.Double prodPercentSales, java.lang.Double totalSales, java.lang.Double bestProdSales, java.lang.Double bestTotalSales, java.lang.Double bestPercentSales, java.lang.Double bestIndex, java.lang.Double risingProdSales, java.lang.Double risingTotalSales, java.lang.Double risingPercentSales, java.lang.Double risingIndex, java.lang.Double middleProdSales, java.lang.Double middleTotalSales, java.lang.Double middlePercentSales, java.lang.Double middleIndex, java.lang.Double lapsingProdSales, java.lang.Double lapsingTotalSales, java.lang.Double lapsingPercentSales, java.lang.Double lapsingIndex, java.lang.Double deeplyProdSales, java.lang.Double deeplyTotalSales, java.lang.Double deeplyPercentSales, java.lang.Double deeplyIndex) {
    this.timePeriod = timePeriod;
    this.productCat = productCat;
    this.prodTotalSales = prodTotalSales;
    this.prodPercentSales = prodPercentSales;
    this.totalSales = totalSales;
    this.bestProdSales = bestProdSales;
    this.bestTotalSales = bestTotalSales;
    this.bestPercentSales = bestPercentSales;
    this.bestIndex = bestIndex;
    this.risingProdSales = risingProdSales;
    this.risingTotalSales = risingTotalSales;
    this.risingPercentSales = risingPercentSales;
    this.risingIndex = risingIndex;
    this.middleProdSales = middleProdSales;
    this.middleTotalSales = middleTotalSales;
    this.middlePercentSales = middlePercentSales;
    this.middleIndex = middleIndex;
    this.lapsingProdSales = lapsingProdSales;
    this.lapsingTotalSales = lapsingTotalSales;
    this.lapsingPercentSales = lapsingPercentSales;
    this.lapsingIndex = lapsingIndex;
    this.deeplyProdSales = deeplyProdSales;
    this.deeplyTotalSales = deeplyTotalSales;
    this.deeplyPercentSales = deeplyPercentSales;
    this.deeplyIndex = deeplyIndex;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timePeriod;
    case 1: return productCat;
    case 2: return prodTotalSales;
    case 3: return prodPercentSales;
    case 4: return totalSales;
    case 5: return bestProdSales;
    case 6: return bestTotalSales;
    case 7: return bestPercentSales;
    case 8: return bestIndex;
    case 9: return risingProdSales;
    case 10: return risingTotalSales;
    case 11: return risingPercentSales;
    case 12: return risingIndex;
    case 13: return middleProdSales;
    case 14: return middleTotalSales;
    case 15: return middlePercentSales;
    case 16: return middleIndex;
    case 17: return lapsingProdSales;
    case 18: return lapsingTotalSales;
    case 19: return lapsingPercentSales;
    case 20: return lapsingIndex;
    case 21: return deeplyProdSales;
    case 22: return deeplyTotalSales;
    case 23: return deeplyPercentSales;
    case 24: return deeplyIndex;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timePeriod = (java.lang.Integer)value$; break;
    case 1: productCat = (java.lang.CharSequence)value$; break;
    case 2: prodTotalSales = (java.lang.Double)value$; break;
    case 3: prodPercentSales = (java.lang.Double)value$; break;
    case 4: totalSales = (java.lang.Double)value$; break;
    case 5: bestProdSales = (java.lang.Double)value$; break;
    case 6: bestTotalSales = (java.lang.Double)value$; break;
    case 7: bestPercentSales = (java.lang.Double)value$; break;
    case 8: bestIndex = (java.lang.Double)value$; break;
    case 9: risingProdSales = (java.lang.Double)value$; break;
    case 10: risingTotalSales = (java.lang.Double)value$; break;
    case 11: risingPercentSales = (java.lang.Double)value$; break;
    case 12: risingIndex = (java.lang.Double)value$; break;
    case 13: middleProdSales = (java.lang.Double)value$; break;
    case 14: middleTotalSales = (java.lang.Double)value$; break;
    case 15: middlePercentSales = (java.lang.Double)value$; break;
    case 16: middleIndex = (java.lang.Double)value$; break;
    case 17: lapsingProdSales = (java.lang.Double)value$; break;
    case 18: lapsingTotalSales = (java.lang.Double)value$; break;
    case 19: lapsingPercentSales = (java.lang.Double)value$; break;
    case 20: lapsingIndex = (java.lang.Double)value$; break;
    case 21: deeplyProdSales = (java.lang.Double)value$; break;
    case 22: deeplyTotalSales = (java.lang.Double)value$; break;
    case 23: deeplyPercentSales = (java.lang.Double)value$; break;
    case 24: deeplyIndex = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timePeriod' field.
   * @return TimePeriod array is for
   */
  public java.lang.Integer getTimePeriod() {
    return timePeriod;
  }

  /**
   * Sets the value of the 'timePeriod' field.
   * TimePeriod array is for
   * @param value the value to set.
   */
  public void setTimePeriod(java.lang.Integer value) {
    this.timePeriod = value;
  }

  /**
   * Gets the value of the 'productCat' field.
   * @return The category identifier for the product (should be one of the top 3 levels of the hierarchy)
   */
  public java.lang.CharSequence getProductCat() {
    return productCat;
  }

  /**
   * Sets the value of the 'productCat' field.
   * The category identifier for the product (should be one of the top 3 levels of the hierarchy)
   * @param value the value to set.
   */
  public void setProductCat(java.lang.CharSequence value) {
    this.productCat = value;
  }

  /**
   * Gets the value of the 'prodTotalSales' field.
   * @return The total sales for the product across all segments for given timePeriod
   */
  public java.lang.Double getProdTotalSales() {
    return prodTotalSales;
  }

  /**
   * Sets the value of the 'prodTotalSales' field.
   * The total sales for the product across all segments for given timePeriod
   * @param value the value to set.
   */
  public void setProdTotalSales(java.lang.Double value) {
    this.prodTotalSales = value;
  }

  /**
   * Gets the value of the 'prodPercentSales' field.
   * @return Percent of sales this product makes up
   */
  public java.lang.Double getProdPercentSales() {
    return prodPercentSales;
  }

  /**
   * Sets the value of the 'prodPercentSales' field.
   * Percent of sales this product makes up
   * @param value the value to set.
   */
  public void setProdPercentSales(java.lang.Double value) {
    this.prodPercentSales = value;
  }

  /**
   * Gets the value of the 'totalSales' field.
   * @return Total sales of all products across all segments for given time period
   */
  public java.lang.Double getTotalSales() {
    return totalSales;
  }

  /**
   * Sets the value of the 'totalSales' field.
   * Total sales of all products across all segments for given time period
   * @param value the value to set.
   */
  public void setTotalSales(java.lang.Double value) {
    this.totalSales = value;
  }

  /**
   * Gets the value of the 'bestProdSales' field.
   * @return total sales for given product in Best of Class segment
   */
  public java.lang.Double getBestProdSales() {
    return bestProdSales;
  }

  /**
   * Sets the value of the 'bestProdSales' field.
   * total sales for given product in Best of Class segment
   * @param value the value to set.
   */
  public void setBestProdSales(java.lang.Double value) {
    this.bestProdSales = value;
  }

  /**
   * Gets the value of the 'bestTotalSales' field.
   * @return total sales for segment across all products
   */
  public java.lang.Double getBestTotalSales() {
    return bestTotalSales;
  }

  /**
   * Sets the value of the 'bestTotalSales' field.
   * total sales for segment across all products
   * @param value the value to set.
   */
  public void setBestTotalSales(java.lang.Double value) {
    this.bestTotalSales = value;
  }

  /**
   * Gets the value of the 'bestPercentSales' field.
   * @return percent of sales this product makes up from segment
   */
  public java.lang.Double getBestPercentSales() {
    return bestPercentSales;
  }

  /**
   * Sets the value of the 'bestPercentSales' field.
   * percent of sales this product makes up from segment
   * @param value the value to set.
   */
  public void setBestPercentSales(java.lang.Double value) {
    this.bestPercentSales = value;
  }

  /**
   * Gets the value of the 'bestIndex' field.
   * @return index of sales compared to prodPercentSales
   */
  public java.lang.Double getBestIndex() {
    return bestIndex;
  }

  /**
   * Sets the value of the 'bestIndex' field.
   * index of sales compared to prodPercentSales
   * @param value the value to set.
   */
  public void setBestIndex(java.lang.Double value) {
    this.bestIndex = value;
  }

  /**
   * Gets the value of the 'risingProdSales' field.
   * @return total sales for given product in Rising Stars segment
   */
  public java.lang.Double getRisingProdSales() {
    return risingProdSales;
  }

  /**
   * Sets the value of the 'risingProdSales' field.
   * total sales for given product in Rising Stars segment
   * @param value the value to set.
   */
  public void setRisingProdSales(java.lang.Double value) {
    this.risingProdSales = value;
  }

  /**
   * Gets the value of the 'risingTotalSales' field.
   * @return total sales for segment across all products
   */
  public java.lang.Double getRisingTotalSales() {
    return risingTotalSales;
  }

  /**
   * Sets the value of the 'risingTotalSales' field.
   * total sales for segment across all products
   * @param value the value to set.
   */
  public void setRisingTotalSales(java.lang.Double value) {
    this.risingTotalSales = value;
  }

  /**
   * Gets the value of the 'risingPercentSales' field.
   * @return percent of sales this product makes up from segment
   */
  public java.lang.Double getRisingPercentSales() {
    return risingPercentSales;
  }

  /**
   * Sets the value of the 'risingPercentSales' field.
   * percent of sales this product makes up from segment
   * @param value the value to set.
   */
  public void setRisingPercentSales(java.lang.Double value) {
    this.risingPercentSales = value;
  }

  /**
   * Gets the value of the 'risingIndex' field.
   * @return index of sales compared to prodPercentSales
   */
  public java.lang.Double getRisingIndex() {
    return risingIndex;
  }

  /**
   * Sets the value of the 'risingIndex' field.
   * index of sales compared to prodPercentSales
   * @param value the value to set.
   */
  public void setRisingIndex(java.lang.Double value) {
    this.risingIndex = value;
  }

  /**
   * Gets the value of the 'middleProdSales' field.
   * @return total sales for given product in Middle of the Road segment
   */
  public java.lang.Double getMiddleProdSales() {
    return middleProdSales;
  }

  /**
   * Sets the value of the 'middleProdSales' field.
   * total sales for given product in Middle of the Road segment
   * @param value the value to set.
   */
  public void setMiddleProdSales(java.lang.Double value) {
    this.middleProdSales = value;
  }

  /**
   * Gets the value of the 'middleTotalSales' field.
   * @return total sales for segment across all products
   */
  public java.lang.Double getMiddleTotalSales() {
    return middleTotalSales;
  }

  /**
   * Sets the value of the 'middleTotalSales' field.
   * total sales for segment across all products
   * @param value the value to set.
   */
  public void setMiddleTotalSales(java.lang.Double value) {
    this.middleTotalSales = value;
  }

  /**
   * Gets the value of the 'middlePercentSales' field.
   * @return percent of sales this product makes up from segment
   */
  public java.lang.Double getMiddlePercentSales() {
    return middlePercentSales;
  }

  /**
   * Sets the value of the 'middlePercentSales' field.
   * percent of sales this product makes up from segment
   * @param value the value to set.
   */
  public void setMiddlePercentSales(java.lang.Double value) {
    this.middlePercentSales = value;
  }

  /**
   * Gets the value of the 'middleIndex' field.
   * @return index of sales compared to prodPercentSales
   */
  public java.lang.Double getMiddleIndex() {
    return middleIndex;
  }

  /**
   * Sets the value of the 'middleIndex' field.
   * index of sales compared to prodPercentSales
   * @param value the value to set.
   */
  public void setMiddleIndex(java.lang.Double value) {
    this.middleIndex = value;
  }

  /**
   * Gets the value of the 'lapsingProdSales' field.
   * @return total sales for given product in Lapsing segment
   */
  public java.lang.Double getLapsingProdSales() {
    return lapsingProdSales;
  }

  /**
   * Sets the value of the 'lapsingProdSales' field.
   * total sales for given product in Lapsing segment
   * @param value the value to set.
   */
  public void setLapsingProdSales(java.lang.Double value) {
    this.lapsingProdSales = value;
  }

  /**
   * Gets the value of the 'lapsingTotalSales' field.
   * @return total sales for segment across all products
   */
  public java.lang.Double getLapsingTotalSales() {
    return lapsingTotalSales;
  }

  /**
   * Sets the value of the 'lapsingTotalSales' field.
   * total sales for segment across all products
   * @param value the value to set.
   */
  public void setLapsingTotalSales(java.lang.Double value) {
    this.lapsingTotalSales = value;
  }

  /**
   * Gets the value of the 'lapsingPercentSales' field.
   * @return percent of sales this product makes up from segment
   */
  public java.lang.Double getLapsingPercentSales() {
    return lapsingPercentSales;
  }

  /**
   * Sets the value of the 'lapsingPercentSales' field.
   * percent of sales this product makes up from segment
   * @param value the value to set.
   */
  public void setLapsingPercentSales(java.lang.Double value) {
    this.lapsingPercentSales = value;
  }

  /**
   * Gets the value of the 'lapsingIndex' field.
   * @return index of sales compared to prodPercentSales
   */
  public java.lang.Double getLapsingIndex() {
    return lapsingIndex;
  }

  /**
   * Sets the value of the 'lapsingIndex' field.
   * index of sales compared to prodPercentSales
   * @param value the value to set.
   */
  public void setLapsingIndex(java.lang.Double value) {
    this.lapsingIndex = value;
  }

  /**
   * Gets the value of the 'deeplyProdSales' field.
   * @return total sales for given product in Deeply Lapsed segment
   */
  public java.lang.Double getDeeplyProdSales() {
    return deeplyProdSales;
  }

  /**
   * Sets the value of the 'deeplyProdSales' field.
   * total sales for given product in Deeply Lapsed segment
   * @param value the value to set.
   */
  public void setDeeplyProdSales(java.lang.Double value) {
    this.deeplyProdSales = value;
  }

  /**
   * Gets the value of the 'deeplyTotalSales' field.
   * @return total sales for segment across all products
   */
  public java.lang.Double getDeeplyTotalSales() {
    return deeplyTotalSales;
  }

  /**
   * Sets the value of the 'deeplyTotalSales' field.
   * total sales for segment across all products
   * @param value the value to set.
   */
  public void setDeeplyTotalSales(java.lang.Double value) {
    this.deeplyTotalSales = value;
  }

  /**
   * Gets the value of the 'deeplyPercentSales' field.
   * @return percent of sales this product makes up from segment
   */
  public java.lang.Double getDeeplyPercentSales() {
    return deeplyPercentSales;
  }

  /**
   * Sets the value of the 'deeplyPercentSales' field.
   * percent of sales this product makes up from segment
   * @param value the value to set.
   */
  public void setDeeplyPercentSales(java.lang.Double value) {
    this.deeplyPercentSales = value;
  }

  /**
   * Gets the value of the 'deeplyIndex' field.
   * @return index of sales compared to prodPercentSales
   */
  public java.lang.Double getDeeplyIndex() {
    return deeplyIndex;
  }

  /**
   * Sets the value of the 'deeplyIndex' field.
   * index of sales compared to prodPercentSales
   * @param value the value to set.
   */
  public void setDeeplyIndex(java.lang.Double value) {
    this.deeplyIndex = value;
  }

  /**
   * Creates a new lifecycleProdMetrics RecordBuilder.
   * @return A new lifecycleProdMetrics RecordBuilder
   */
  public static com.brierley.avro.schemas.lifecycleProdMetrics.Builder newBuilder() {
    return new com.brierley.avro.schemas.lifecycleProdMetrics.Builder();
  }

  /**
   * Creates a new lifecycleProdMetrics RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new lifecycleProdMetrics RecordBuilder
   */
  public static com.brierley.avro.schemas.lifecycleProdMetrics.Builder newBuilder(com.brierley.avro.schemas.lifecycleProdMetrics.Builder other) {
    return new com.brierley.avro.schemas.lifecycleProdMetrics.Builder(other);
  }

  /**
   * Creates a new lifecycleProdMetrics RecordBuilder by copying an existing lifecycleProdMetrics instance.
   * @param other The existing instance to copy.
   * @return A new lifecycleProdMetrics RecordBuilder
   */
  public static com.brierley.avro.schemas.lifecycleProdMetrics.Builder newBuilder(com.brierley.avro.schemas.lifecycleProdMetrics other) {
    return new com.brierley.avro.schemas.lifecycleProdMetrics.Builder(other);
  }

  /**
   * RecordBuilder for lifecycleProdMetrics instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<lifecycleProdMetrics>
    implements org.apache.avro.data.RecordBuilder<lifecycleProdMetrics> {

    /** TimePeriod array is for */
    private int timePeriod;
    /** The category identifier for the product (should be one of the top 3 levels of the hierarchy) */
    private java.lang.CharSequence productCat;
    /** The total sales for the product across all segments for given timePeriod */
    private double prodTotalSales;
    /** Percent of sales this product makes up */
    private double prodPercentSales;
    /** Total sales of all products across all segments for given time period */
    private double totalSales;
    /** total sales for given product in Best of Class segment */
    private double bestProdSales;
    /** total sales for segment across all products */
    private double bestTotalSales;
    /** percent of sales this product makes up from segment */
    private double bestPercentSales;
    /** index of sales compared to prodPercentSales */
    private double bestIndex;
    /** total sales for given product in Rising Stars segment */
    private double risingProdSales;
    /** total sales for segment across all products */
    private double risingTotalSales;
    /** percent of sales this product makes up from segment */
    private double risingPercentSales;
    /** index of sales compared to prodPercentSales */
    private double risingIndex;
    /** total sales for given product in Middle of the Road segment */
    private double middleProdSales;
    /** total sales for segment across all products */
    private double middleTotalSales;
    /** percent of sales this product makes up from segment */
    private double middlePercentSales;
    /** index of sales compared to prodPercentSales */
    private double middleIndex;
    /** total sales for given product in Lapsing segment */
    private double lapsingProdSales;
    /** total sales for segment across all products */
    private double lapsingTotalSales;
    /** percent of sales this product makes up from segment */
    private double lapsingPercentSales;
    /** index of sales compared to prodPercentSales */
    private double lapsingIndex;
    /** total sales for given product in Deeply Lapsed segment */
    private double deeplyProdSales;
    /** total sales for segment across all products */
    private double deeplyTotalSales;
    /** percent of sales this product makes up from segment */
    private double deeplyPercentSales;
    /** index of sales compared to prodPercentSales */
    private double deeplyIndex;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.lifecycleProdMetrics.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productCat)) {
        this.productCat = data().deepCopy(fields()[1].schema(), other.productCat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.prodTotalSales)) {
        this.prodTotalSales = data().deepCopy(fields()[2].schema(), other.prodTotalSales);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.prodPercentSales)) {
        this.prodPercentSales = data().deepCopy(fields()[3].schema(), other.prodPercentSales);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalSales)) {
        this.totalSales = data().deepCopy(fields()[4].schema(), other.totalSales);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bestProdSales)) {
        this.bestProdSales = data().deepCopy(fields()[5].schema(), other.bestProdSales);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bestTotalSales)) {
        this.bestTotalSales = data().deepCopy(fields()[6].schema(), other.bestTotalSales);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bestPercentSales)) {
        this.bestPercentSales = data().deepCopy(fields()[7].schema(), other.bestPercentSales);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bestIndex)) {
        this.bestIndex = data().deepCopy(fields()[8].schema(), other.bestIndex);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.risingProdSales)) {
        this.risingProdSales = data().deepCopy(fields()[9].schema(), other.risingProdSales);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.risingTotalSales)) {
        this.risingTotalSales = data().deepCopy(fields()[10].schema(), other.risingTotalSales);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.risingPercentSales)) {
        this.risingPercentSales = data().deepCopy(fields()[11].schema(), other.risingPercentSales);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.risingIndex)) {
        this.risingIndex = data().deepCopy(fields()[12].schema(), other.risingIndex);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.middleProdSales)) {
        this.middleProdSales = data().deepCopy(fields()[13].schema(), other.middleProdSales);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.middleTotalSales)) {
        this.middleTotalSales = data().deepCopy(fields()[14].schema(), other.middleTotalSales);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.middlePercentSales)) {
        this.middlePercentSales = data().deepCopy(fields()[15].schema(), other.middlePercentSales);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.middleIndex)) {
        this.middleIndex = data().deepCopy(fields()[16].schema(), other.middleIndex);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.lapsingProdSales)) {
        this.lapsingProdSales = data().deepCopy(fields()[17].schema(), other.lapsingProdSales);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.lapsingTotalSales)) {
        this.lapsingTotalSales = data().deepCopy(fields()[18].schema(), other.lapsingTotalSales);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.lapsingPercentSales)) {
        this.lapsingPercentSales = data().deepCopy(fields()[19].schema(), other.lapsingPercentSales);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.lapsingIndex)) {
        this.lapsingIndex = data().deepCopy(fields()[20].schema(), other.lapsingIndex);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.deeplyProdSales)) {
        this.deeplyProdSales = data().deepCopy(fields()[21].schema(), other.deeplyProdSales);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.deeplyTotalSales)) {
        this.deeplyTotalSales = data().deepCopy(fields()[22].schema(), other.deeplyTotalSales);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.deeplyPercentSales)) {
        this.deeplyPercentSales = data().deepCopy(fields()[23].schema(), other.deeplyPercentSales);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.deeplyIndex)) {
        this.deeplyIndex = data().deepCopy(fields()[24].schema(), other.deeplyIndex);
        fieldSetFlags()[24] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing lifecycleProdMetrics instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.lifecycleProdMetrics other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timePeriod)) {
        this.timePeriod = data().deepCopy(fields()[0].schema(), other.timePeriod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productCat)) {
        this.productCat = data().deepCopy(fields()[1].schema(), other.productCat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.prodTotalSales)) {
        this.prodTotalSales = data().deepCopy(fields()[2].schema(), other.prodTotalSales);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.prodPercentSales)) {
        this.prodPercentSales = data().deepCopy(fields()[3].schema(), other.prodPercentSales);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalSales)) {
        this.totalSales = data().deepCopy(fields()[4].schema(), other.totalSales);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bestProdSales)) {
        this.bestProdSales = data().deepCopy(fields()[5].schema(), other.bestProdSales);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bestTotalSales)) {
        this.bestTotalSales = data().deepCopy(fields()[6].schema(), other.bestTotalSales);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bestPercentSales)) {
        this.bestPercentSales = data().deepCopy(fields()[7].schema(), other.bestPercentSales);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bestIndex)) {
        this.bestIndex = data().deepCopy(fields()[8].schema(), other.bestIndex);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.risingProdSales)) {
        this.risingProdSales = data().deepCopy(fields()[9].schema(), other.risingProdSales);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.risingTotalSales)) {
        this.risingTotalSales = data().deepCopy(fields()[10].schema(), other.risingTotalSales);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.risingPercentSales)) {
        this.risingPercentSales = data().deepCopy(fields()[11].schema(), other.risingPercentSales);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.risingIndex)) {
        this.risingIndex = data().deepCopy(fields()[12].schema(), other.risingIndex);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.middleProdSales)) {
        this.middleProdSales = data().deepCopy(fields()[13].schema(), other.middleProdSales);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.middleTotalSales)) {
        this.middleTotalSales = data().deepCopy(fields()[14].schema(), other.middleTotalSales);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.middlePercentSales)) {
        this.middlePercentSales = data().deepCopy(fields()[15].schema(), other.middlePercentSales);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.middleIndex)) {
        this.middleIndex = data().deepCopy(fields()[16].schema(), other.middleIndex);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.lapsingProdSales)) {
        this.lapsingProdSales = data().deepCopy(fields()[17].schema(), other.lapsingProdSales);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.lapsingTotalSales)) {
        this.lapsingTotalSales = data().deepCopy(fields()[18].schema(), other.lapsingTotalSales);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.lapsingPercentSales)) {
        this.lapsingPercentSales = data().deepCopy(fields()[19].schema(), other.lapsingPercentSales);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.lapsingIndex)) {
        this.lapsingIndex = data().deepCopy(fields()[20].schema(), other.lapsingIndex);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.deeplyProdSales)) {
        this.deeplyProdSales = data().deepCopy(fields()[21].schema(), other.deeplyProdSales);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.deeplyTotalSales)) {
        this.deeplyTotalSales = data().deepCopy(fields()[22].schema(), other.deeplyTotalSales);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.deeplyPercentSales)) {
        this.deeplyPercentSales = data().deepCopy(fields()[23].schema(), other.deeplyPercentSales);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.deeplyIndex)) {
        this.deeplyIndex = data().deepCopy(fields()[24].schema(), other.deeplyIndex);
        fieldSetFlags()[24] = true;
      }
    }

    /**
      * Gets the value of the 'timePeriod' field.
      * TimePeriod array is for
      * @return The value.
      */
    public java.lang.Integer getTimePeriod() {
      return timePeriod;
    }

    /**
      * Sets the value of the 'timePeriod' field.
      * TimePeriod array is for
      * @param value The value of 'timePeriod'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setTimePeriod(int value) {
      validate(fields()[0], value);
      this.timePeriod = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timePeriod' field has been set.
      * TimePeriod array is for
      * @return True if the 'timePeriod' field has been set, false otherwise.
      */
    public boolean hasTimePeriod() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timePeriod' field.
      * TimePeriod array is for
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearTimePeriod() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productCat' field.
      * The category identifier for the product (should be one of the top 3 levels of the hierarchy)
      * @return The value.
      */
    public java.lang.CharSequence getProductCat() {
      return productCat;
    }

    /**
      * Sets the value of the 'productCat' field.
      * The category identifier for the product (should be one of the top 3 levels of the hierarchy)
      * @param value The value of 'productCat'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setProductCat(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.productCat = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productCat' field has been set.
      * The category identifier for the product (should be one of the top 3 levels of the hierarchy)
      * @return True if the 'productCat' field has been set, false otherwise.
      */
    public boolean hasProductCat() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productCat' field.
      * The category identifier for the product (should be one of the top 3 levels of the hierarchy)
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearProductCat() {
      productCat = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'prodTotalSales' field.
      * The total sales for the product across all segments for given timePeriod
      * @return The value.
      */
    public java.lang.Double getProdTotalSales() {
      return prodTotalSales;
    }

    /**
      * Sets the value of the 'prodTotalSales' field.
      * The total sales for the product across all segments for given timePeriod
      * @param value The value of 'prodTotalSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setProdTotalSales(double value) {
      validate(fields()[2], value);
      this.prodTotalSales = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'prodTotalSales' field has been set.
      * The total sales for the product across all segments for given timePeriod
      * @return True if the 'prodTotalSales' field has been set, false otherwise.
      */
    public boolean hasProdTotalSales() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'prodTotalSales' field.
      * The total sales for the product across all segments for given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearProdTotalSales() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'prodPercentSales' field.
      * Percent of sales this product makes up
      * @return The value.
      */
    public java.lang.Double getProdPercentSales() {
      return prodPercentSales;
    }

    /**
      * Sets the value of the 'prodPercentSales' field.
      * Percent of sales this product makes up
      * @param value The value of 'prodPercentSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setProdPercentSales(double value) {
      validate(fields()[3], value);
      this.prodPercentSales = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'prodPercentSales' field has been set.
      * Percent of sales this product makes up
      * @return True if the 'prodPercentSales' field has been set, false otherwise.
      */
    public boolean hasProdPercentSales() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'prodPercentSales' field.
      * Percent of sales this product makes up
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearProdPercentSales() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSales' field.
      * Total sales of all products across all segments for given time period
      * @return The value.
      */
    public java.lang.Double getTotalSales() {
      return totalSales;
    }

    /**
      * Sets the value of the 'totalSales' field.
      * Total sales of all products across all segments for given time period
      * @param value The value of 'totalSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setTotalSales(double value) {
      validate(fields()[4], value);
      this.totalSales = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSales' field has been set.
      * Total sales of all products across all segments for given time period
      * @return True if the 'totalSales' field has been set, false otherwise.
      */
    public boolean hasTotalSales() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'totalSales' field.
      * Total sales of all products across all segments for given time period
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearTotalSales() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestProdSales' field.
      * total sales for given product in Best of Class segment
      * @return The value.
      */
    public java.lang.Double getBestProdSales() {
      return bestProdSales;
    }

    /**
      * Sets the value of the 'bestProdSales' field.
      * total sales for given product in Best of Class segment
      * @param value The value of 'bestProdSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setBestProdSales(double value) {
      validate(fields()[5], value);
      this.bestProdSales = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'bestProdSales' field has been set.
      * total sales for given product in Best of Class segment
      * @return True if the 'bestProdSales' field has been set, false otherwise.
      */
    public boolean hasBestProdSales() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'bestProdSales' field.
      * total sales for given product in Best of Class segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearBestProdSales() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestTotalSales' field.
      * total sales for segment across all products
      * @return The value.
      */
    public java.lang.Double getBestTotalSales() {
      return bestTotalSales;
    }

    /**
      * Sets the value of the 'bestTotalSales' field.
      * total sales for segment across all products
      * @param value The value of 'bestTotalSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setBestTotalSales(double value) {
      validate(fields()[6], value);
      this.bestTotalSales = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'bestTotalSales' field has been set.
      * total sales for segment across all products
      * @return True if the 'bestTotalSales' field has been set, false otherwise.
      */
    public boolean hasBestTotalSales() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'bestTotalSales' field.
      * total sales for segment across all products
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearBestTotalSales() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestPercentSales' field.
      * percent of sales this product makes up from segment
      * @return The value.
      */
    public java.lang.Double getBestPercentSales() {
      return bestPercentSales;
    }

    /**
      * Sets the value of the 'bestPercentSales' field.
      * percent of sales this product makes up from segment
      * @param value The value of 'bestPercentSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setBestPercentSales(double value) {
      validate(fields()[7], value);
      this.bestPercentSales = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'bestPercentSales' field has been set.
      * percent of sales this product makes up from segment
      * @return True if the 'bestPercentSales' field has been set, false otherwise.
      */
    public boolean hasBestPercentSales() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'bestPercentSales' field.
      * percent of sales this product makes up from segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearBestPercentSales() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestIndex' field.
      * index of sales compared to prodPercentSales
      * @return The value.
      */
    public java.lang.Double getBestIndex() {
      return bestIndex;
    }

    /**
      * Sets the value of the 'bestIndex' field.
      * index of sales compared to prodPercentSales
      * @param value The value of 'bestIndex'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setBestIndex(double value) {
      validate(fields()[8], value);
      this.bestIndex = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'bestIndex' field has been set.
      * index of sales compared to prodPercentSales
      * @return True if the 'bestIndex' field has been set, false otherwise.
      */
    public boolean hasBestIndex() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'bestIndex' field.
      * index of sales compared to prodPercentSales
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearBestIndex() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingProdSales' field.
      * total sales for given product in Rising Stars segment
      * @return The value.
      */
    public java.lang.Double getRisingProdSales() {
      return risingProdSales;
    }

    /**
      * Sets the value of the 'risingProdSales' field.
      * total sales for given product in Rising Stars segment
      * @param value The value of 'risingProdSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setRisingProdSales(double value) {
      validate(fields()[9], value);
      this.risingProdSales = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'risingProdSales' field has been set.
      * total sales for given product in Rising Stars segment
      * @return True if the 'risingProdSales' field has been set, false otherwise.
      */
    public boolean hasRisingProdSales() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'risingProdSales' field.
      * total sales for given product in Rising Stars segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearRisingProdSales() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingTotalSales' field.
      * total sales for segment across all products
      * @return The value.
      */
    public java.lang.Double getRisingTotalSales() {
      return risingTotalSales;
    }

    /**
      * Sets the value of the 'risingTotalSales' field.
      * total sales for segment across all products
      * @param value The value of 'risingTotalSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setRisingTotalSales(double value) {
      validate(fields()[10], value);
      this.risingTotalSales = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'risingTotalSales' field has been set.
      * total sales for segment across all products
      * @return True if the 'risingTotalSales' field has been set, false otherwise.
      */
    public boolean hasRisingTotalSales() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'risingTotalSales' field.
      * total sales for segment across all products
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearRisingTotalSales() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingPercentSales' field.
      * percent of sales this product makes up from segment
      * @return The value.
      */
    public java.lang.Double getRisingPercentSales() {
      return risingPercentSales;
    }

    /**
      * Sets the value of the 'risingPercentSales' field.
      * percent of sales this product makes up from segment
      * @param value The value of 'risingPercentSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setRisingPercentSales(double value) {
      validate(fields()[11], value);
      this.risingPercentSales = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'risingPercentSales' field has been set.
      * percent of sales this product makes up from segment
      * @return True if the 'risingPercentSales' field has been set, false otherwise.
      */
    public boolean hasRisingPercentSales() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'risingPercentSales' field.
      * percent of sales this product makes up from segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearRisingPercentSales() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingIndex' field.
      * index of sales compared to prodPercentSales
      * @return The value.
      */
    public java.lang.Double getRisingIndex() {
      return risingIndex;
    }

    /**
      * Sets the value of the 'risingIndex' field.
      * index of sales compared to prodPercentSales
      * @param value The value of 'risingIndex'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setRisingIndex(double value) {
      validate(fields()[12], value);
      this.risingIndex = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'risingIndex' field has been set.
      * index of sales compared to prodPercentSales
      * @return True if the 'risingIndex' field has been set, false otherwise.
      */
    public boolean hasRisingIndex() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'risingIndex' field.
      * index of sales compared to prodPercentSales
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearRisingIndex() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleProdSales' field.
      * total sales for given product in Middle of the Road segment
      * @return The value.
      */
    public java.lang.Double getMiddleProdSales() {
      return middleProdSales;
    }

    /**
      * Sets the value of the 'middleProdSales' field.
      * total sales for given product in Middle of the Road segment
      * @param value The value of 'middleProdSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setMiddleProdSales(double value) {
      validate(fields()[13], value);
      this.middleProdSales = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'middleProdSales' field has been set.
      * total sales for given product in Middle of the Road segment
      * @return True if the 'middleProdSales' field has been set, false otherwise.
      */
    public boolean hasMiddleProdSales() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'middleProdSales' field.
      * total sales for given product in Middle of the Road segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearMiddleProdSales() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleTotalSales' field.
      * total sales for segment across all products
      * @return The value.
      */
    public java.lang.Double getMiddleTotalSales() {
      return middleTotalSales;
    }

    /**
      * Sets the value of the 'middleTotalSales' field.
      * total sales for segment across all products
      * @param value The value of 'middleTotalSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setMiddleTotalSales(double value) {
      validate(fields()[14], value);
      this.middleTotalSales = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'middleTotalSales' field has been set.
      * total sales for segment across all products
      * @return True if the 'middleTotalSales' field has been set, false otherwise.
      */
    public boolean hasMiddleTotalSales() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'middleTotalSales' field.
      * total sales for segment across all products
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearMiddleTotalSales() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'middlePercentSales' field.
      * percent of sales this product makes up from segment
      * @return The value.
      */
    public java.lang.Double getMiddlePercentSales() {
      return middlePercentSales;
    }

    /**
      * Sets the value of the 'middlePercentSales' field.
      * percent of sales this product makes up from segment
      * @param value The value of 'middlePercentSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setMiddlePercentSales(double value) {
      validate(fields()[15], value);
      this.middlePercentSales = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'middlePercentSales' field has been set.
      * percent of sales this product makes up from segment
      * @return True if the 'middlePercentSales' field has been set, false otherwise.
      */
    public boolean hasMiddlePercentSales() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'middlePercentSales' field.
      * percent of sales this product makes up from segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearMiddlePercentSales() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleIndex' field.
      * index of sales compared to prodPercentSales
      * @return The value.
      */
    public java.lang.Double getMiddleIndex() {
      return middleIndex;
    }

    /**
      * Sets the value of the 'middleIndex' field.
      * index of sales compared to prodPercentSales
      * @param value The value of 'middleIndex'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setMiddleIndex(double value) {
      validate(fields()[16], value);
      this.middleIndex = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'middleIndex' field has been set.
      * index of sales compared to prodPercentSales
      * @return True if the 'middleIndex' field has been set, false otherwise.
      */
    public boolean hasMiddleIndex() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'middleIndex' field.
      * index of sales compared to prodPercentSales
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearMiddleIndex() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingProdSales' field.
      * total sales for given product in Lapsing segment
      * @return The value.
      */
    public java.lang.Double getLapsingProdSales() {
      return lapsingProdSales;
    }

    /**
      * Sets the value of the 'lapsingProdSales' field.
      * total sales for given product in Lapsing segment
      * @param value The value of 'lapsingProdSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setLapsingProdSales(double value) {
      validate(fields()[17], value);
      this.lapsingProdSales = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingProdSales' field has been set.
      * total sales for given product in Lapsing segment
      * @return True if the 'lapsingProdSales' field has been set, false otherwise.
      */
    public boolean hasLapsingProdSales() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'lapsingProdSales' field.
      * total sales for given product in Lapsing segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearLapsingProdSales() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingTotalSales' field.
      * total sales for segment across all products
      * @return The value.
      */
    public java.lang.Double getLapsingTotalSales() {
      return lapsingTotalSales;
    }

    /**
      * Sets the value of the 'lapsingTotalSales' field.
      * total sales for segment across all products
      * @param value The value of 'lapsingTotalSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setLapsingTotalSales(double value) {
      validate(fields()[18], value);
      this.lapsingTotalSales = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingTotalSales' field has been set.
      * total sales for segment across all products
      * @return True if the 'lapsingTotalSales' field has been set, false otherwise.
      */
    public boolean hasLapsingTotalSales() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'lapsingTotalSales' field.
      * total sales for segment across all products
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearLapsingTotalSales() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingPercentSales' field.
      * percent of sales this product makes up from segment
      * @return The value.
      */
    public java.lang.Double getLapsingPercentSales() {
      return lapsingPercentSales;
    }

    /**
      * Sets the value of the 'lapsingPercentSales' field.
      * percent of sales this product makes up from segment
      * @param value The value of 'lapsingPercentSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setLapsingPercentSales(double value) {
      validate(fields()[19], value);
      this.lapsingPercentSales = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingPercentSales' field has been set.
      * percent of sales this product makes up from segment
      * @return True if the 'lapsingPercentSales' field has been set, false otherwise.
      */
    public boolean hasLapsingPercentSales() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'lapsingPercentSales' field.
      * percent of sales this product makes up from segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearLapsingPercentSales() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingIndex' field.
      * index of sales compared to prodPercentSales
      * @return The value.
      */
    public java.lang.Double getLapsingIndex() {
      return lapsingIndex;
    }

    /**
      * Sets the value of the 'lapsingIndex' field.
      * index of sales compared to prodPercentSales
      * @param value The value of 'lapsingIndex'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setLapsingIndex(double value) {
      validate(fields()[20], value);
      this.lapsingIndex = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingIndex' field has been set.
      * index of sales compared to prodPercentSales
      * @return True if the 'lapsingIndex' field has been set, false otherwise.
      */
    public boolean hasLapsingIndex() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'lapsingIndex' field.
      * index of sales compared to prodPercentSales
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearLapsingIndex() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyProdSales' field.
      * total sales for given product in Deeply Lapsed segment
      * @return The value.
      */
    public java.lang.Double getDeeplyProdSales() {
      return deeplyProdSales;
    }

    /**
      * Sets the value of the 'deeplyProdSales' field.
      * total sales for given product in Deeply Lapsed segment
      * @param value The value of 'deeplyProdSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setDeeplyProdSales(double value) {
      validate(fields()[21], value);
      this.deeplyProdSales = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyProdSales' field has been set.
      * total sales for given product in Deeply Lapsed segment
      * @return True if the 'deeplyProdSales' field has been set, false otherwise.
      */
    public boolean hasDeeplyProdSales() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'deeplyProdSales' field.
      * total sales for given product in Deeply Lapsed segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearDeeplyProdSales() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyTotalSales' field.
      * total sales for segment across all products
      * @return The value.
      */
    public java.lang.Double getDeeplyTotalSales() {
      return deeplyTotalSales;
    }

    /**
      * Sets the value of the 'deeplyTotalSales' field.
      * total sales for segment across all products
      * @param value The value of 'deeplyTotalSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setDeeplyTotalSales(double value) {
      validate(fields()[22], value);
      this.deeplyTotalSales = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyTotalSales' field has been set.
      * total sales for segment across all products
      * @return True if the 'deeplyTotalSales' field has been set, false otherwise.
      */
    public boolean hasDeeplyTotalSales() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'deeplyTotalSales' field.
      * total sales for segment across all products
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearDeeplyTotalSales() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyPercentSales' field.
      * percent of sales this product makes up from segment
      * @return The value.
      */
    public java.lang.Double getDeeplyPercentSales() {
      return deeplyPercentSales;
    }

    /**
      * Sets the value of the 'deeplyPercentSales' field.
      * percent of sales this product makes up from segment
      * @param value The value of 'deeplyPercentSales'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setDeeplyPercentSales(double value) {
      validate(fields()[23], value);
      this.deeplyPercentSales = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyPercentSales' field has been set.
      * percent of sales this product makes up from segment
      * @return True if the 'deeplyPercentSales' field has been set, false otherwise.
      */
    public boolean hasDeeplyPercentSales() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'deeplyPercentSales' field.
      * percent of sales this product makes up from segment
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearDeeplyPercentSales() {
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyIndex' field.
      * index of sales compared to prodPercentSales
      * @return The value.
      */
    public java.lang.Double getDeeplyIndex() {
      return deeplyIndex;
    }

    /**
      * Sets the value of the 'deeplyIndex' field.
      * index of sales compared to prodPercentSales
      * @param value The value of 'deeplyIndex'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder setDeeplyIndex(double value) {
      validate(fields()[24], value);
      this.deeplyIndex = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyIndex' field has been set.
      * index of sales compared to prodPercentSales
      * @return True if the 'deeplyIndex' field has been set, false otherwise.
      */
    public boolean hasDeeplyIndex() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'deeplyIndex' field.
      * index of sales compared to prodPercentSales
      * @return This builder.
      */
    public com.brierley.avro.schemas.lifecycleProdMetrics.Builder clearDeeplyIndex() {
      fieldSetFlags()[24] = false;
      return this;
    }

    @Override
    public lifecycleProdMetrics build() {
      try {
        lifecycleProdMetrics record = new lifecycleProdMetrics();
        record.timePeriod = fieldSetFlags()[0] ? this.timePeriod : (java.lang.Integer) defaultValue(fields()[0]);
        record.productCat = fieldSetFlags()[1] ? this.productCat : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.prodTotalSales = fieldSetFlags()[2] ? this.prodTotalSales : (java.lang.Double) defaultValue(fields()[2]);
        record.prodPercentSales = fieldSetFlags()[3] ? this.prodPercentSales : (java.lang.Double) defaultValue(fields()[3]);
        record.totalSales = fieldSetFlags()[4] ? this.totalSales : (java.lang.Double) defaultValue(fields()[4]);
        record.bestProdSales = fieldSetFlags()[5] ? this.bestProdSales : (java.lang.Double) defaultValue(fields()[5]);
        record.bestTotalSales = fieldSetFlags()[6] ? this.bestTotalSales : (java.lang.Double) defaultValue(fields()[6]);
        record.bestPercentSales = fieldSetFlags()[7] ? this.bestPercentSales : (java.lang.Double) defaultValue(fields()[7]);
        record.bestIndex = fieldSetFlags()[8] ? this.bestIndex : (java.lang.Double) defaultValue(fields()[8]);
        record.risingProdSales = fieldSetFlags()[9] ? this.risingProdSales : (java.lang.Double) defaultValue(fields()[9]);
        record.risingTotalSales = fieldSetFlags()[10] ? this.risingTotalSales : (java.lang.Double) defaultValue(fields()[10]);
        record.risingPercentSales = fieldSetFlags()[11] ? this.risingPercentSales : (java.lang.Double) defaultValue(fields()[11]);
        record.risingIndex = fieldSetFlags()[12] ? this.risingIndex : (java.lang.Double) defaultValue(fields()[12]);
        record.middleProdSales = fieldSetFlags()[13] ? this.middleProdSales : (java.lang.Double) defaultValue(fields()[13]);
        record.middleTotalSales = fieldSetFlags()[14] ? this.middleTotalSales : (java.lang.Double) defaultValue(fields()[14]);
        record.middlePercentSales = fieldSetFlags()[15] ? this.middlePercentSales : (java.lang.Double) defaultValue(fields()[15]);
        record.middleIndex = fieldSetFlags()[16] ? this.middleIndex : (java.lang.Double) defaultValue(fields()[16]);
        record.lapsingProdSales = fieldSetFlags()[17] ? this.lapsingProdSales : (java.lang.Double) defaultValue(fields()[17]);
        record.lapsingTotalSales = fieldSetFlags()[18] ? this.lapsingTotalSales : (java.lang.Double) defaultValue(fields()[18]);
        record.lapsingPercentSales = fieldSetFlags()[19] ? this.lapsingPercentSales : (java.lang.Double) defaultValue(fields()[19]);
        record.lapsingIndex = fieldSetFlags()[20] ? this.lapsingIndex : (java.lang.Double) defaultValue(fields()[20]);
        record.deeplyProdSales = fieldSetFlags()[21] ? this.deeplyProdSales : (java.lang.Double) defaultValue(fields()[21]);
        record.deeplyTotalSales = fieldSetFlags()[22] ? this.deeplyTotalSales : (java.lang.Double) defaultValue(fields()[22]);
        record.deeplyPercentSales = fieldSetFlags()[23] ? this.deeplyPercentSales : (java.lang.Double) defaultValue(fields()[23]);
        record.deeplyIndex = fieldSetFlags()[24] ? this.deeplyIndex : (java.lang.Double) defaultValue(fields()[24]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
