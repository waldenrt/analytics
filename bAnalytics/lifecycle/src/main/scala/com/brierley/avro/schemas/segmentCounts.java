/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.brierley.avro.schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class segmentCounts extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -755066831424205065L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"segmentCounts\",\"namespace\":\"com.brierley.avro.schemas\",\"fields\":[{\"name\":\"bestTotalCount\",\"type\":\"long\",\"doc\":\"total number of customers in segment for given timePeriod\"},{\"name\":\"bestNewCount\",\"type\":\"long\",\"doc\":\"Count of those not seen in PREVIOUS period, those not represented in migrationArray\"},{\"name\":\"risingTotalCount\",\"type\":\"long\",\"doc\":\"total number of customers in segment for given timePeriod\"},{\"name\":\"risingNewCount\",\"type\":\"long\",\"doc\":\"Count of those not seen in PREVIOUS period, those not represented in migrationArray\"},{\"name\":\"middleTotalCount\",\"type\":\"long\",\"doc\":\"total number of customers in segment for given timePeriod\"},{\"name\":\"middleNewCount\",\"type\":\"long\",\"doc\":\"Count of those not seen in PREVIOUS period, those not represented in migrationArray\"},{\"name\":\"lapsingTotalCount\",\"type\":\"long\",\"doc\":\"total number of customers in segment for given timePeriod\"},{\"name\":\"lapsingNewCount\",\"type\":\"long\",\"doc\":\"Count of those not seen in PREVIOUS period, those not represented in migrationArray\"},{\"name\":\"deeplyTotalCount\",\"type\":\"long\",\"doc\":\"total number of customers in segment for given timePeriod\"},{\"name\":\"deeplyNewCount\",\"type\":\"long\",\"doc\":\"Count of those not seen in PREVIOUS period, those not represented in migrationArray\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** total number of customers in segment for given timePeriod */
  @Deprecated public long bestTotalCount;
  /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
  @Deprecated public long bestNewCount;
  /** total number of customers in segment for given timePeriod */
  @Deprecated public long risingTotalCount;
  /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
  @Deprecated public long risingNewCount;
  /** total number of customers in segment for given timePeriod */
  @Deprecated public long middleTotalCount;
  /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
  @Deprecated public long middleNewCount;
  /** total number of customers in segment for given timePeriod */
  @Deprecated public long lapsingTotalCount;
  /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
  @Deprecated public long lapsingNewCount;
  /** total number of customers in segment for given timePeriod */
  @Deprecated public long deeplyTotalCount;
  /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
  @Deprecated public long deeplyNewCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public segmentCounts() {}

  /**
   * All-args constructor.
   * @param bestTotalCount total number of customers in segment for given timePeriod
   * @param bestNewCount Count of those not seen in PREVIOUS period, those not represented in migrationArray
   * @param risingTotalCount total number of customers in segment for given timePeriod
   * @param risingNewCount Count of those not seen in PREVIOUS period, those not represented in migrationArray
   * @param middleTotalCount total number of customers in segment for given timePeriod
   * @param middleNewCount Count of those not seen in PREVIOUS period, those not represented in migrationArray
   * @param lapsingTotalCount total number of customers in segment for given timePeriod
   * @param lapsingNewCount Count of those not seen in PREVIOUS period, those not represented in migrationArray
   * @param deeplyTotalCount total number of customers in segment for given timePeriod
   * @param deeplyNewCount Count of those not seen in PREVIOUS period, those not represented in migrationArray
   */
  public segmentCounts(java.lang.Long bestTotalCount, java.lang.Long bestNewCount, java.lang.Long risingTotalCount, java.lang.Long risingNewCount, java.lang.Long middleTotalCount, java.lang.Long middleNewCount, java.lang.Long lapsingTotalCount, java.lang.Long lapsingNewCount, java.lang.Long deeplyTotalCount, java.lang.Long deeplyNewCount) {
    this.bestTotalCount = bestTotalCount;
    this.bestNewCount = bestNewCount;
    this.risingTotalCount = risingTotalCount;
    this.risingNewCount = risingNewCount;
    this.middleTotalCount = middleTotalCount;
    this.middleNewCount = middleNewCount;
    this.lapsingTotalCount = lapsingTotalCount;
    this.lapsingNewCount = lapsingNewCount;
    this.deeplyTotalCount = deeplyTotalCount;
    this.deeplyNewCount = deeplyNewCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bestTotalCount;
    case 1: return bestNewCount;
    case 2: return risingTotalCount;
    case 3: return risingNewCount;
    case 4: return middleTotalCount;
    case 5: return middleNewCount;
    case 6: return lapsingTotalCount;
    case 7: return lapsingNewCount;
    case 8: return deeplyTotalCount;
    case 9: return deeplyNewCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bestTotalCount = (java.lang.Long)value$; break;
    case 1: bestNewCount = (java.lang.Long)value$; break;
    case 2: risingTotalCount = (java.lang.Long)value$; break;
    case 3: risingNewCount = (java.lang.Long)value$; break;
    case 4: middleTotalCount = (java.lang.Long)value$; break;
    case 5: middleNewCount = (java.lang.Long)value$; break;
    case 6: lapsingTotalCount = (java.lang.Long)value$; break;
    case 7: lapsingNewCount = (java.lang.Long)value$; break;
    case 8: deeplyTotalCount = (java.lang.Long)value$; break;
    case 9: deeplyNewCount = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'bestTotalCount' field.
   * @return total number of customers in segment for given timePeriod
   */
  public java.lang.Long getBestTotalCount() {
    return bestTotalCount;
  }

  /**
   * Sets the value of the 'bestTotalCount' field.
   * total number of customers in segment for given timePeriod
   * @param value the value to set.
   */
  public void setBestTotalCount(java.lang.Long value) {
    this.bestTotalCount = value;
  }

  /**
   * Gets the value of the 'bestNewCount' field.
   * @return Count of those not seen in PREVIOUS period, those not represented in migrationArray
   */
  public java.lang.Long getBestNewCount() {
    return bestNewCount;
  }

  /**
   * Sets the value of the 'bestNewCount' field.
   * Count of those not seen in PREVIOUS period, those not represented in migrationArray
   * @param value the value to set.
   */
  public void setBestNewCount(java.lang.Long value) {
    this.bestNewCount = value;
  }

  /**
   * Gets the value of the 'risingTotalCount' field.
   * @return total number of customers in segment for given timePeriod
   */
  public java.lang.Long getRisingTotalCount() {
    return risingTotalCount;
  }

  /**
   * Sets the value of the 'risingTotalCount' field.
   * total number of customers in segment for given timePeriod
   * @param value the value to set.
   */
  public void setRisingTotalCount(java.lang.Long value) {
    this.risingTotalCount = value;
  }

  /**
   * Gets the value of the 'risingNewCount' field.
   * @return Count of those not seen in PREVIOUS period, those not represented in migrationArray
   */
  public java.lang.Long getRisingNewCount() {
    return risingNewCount;
  }

  /**
   * Sets the value of the 'risingNewCount' field.
   * Count of those not seen in PREVIOUS period, those not represented in migrationArray
   * @param value the value to set.
   */
  public void setRisingNewCount(java.lang.Long value) {
    this.risingNewCount = value;
  }

  /**
   * Gets the value of the 'middleTotalCount' field.
   * @return total number of customers in segment for given timePeriod
   */
  public java.lang.Long getMiddleTotalCount() {
    return middleTotalCount;
  }

  /**
   * Sets the value of the 'middleTotalCount' field.
   * total number of customers in segment for given timePeriod
   * @param value the value to set.
   */
  public void setMiddleTotalCount(java.lang.Long value) {
    this.middleTotalCount = value;
  }

  /**
   * Gets the value of the 'middleNewCount' field.
   * @return Count of those not seen in PREVIOUS period, those not represented in migrationArray
   */
  public java.lang.Long getMiddleNewCount() {
    return middleNewCount;
  }

  /**
   * Sets the value of the 'middleNewCount' field.
   * Count of those not seen in PREVIOUS period, those not represented in migrationArray
   * @param value the value to set.
   */
  public void setMiddleNewCount(java.lang.Long value) {
    this.middleNewCount = value;
  }

  /**
   * Gets the value of the 'lapsingTotalCount' field.
   * @return total number of customers in segment for given timePeriod
   */
  public java.lang.Long getLapsingTotalCount() {
    return lapsingTotalCount;
  }

  /**
   * Sets the value of the 'lapsingTotalCount' field.
   * total number of customers in segment for given timePeriod
   * @param value the value to set.
   */
  public void setLapsingTotalCount(java.lang.Long value) {
    this.lapsingTotalCount = value;
  }

  /**
   * Gets the value of the 'lapsingNewCount' field.
   * @return Count of those not seen in PREVIOUS period, those not represented in migrationArray
   */
  public java.lang.Long getLapsingNewCount() {
    return lapsingNewCount;
  }

  /**
   * Sets the value of the 'lapsingNewCount' field.
   * Count of those not seen in PREVIOUS period, those not represented in migrationArray
   * @param value the value to set.
   */
  public void setLapsingNewCount(java.lang.Long value) {
    this.lapsingNewCount = value;
  }

  /**
   * Gets the value of the 'deeplyTotalCount' field.
   * @return total number of customers in segment for given timePeriod
   */
  public java.lang.Long getDeeplyTotalCount() {
    return deeplyTotalCount;
  }

  /**
   * Sets the value of the 'deeplyTotalCount' field.
   * total number of customers in segment for given timePeriod
   * @param value the value to set.
   */
  public void setDeeplyTotalCount(java.lang.Long value) {
    this.deeplyTotalCount = value;
  }

  /**
   * Gets the value of the 'deeplyNewCount' field.
   * @return Count of those not seen in PREVIOUS period, those not represented in migrationArray
   */
  public java.lang.Long getDeeplyNewCount() {
    return deeplyNewCount;
  }

  /**
   * Sets the value of the 'deeplyNewCount' field.
   * Count of those not seen in PREVIOUS period, those not represented in migrationArray
   * @param value the value to set.
   */
  public void setDeeplyNewCount(java.lang.Long value) {
    this.deeplyNewCount = value;
  }

  /**
   * Creates a new segmentCounts RecordBuilder.
   * @return A new segmentCounts RecordBuilder
   */
  public static com.brierley.avro.schemas.segmentCounts.Builder newBuilder() {
    return new com.brierley.avro.schemas.segmentCounts.Builder();
  }

  /**
   * Creates a new segmentCounts RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new segmentCounts RecordBuilder
   */
  public static com.brierley.avro.schemas.segmentCounts.Builder newBuilder(com.brierley.avro.schemas.segmentCounts.Builder other) {
    return new com.brierley.avro.schemas.segmentCounts.Builder(other);
  }

  /**
   * Creates a new segmentCounts RecordBuilder by copying an existing segmentCounts instance.
   * @param other The existing instance to copy.
   * @return A new segmentCounts RecordBuilder
   */
  public static com.brierley.avro.schemas.segmentCounts.Builder newBuilder(com.brierley.avro.schemas.segmentCounts other) {
    return new com.brierley.avro.schemas.segmentCounts.Builder(other);
  }

  /**
   * RecordBuilder for segmentCounts instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<segmentCounts>
    implements org.apache.avro.data.RecordBuilder<segmentCounts> {

    /** total number of customers in segment for given timePeriod */
    private long bestTotalCount;
    /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
    private long bestNewCount;
    /** total number of customers in segment for given timePeriod */
    private long risingTotalCount;
    /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
    private long risingNewCount;
    /** total number of customers in segment for given timePeriod */
    private long middleTotalCount;
    /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
    private long middleNewCount;
    /** total number of customers in segment for given timePeriod */
    private long lapsingTotalCount;
    /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
    private long lapsingNewCount;
    /** total number of customers in segment for given timePeriod */
    private long deeplyTotalCount;
    /** Count of those not seen in PREVIOUS period, those not represented in migrationArray */
    private long deeplyNewCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.brierley.avro.schemas.segmentCounts.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bestTotalCount)) {
        this.bestTotalCount = data().deepCopy(fields()[0].schema(), other.bestTotalCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bestNewCount)) {
        this.bestNewCount = data().deepCopy(fields()[1].schema(), other.bestNewCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.risingTotalCount)) {
        this.risingTotalCount = data().deepCopy(fields()[2].schema(), other.risingTotalCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.risingNewCount)) {
        this.risingNewCount = data().deepCopy(fields()[3].schema(), other.risingNewCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.middleTotalCount)) {
        this.middleTotalCount = data().deepCopy(fields()[4].schema(), other.middleTotalCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.middleNewCount)) {
        this.middleNewCount = data().deepCopy(fields()[5].schema(), other.middleNewCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lapsingTotalCount)) {
        this.lapsingTotalCount = data().deepCopy(fields()[6].schema(), other.lapsingTotalCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lapsingNewCount)) {
        this.lapsingNewCount = data().deepCopy(fields()[7].schema(), other.lapsingNewCount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.deeplyTotalCount)) {
        this.deeplyTotalCount = data().deepCopy(fields()[8].schema(), other.deeplyTotalCount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.deeplyNewCount)) {
        this.deeplyNewCount = data().deepCopy(fields()[9].schema(), other.deeplyNewCount);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing segmentCounts instance
     * @param other The existing instance to copy.
     */
    private Builder(com.brierley.avro.schemas.segmentCounts other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.bestTotalCount)) {
        this.bestTotalCount = data().deepCopy(fields()[0].schema(), other.bestTotalCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bestNewCount)) {
        this.bestNewCount = data().deepCopy(fields()[1].schema(), other.bestNewCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.risingTotalCount)) {
        this.risingTotalCount = data().deepCopy(fields()[2].schema(), other.risingTotalCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.risingNewCount)) {
        this.risingNewCount = data().deepCopy(fields()[3].schema(), other.risingNewCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.middleTotalCount)) {
        this.middleTotalCount = data().deepCopy(fields()[4].schema(), other.middleTotalCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.middleNewCount)) {
        this.middleNewCount = data().deepCopy(fields()[5].schema(), other.middleNewCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lapsingTotalCount)) {
        this.lapsingTotalCount = data().deepCopy(fields()[6].schema(), other.lapsingTotalCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lapsingNewCount)) {
        this.lapsingNewCount = data().deepCopy(fields()[7].schema(), other.lapsingNewCount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.deeplyTotalCount)) {
        this.deeplyTotalCount = data().deepCopy(fields()[8].schema(), other.deeplyTotalCount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.deeplyNewCount)) {
        this.deeplyNewCount = data().deepCopy(fields()[9].schema(), other.deeplyNewCount);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'bestTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @return The value.
      */
    public java.lang.Long getBestTotalCount() {
      return bestTotalCount;
    }

    /**
      * Sets the value of the 'bestTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @param value The value of 'bestTotalCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder setBestTotalCount(long value) {
      validate(fields()[0], value);
      this.bestTotalCount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bestTotalCount' field has been set.
      * total number of customers in segment for given timePeriod
      * @return True if the 'bestTotalCount' field has been set, false otherwise.
      */
    public boolean hasBestTotalCount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bestTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder clearBestTotalCount() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bestNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return The value.
      */
    public java.lang.Long getBestNewCount() {
      return bestNewCount;
    }

    /**
      * Sets the value of the 'bestNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @param value The value of 'bestNewCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder setBestNewCount(long value) {
      validate(fields()[1], value);
      this.bestNewCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bestNewCount' field has been set.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return True if the 'bestNewCount' field has been set, false otherwise.
      */
    public boolean hasBestNewCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bestNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder clearBestNewCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @return The value.
      */
    public java.lang.Long getRisingTotalCount() {
      return risingTotalCount;
    }

    /**
      * Sets the value of the 'risingTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @param value The value of 'risingTotalCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder setRisingTotalCount(long value) {
      validate(fields()[2], value);
      this.risingTotalCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'risingTotalCount' field has been set.
      * total number of customers in segment for given timePeriod
      * @return True if the 'risingTotalCount' field has been set, false otherwise.
      */
    public boolean hasRisingTotalCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'risingTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder clearRisingTotalCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'risingNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return The value.
      */
    public java.lang.Long getRisingNewCount() {
      return risingNewCount;
    }

    /**
      * Sets the value of the 'risingNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @param value The value of 'risingNewCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder setRisingNewCount(long value) {
      validate(fields()[3], value);
      this.risingNewCount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'risingNewCount' field has been set.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return True if the 'risingNewCount' field has been set, false otherwise.
      */
    public boolean hasRisingNewCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'risingNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder clearRisingNewCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @return The value.
      */
    public java.lang.Long getMiddleTotalCount() {
      return middleTotalCount;
    }

    /**
      * Sets the value of the 'middleTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @param value The value of 'middleTotalCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder setMiddleTotalCount(long value) {
      validate(fields()[4], value);
      this.middleTotalCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'middleTotalCount' field has been set.
      * total number of customers in segment for given timePeriod
      * @return True if the 'middleTotalCount' field has been set, false otherwise.
      */
    public boolean hasMiddleTotalCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'middleTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder clearMiddleTotalCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return The value.
      */
    public java.lang.Long getMiddleNewCount() {
      return middleNewCount;
    }

    /**
      * Sets the value of the 'middleNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @param value The value of 'middleNewCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder setMiddleNewCount(long value) {
      validate(fields()[5], value);
      this.middleNewCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'middleNewCount' field has been set.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return True if the 'middleNewCount' field has been set, false otherwise.
      */
    public boolean hasMiddleNewCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'middleNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder clearMiddleNewCount() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @return The value.
      */
    public java.lang.Long getLapsingTotalCount() {
      return lapsingTotalCount;
    }

    /**
      * Sets the value of the 'lapsingTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @param value The value of 'lapsingTotalCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder setLapsingTotalCount(long value) {
      validate(fields()[6], value);
      this.lapsingTotalCount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingTotalCount' field has been set.
      * total number of customers in segment for given timePeriod
      * @return True if the 'lapsingTotalCount' field has been set, false otherwise.
      */
    public boolean hasLapsingTotalCount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'lapsingTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder clearLapsingTotalCount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'lapsingNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return The value.
      */
    public java.lang.Long getLapsingNewCount() {
      return lapsingNewCount;
    }

    /**
      * Sets the value of the 'lapsingNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @param value The value of 'lapsingNewCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder setLapsingNewCount(long value) {
      validate(fields()[7], value);
      this.lapsingNewCount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'lapsingNewCount' field has been set.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return True if the 'lapsingNewCount' field has been set, false otherwise.
      */
    public boolean hasLapsingNewCount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'lapsingNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder clearLapsingNewCount() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @return The value.
      */
    public java.lang.Long getDeeplyTotalCount() {
      return deeplyTotalCount;
    }

    /**
      * Sets the value of the 'deeplyTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @param value The value of 'deeplyTotalCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder setDeeplyTotalCount(long value) {
      validate(fields()[8], value);
      this.deeplyTotalCount = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyTotalCount' field has been set.
      * total number of customers in segment for given timePeriod
      * @return True if the 'deeplyTotalCount' field has been set, false otherwise.
      */
    public boolean hasDeeplyTotalCount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'deeplyTotalCount' field.
      * total number of customers in segment for given timePeriod
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder clearDeeplyTotalCount() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'deeplyNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return The value.
      */
    public java.lang.Long getDeeplyNewCount() {
      return deeplyNewCount;
    }

    /**
      * Sets the value of the 'deeplyNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @param value The value of 'deeplyNewCount'.
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder setDeeplyNewCount(long value) {
      validate(fields()[9], value);
      this.deeplyNewCount = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'deeplyNewCount' field has been set.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return True if the 'deeplyNewCount' field has been set, false otherwise.
      */
    public boolean hasDeeplyNewCount() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'deeplyNewCount' field.
      * Count of those not seen in PREVIOUS period, those not represented in migrationArray
      * @return This builder.
      */
    public com.brierley.avro.schemas.segmentCounts.Builder clearDeeplyNewCount() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public segmentCounts build() {
      try {
        segmentCounts record = new segmentCounts();
        record.bestTotalCount = fieldSetFlags()[0] ? this.bestTotalCount : (java.lang.Long) defaultValue(fields()[0]);
        record.bestNewCount = fieldSetFlags()[1] ? this.bestNewCount : (java.lang.Long) defaultValue(fields()[1]);
        record.risingTotalCount = fieldSetFlags()[2] ? this.risingTotalCount : (java.lang.Long) defaultValue(fields()[2]);
        record.risingNewCount = fieldSetFlags()[3] ? this.risingNewCount : (java.lang.Long) defaultValue(fields()[3]);
        record.middleTotalCount = fieldSetFlags()[4] ? this.middleTotalCount : (java.lang.Long) defaultValue(fields()[4]);
        record.middleNewCount = fieldSetFlags()[5] ? this.middleNewCount : (java.lang.Long) defaultValue(fields()[5]);
        record.lapsingTotalCount = fieldSetFlags()[6] ? this.lapsingTotalCount : (java.lang.Long) defaultValue(fields()[6]);
        record.lapsingNewCount = fieldSetFlags()[7] ? this.lapsingNewCount : (java.lang.Long) defaultValue(fields()[7]);
        record.deeplyTotalCount = fieldSetFlags()[8] ? this.deeplyTotalCount : (java.lang.Long) defaultValue(fields()[8]);
        record.deeplyNewCount = fieldSetFlags()[9] ? this.deeplyNewCount : (java.lang.Long) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
